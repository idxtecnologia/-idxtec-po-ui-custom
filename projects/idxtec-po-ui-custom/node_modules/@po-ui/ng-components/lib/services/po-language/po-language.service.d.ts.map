{"version":3,"file":"po-language.service.d.ts","sources":["po-language.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @docsPrivate\n *\n * @description\n *\n * Serviço responsável por gerenciar as linguagens da aplicação.\n */\nexport declare class PoLanguageService {\n    constructor();\n    set languageDefault(language: string);\n    get languageDefault(): string;\n    /**\n     * @description\n     *\n     * Método responsável por retornar o idioma ativo.\n     *\n     * A busca do idioma será feita na seguinte ordem:\n     *\n     *   1 - o idioma que foi armazenado no *localStorage*, através do método `setLanguage()` utilizado pelo i18n.\n     *\n     *   2 - o valor inserido nas configurações do módulo do i18n através do parâmetro `config`, sendo o idioma inserido\n     * na propriedade `language` da interface `PoI18nConfigDefault`.\n     *\n     *   3 - o idioma do navegador utilizado.\n     *\n     * > Caso o idioma do navegador não seja suportado pelo PO (`pt`, `en`, `es` ou `ru`), será retornado valor `pt`.\n     *\n     * **Retorno:** `string` com a sigla do idioma ativo.\n     */\n    getLanguage(): string;\n    /**\n     * @description\n     *\n     * Método responsável por retornar o idioma *default* da aplicação definido nas configurações do módulo do i18n através\n     * do parâmetro `config`.\n     *\n     * **Retorno:** `string` com a sigla do idioma *default*.\n     */\n    getLanguageDefault(): string;\n    /**\n     * @description\n     *\n     * Método responsável por retornar a abreviação do idioma ativo na aplicação.\n     *\n     * @default `pt`\n     *\n     * **Retorno:** `string` com a sigla abreviada do idioma ativo.\n     */\n    getShortLanguage(): string;\n    /**\n     * @description\n     *\n     * Método para salvar o idioma da aplicação no *storage*, utilizado pelo serviço do i18n.\n     *\n     * > Ao definir um idioma por este método, todos os módulos da aplicação utilizarão o idioma definido.\n     *\n     * @param language sigla do idioma.\n     *\n     * Esta sigla deve ser composta por duas letras representando o idioma,\n     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.\n     *\n     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.\n     */\n    setLanguage(language: string): void;\n    /**\n     * @description\n     *\n     * Método que define o idioma configurado a partir do parâmetro `config` utilizado pelo módulo do i18n.\n     *\n     * > Ao definir um idioma por este serviço, apenas o módulo do i18n referente a esta configuração utilizará o idioma definido.\n     *\n     * @param language sigla do idioma.\n     *\n     * Esta sigla deve ser composta por duas letras representando o idioma,\n     * podendo ser adicionado outras duas letras representando o país, por exemplo: `pt`, `pt-BR`, `pt-br`, `en` ou `en-US`.\n     *\n     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.\n     */\n    setLanguageDefault(language: string): void;\n    /**\n     * @description\n     *\n     * Método que retorna o separador\n     *\n     * @param language sigla do idioma.\n     *\n     * Esta sigla deve ser composta por duas letras representando o idioma\n     *\n     * > Caso seja informado um valor diferente deste padrão, o mesmo será ignorado.\n     */\n    getNumberSeparators(language?: string): {\n        decimalSeparator: string;\n        thousandSeparator: string;\n    };\n}\n"]}