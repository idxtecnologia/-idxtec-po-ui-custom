{"version":3,"file":"po-i18n.module.d.ts","sources":["po-i18n.module.d.ts"],"names":[],"mappingssourcesContent":["import { ModuleWithProviders } from '@angular/core';\nimport { PoLanguageService } from './../po-language/po-language.service';\nimport { PoI18nConfig } from './interfaces/po-i18n-config.interface';\n/**\n * @description\n *\n * Módulo do serviço `PoI18nService` para controle de idiomas com PO.\n *\n * Para utilização do serviço de idiomas `PoI18nService`, deve-se importar este módulo mesmo já havendo importado\n * o módulo `PoModule`. Na importação deve ser invocado o método `config`, informando um objeto que deve implementar\n * a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig) para configuração.\n *\n * <a id=\"i18n-config\"></a>\n * **Exemplo de configuração do módulo do i18n:**\n * ```\n * import { PoI18nConfig } from '@po-ui/ng-components';\n *\n * import { generalEn } from './i18n/general-en';\n * import { generalPt } from './i18n/general-pt';\n *\n * const i18nConfig: PoI18nConfig = {\n *   default: {\n *     language: 'pt-BR',\n *     context: 'general',\n *     cache: true\n *   },\n *   contexts: {\n *     general: {\n *       'pt-BR': generalPt,\n *       'en-US': generalEn\n *     },\n *     hcm: {\n *       url: 'http://10.1.1.1/api/translations/hcm/'\n *     }\n *   }\n * };\n *\n * @NgModule({\n *   declarations: [],\n *   imports: [\n *     PoModule,\n *     PoI18nModule.config(i18nConfig)\n *   ],\n *   bootstrap: [AppComponent]\n * })\n * ```\n *\n * Para cada contexto é possível definir a origem das literais, que podem ser de um serviço REST ou\n * de um objeto. Exemplo:\n *\n * Arquivo general-pt.ts\n * ```\n * export const generalPt = {\n *  add: 'Adicionar',\n *  greeting: 'Prazer, {0} {1}',\n *  people: '{0} Pessoas,\n *  remove: 'Remover'\n * }\n * ```\n *\n * Arquivo general-en.ts\n * ```\n * export const generalEn = {\n *  add: 'Add',\n *  greeting: 'Nice to meet you, {0} {1}',\n *  people: '{0} People,\n *  remove: 'Remove'\n * }\n * ```\n *\n * **Exemplo de configuração de contextos usando constantes externas:**\n * ```\n * import { PoI18nConfig } from '@po-ui/ng-components';\n *\n * import { generalEn } from './i18n/general-en';\n * import { generalPt } from './i18n/general-pt';\n *\n * const i18nConfig: PoI18nConfig = {\n *   contexts: {\n *     general: {\n *       'pt-BR': generalPt, // constantes em arquivos separados\n *       'en-US': generalEn // constantes em arquivos separados\n *     },\n *     crm: {\n *       url: 'http://10.0.0.1:3000/api/translations/crm'\n *     }\n *   },\n *   default: {}\n * }\n * ```\n *\n * **Exemplo de configuração de um contexto utilizando serviço:**\n *\n * Ao optar por utilizar um serviço para configuração de contexto, deverá ser definida a URL\n * específica do contexto, como nos exemplos abaixo:\n *\n *  - http://10.0.0.1:3000/api/translations/crm\n *  - http://10.0.0.1:3000/api/translations/general\n *\n * Os idiomas e literais serão automaticamente buscados com parâmetros na própria URL:\n * - **language**: o idioma será sempre passado por parâmetro e é recomendado utilizar uma das linguagens\n * suportadas pelo PO (`pt-br`, `en-us`, `es-es` ou `ru`).\n * - **literals**: as literais serão separadas por vírgula. Caso esse parâmetro não seja informado, o\n * serviço deve retornar todas as literais do idioma.\n *\n * Exemplos de requisição:\n *\n *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br\n *  - http://10.0.0.1:3000/api/translations/crm?language=pt-br&literals=add,remove,text\n *\n * > Sempre que o idioma solicitado não for encontrado, será buscado por `pt-br`.\n *\n * Além dos contextos, é possível definir as configurações *default* do sistema na configuração do\n * módulo utilizando a interface [`PoI18nConfig`](documentation/po-i18n#poI18nConfig):\n *\n * **Exemplo de padrões definidos:**\n * ```\n * const i18nConfig: PoI18nConfig = {\n *   contexts: {\n *     general: { }\n *   },\n *   default: {\n *    language: 'pt-BR',\n *    context: 'general',\n *    cache: true\n *   }\n * }\n * ```\n *\n * **Importante:**\n *\n * Recomenda-se que as definições *default* sejam realizadas apenas uma vez na aplicação,\n * preferencialmente no módulo `AppModule`.\n *\n * **i18n com *Lazy loading***\n *\n * Para aplicações que utilizem a abordagem de módulos com carregamento *lazy loading*, caso seja\n * definida outra configuração do `PoI18nModule`, deve-se atentar os seguintes detalhes:\n *\n * - Caso existam literais comuns na aplicação, estas devem ser reimportadas;\n * - Não defina outra *default language* para este módulo. Caso for definida, será sobreposta para\n * toda a aplicação;\n * - Caso precise de módulos carregados via *lazy loading* com linguagens diferentes, utilize o\n * método [`setLanguage()`](documentation/po-i18n#setLanguage) disponibilizado pelo `PoI18nService`\n * para definir a linguagem da aplicação e dos módulos com as linguagens diferentes.\n */\nexport declare class PoI18nModule {\n    static config(config: PoI18nConfig): ModuleWithProviders<PoI18nModule>;\n}\nexport declare function initializeLanguageDefault(config: PoI18nConfig, languageService: PoLanguageService): () => void;\n"]}