{"version":3,"file":"po-dynamic-view-base.component.d.ts","sources":["po-dynamic-view-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { CurrencyPipe, DatePipe, DecimalPipe, TitleCasePipe } from '@angular/common';\nimport { PoTimePipe } from '../../../pipes/po-time/po-time.pipe';\nimport { PoDynamicViewField } from './po-dynamic-view-field.interface';\nimport { PoDynamicViewService } from './po-dynamic-view.service';\n/**\n *\n * @description\n *\n * Componente para listar dados dinamicamente a partir de uma lista de objetos.\n *\n * > Por padrão esse componente cria `po-info` para exibição, é possível criar `po-tag` passando a propriedade { tag: true }.\n *\n */\nexport declare class PoDynamicViewBaseComponent {\n    private currencyPipe;\n    private datePipe;\n    private decimalPipe;\n    private timePipe;\n    private titleCasePipe;\n    protected dynamicViewService: PoDynamicViewService;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Possibilita executar uma função quando o componente é inicializado.\n     *\n     * A propriedade aceita os seguintes tipos:\n     * - **String**: Endpoint usado pelo componente para requisição via `POST`.\n     * - **Function**: Método que será executado na inicialização do componente.\n     *\n     * Para os dois tipos de utilização da propriedade espera-se o seguinte retorno:\n     *\n     * ```\n     * {\n     *   value: {\n     *     cnpj: '**************', // altera valor do campo\n     *     updated: (new Date()).toString() // atribui valor ao campo novo\n     *   },\n     *   fields: [\n     *     { property: 'cnpj', tag: true, inverse: true }, // atribui novas propriedades ao field\n     *     { property: 'updated', tag: true } // inclui campo novo\n     *   ]\n     * }\n     * ```\n     * > **value**: any = atribui novo valor do model.\n     *\n     * > **fields**: `Array<PoDynamicViewField>` = Lista de campos que deseja alterar as propriedades,\n     * caso enviar um campo a mais será criado um novo campo.\n     *\n     * - Para esconder/remover campos precisa informar no field a propriedade `visible = false`.\n     *\n     */\n    load: string | Function;\n    visibleFields: any[];\n    private _fields;\n    private _showAllValue;\n    private _value;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Lista de objetos que implementam a interface `PoDynamicView`.\n     *\n     * > Ex: `[ { property: 'age' } ]`\n     *\n     * Regras de tipagem e formatação dos valores exibidos:\n     *\n     * - Caso o *type* informado seja *currency* e não seja informado o *format* o mesmo recebe \"'BRL', 'symbol', '1.2-2'\"\n     * como formato padrão.\n     * - Caso o *type* informado seja *date* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy' como formato padrão.\n     * - Caso o *type* informado seja *dateTime* e não seja informado o *format* o mesmo recebe 'dd/MM/yyyy HH:mm:ss' como formato padrão.\n     * - Caso o *type* informado seja *number* e não seja informado o *format* o mesmo não será formatado.\n     * - Caso o *type* informado seja *time* e não seja informado o *format* o mesmo recebe 'HH:mm:ss.ffffff' como formato padrão.\n     *\n     * > As propriedades informadas serão exibidas mesmo não contendo valor de referência no objeto da propriedade `p-value`.\n     *\n     * @default `[]`\n     */\n    set fields(fields: Array<PoDynamicViewField>);\n    get fields(): Array<PoDynamicViewField>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica se exibirá todas as informações contidas dentro do objeto informado na propriedade `p-value`.\n     *\n     * @default `false`\n     */\n    set showAllValue(value: boolean);\n    get showAllValue(): boolean;\n    /**\n     * @description\n     *\n     * Objeto que será utilizado para exibir as informações dinâmicas, o valor será recuperado através do atributo *property*\n     * dos objetos contidos na propridade `p-fields`.\n     *\n     * > Ex: `{ age: '35' }`\n     */\n    set value(value: object);\n    get value(): object;\n    constructor(currencyPipe: CurrencyPipe, datePipe: DatePipe, decimalPipe: DecimalPipe, timePipe: PoTimePipe, titleCasePipe: TitleCasePipe, dynamicViewService: PoDynamicViewService);\n    protected getConfiguredFields(): any[];\n    protected getMergedFields(): any[];\n    protected getValueFields(): {\n        tag?: boolean;\n        color?: string;\n        icon?: string;\n        inverse?: boolean;\n        format?: string;\n        order?: number;\n        key?: boolean;\n        property: string;\n        label: string;\n        gridColumns?: number;\n        gridSmColumns?: number;\n        gridMdColumns?: number;\n        gridLgColumns?: number;\n        gridXlColumns?: number;\n        gridSmPull?: number;\n        gridMdPull?: number;\n        gridLgPull?: number;\n        gridXlPull?: number;\n        visible?: boolean;\n        divider?: string;\n        type?: string;\n        value: any;\n        cssClass: string;\n    }[];\n    private createField;\n    private transformValue;\n}\n"]}