{"version":3,"file":"po-table.component.d.ts","sources":["po-table.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, IterableDiffers, OnDestroy, QueryList, Renderer2, TemplateRef } from '@angular/core';\nimport { DecimalPipe } from '@angular/common';\nimport { Router } from '@angular/router';\nimport { PoDateService } from '../../services/po-date/po-date.service';\nimport { PoLanguageService } from '../../services/po-language/po-language.service';\nimport { PoPopupComponent } from '../po-popup/po-popup.component';\nimport { PoTableAction } from './interfaces/po-table-action.interface';\nimport { PoTableBaseComponent, QueryParamsType } from './po-table-base.component';\nimport { PoTableColumn } from './interfaces/po-table-column.interface';\nimport { PoTableColumnLabel } from './po-table-column-label/po-table-column-label.interface';\nimport { PoTableRowTemplateDirective } from './po-table-row-template/po-table-row-template.directive';\nimport { PoTableSubtitleColumn } from './po-table-subtitle-footer/po-table-subtitle-column.interface';\nimport { PoTableCellTemplateDirective } from './po-table-cell-template/po-table-cell-template.directive';\nimport { PoTableColumnTemplateDirective } from './po-table-column-template/po-table-column-template.directive';\nimport { PoTableService } from './services/po-table.service';\n/**\n * @docsExtends PoTableBaseComponent\n *\n * @example\n *\n * <example name=\"po-table-basic\" title=\"PO Table Basic\">\n *  <file name=\"sample-po-table-basic/sample-po-table-basic.component.ts\"> </file>\n *  <file name=\"sample-po-table-basic/sample-po-table-basic.component.html\"> </file>\n * </example>\n *\n * <example name=\"po-table-labs\" title=\"PO Table Labs\">\n *  <file name=\"sample-po-table-labs/sample-po-table-labs.component.ts\"> </file>\n *  <file name=\"sample-po-table-labs/sample-po-table-labs.component.html\"> </file>\n *  <file name=\"sample-po-table-labs/sample-po-table-labs.component.e2e-spec.ts\"> </file>\n *  <file name=\"sample-po-table-labs/sample-po-table-labs.component.po.ts\"> </file>\n *  <file name=\"sample-po-table-labs/sample-po-table-labs.service.ts\"> </file>\n * </example>\n *\n * <example name=\"po-table-with-api\" title=\"PO Table using API\">\n *  <file name=\"sample-po-table-with-api/sample-po-table-with-api.component.ts\"> </file>\n *  <file name=\"sample-po-table-with-api/sample-po-table-with-api.component.html\"> </file>\n * </example>\n *\n * <example name=\"po-table-transport\" title=\"PO Table - Transport\">\n *  <file name=\"sample-po-table-transport/sample-po-table-transport.component.ts\"> </file>\n *  <file name=\"sample-po-table-transport/sample-po-table-transport.component.html\"> </file>\n *  <file name=\"sample-po-table-transport/sample-po-table-transport.service.ts\"> </file>\n * </example>\n *\n * <example name=\"po-table-airfare\" title=\"PO Table - Airfare\">\n *  <file name=\"sample-po-table-airfare/sample-po-table-airfare.component.ts\"> </file>\n *  <file name=\"sample-po-table-airfare/sample-po-table-airfare.component.html\"> </file>\n *  <file name=\"sample-po-table-airfare/sample-po-table-airfare.service.ts\"> </file>\n * </example>\n *\n * <example name=\"po-table-components\" title=\"PO Table - Po Field Components\">\n *  <file name=\"sample-po-table-components/sample-po-table-components.component.ts\"> </file>\n *  <file name=\"sample-po-table-components/sample-po-table-components.enum.ts\"> </file>\n *  <file name=\"sample-po-table-components/sample-po-table-components.component.html\"> </file>\n *  <file name=\"sample-po-table-components/sample-po-table-components.service.ts\"> </file>\n *  <file name=\"sample-po-table-components/sample-po-table-components.component.css\"> </file>\n * </example>\n *\n */\nexport declare class PoTableComponent extends PoTableBaseComponent implements AfterViewInit, DoCheck, OnDestroy {\n    private changeDetector;\n    private decimalPipe;\n    private router;\n    private defaultService;\n    tableRowTemplate: PoTableRowTemplateDirective;\n    tableCellTemplate: PoTableCellTemplateDirective;\n    tableColumnTemplates: QueryList<PoTableColumnTemplateDirective>;\n    noColumnsHeader: any;\n    poPopupComponent: PoPopupComponent;\n    tableFooterElement: any;\n    tableWrapperElement: any;\n    poTableTbody: any;\n    actionsIconElement: QueryList<any>;\n    actionsElement: QueryList<any>;\n    headersTable: QueryList<any>;\n    heightTableContainer: number;\n    popupTarget: any;\n    tableOpacity: number;\n    tooltipText: string;\n    lastVisibleColumnsSelected: Array<PoTableColumn>;\n    private _columnManagerTarget;\n    private differ;\n    private footerHeight;\n    private initialized;\n    private timeoutResize;\n    private visibleElement;\n    private scrollEvent$;\n    private subscriptionScrollEvent;\n    private clickListener;\n    private resizeListener;\n    set columnManagerTarget(value: ElementRef);\n    get columnManagerTarget(): ElementRef;\n    constructor(poDate: PoDateService, differs: IterableDiffers, renderer: Renderer2, poLanguageService: PoLanguageService, changeDetector: ChangeDetectorRef, decimalPipe: DecimalPipe, router: Router, defaultService: PoTableService);\n    get hasRowTemplateWithArrowDirectionRight(): boolean;\n    get columnCount(): number;\n    get columnCountForMasterDetail(): number;\n    get detailHideSelect(): boolean;\n    get hasVisibleActions(): boolean;\n    get firstAction(): PoTableAction;\n    get hasFooter(): boolean;\n    get hasMasterDetailColumn(): boolean;\n    get hasRowTemplate(): boolean;\n    get hasSelectableColumn(): boolean;\n    get hasValidColumns(): boolean;\n    get hasVisibleSubtitleColumns(): boolean;\n    get isSingleAction(): boolean;\n    get visibleActions(): PoTableAction[];\n    ngAfterViewInit(): void;\n    showMoreInfiniteScroll({ target }: {\n        target: any;\n    }): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    /**\n     * Método responsável por realizar busca no serviço de dados podendo informar filtros e com o retorno, atualiza a tabela.\n     *\n     * Caso não seja informado parâmetro, nada será adicionado ao GET, conforme abaixo:\n     * ```\n     * url + ?page=1&pageSize=10\n     * ```\n     * > Obs: os parâmetros `page` e `pageSize` sempre serão chamados independente de ser enviados outros parâmetros.\n     *\n     * Caso sejam informados os parâmetros `{ name: 'JOHN', age: '23' }`, todos serão adicionados ao GET, conforme abaixo:\n     * ```\n     * url + ?page=1&pageSize=10&name=JOHN&age=23\n     * ```\n     *\n     * @param { { key: value } } queryParams Formato do objeto a ser enviado.\n     * > Pode ser utilizada qualquer string como key, e qualquer string ou number como value.\n     */\n    applyFilters(queryParams?: {\n        [key: string]: QueryParamsType;\n    }): void;\n    /**\n     * Método que colapsa uma linha com detalhe quando executada.\n     *\n     * @param { number } rowIndex Índice da linha que será colapsada.\n     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.\n     */\n    collapse(rowIndex: number): void;\n    /**\n     * Método que expande uma linha com detalhe quando executada.\n     *\n     * @param { number } rowIndex Índice da linha que será expandida.\n     * > Ao reordenar os dados da tabela, o valor contido neste índice será alterado conforme a ordenação.\n     */\n    expand(rowIndex: number): void;\n    /**\n     * Retorna as linhas do `po-table` que estão selecionadas.\n     */\n    getSelectedRows(): any[];\n    /**\n     * Retorna as linhas do `po-table` que não estão selecionadas.\n     */\n    getUnselectedRows(): any[];\n    /**\n     * Desmarca as linhas que estão selecionadas.\n     */\n    unselectRows(): void;\n    checkDisabled(row: any, column: PoTableColumn): any;\n    containsMasterDetail(row: any): any;\n    executeTableAction(row: any, tableAction: any): void;\n    /**\n     * Desmarca uma linha que está selecionada.\n     */\n    unselectRowItem(itemfn: {\n        [key: string]: any;\n    } | ((item: any) => boolean)): void;\n    /**\n     * Seleciona uma linha do 'po-table'.\n     */\n    selectRowItem(itemfn: {\n        [key: string]: any;\n    } | ((item: any) => boolean)): void;\n    formatNumber(value: any, format: string): any;\n    getBooleanLabel(rowValue: any, columnBoolean: PoTableColumn): string;\n    getColumnIcons(row: any, column: PoTableColumn): any;\n    getColumnLabel(row: any, columnLabel: PoTableColumn): PoTableColumnLabel;\n    getSubtitleColumn(row: any, subtitleColumn: PoTableColumn): PoTableSubtitleColumn;\n    isShowMasterDetail(row: any): boolean;\n    isShowRowTemplate(row: any, index: number): boolean;\n    onClickLink(event: any, row: any, column: PoTableColumn): void;\n    onChangeVisibleColumns(columns: Array<string>): void;\n    onVisibleColumnsChange(columns: Array<PoTableColumn>): void;\n    tooltipMouseEnter(event: any, column?: PoTableColumn, row?: any): any;\n    tooltipMouseLeave(): void;\n    togglePopup(row: any, targetRef: any): void;\n    trackBy(index: number): number;\n    validateTableAction(row: any, tableAction: any): any;\n    onOpenColumnManager(): void;\n    /**\n     * Método que remove um item da tabela.\n     *\n     * @param { number | { key: value } } item Índice da linha ou o item que será removido.\n     * > Ao remover o item, a linha que o representa será excluída da tabela.\n     */\n    removeItem(item: number | {\n        [key: string]: any;\n    }): void;\n    /**\n     * Método que atualiza um item da tabela.\n     *\n     * @param { number | { key: value } } item Índice da linha ou o item que será atualizado.\n     * @param { { key: value } } updatedItem Item que foi atualizado.\n     * > Ao atualizar o item, a informação será alterada na tabela.\n     */\n    updateItem(item: number | {\n        [key: string]: any;\n    }, updatedItem: {\n        [key: string]: any;\n    }): void;\n    getTemplate(column: PoTableColumn): TemplateRef<any>;\n    protected calculateHeightTableContainer(height: any): void;\n    protected calculateWidthHeaders(): void;\n    protected checkInfiniteScroll(): void;\n    private checkChangesItems;\n    private checkingIfColumnHasTooltip;\n    private debounceResize;\n    private findCustomIcon;\n    private getHeightTableFooter;\n    private hasInfiniteScroll;\n    private includeInfiniteScroll;\n    private mergeCustomIcons;\n    private removeListeners;\n    private setTableOpacity;\n    private verifyChangeHeightInFooter;\n    private verifyCalculateHeightTableContainer;\n    private toggleSelect;\n}\n"]}