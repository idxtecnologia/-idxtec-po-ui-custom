{"version":3,"file":"po-table-base.component.d.ts","sources":["po-table-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PoDateService } from '../../services/po-date/po-date.service';\nimport { PoLanguageService } from '../../services/po-language/po-language.service';\nimport { PoTableAction } from './interfaces/po-table-action.interface';\nimport { PoTableColumn } from './interfaces/po-table-column.interface';\nimport { PoTableColumnSort } from './interfaces/po-table-column-sort.interface';\nimport { PoTableLiterals } from './interfaces/po-table-literals.interface';\nimport { PoTableService } from './services/po-table.service';\nimport { PoTableResponseApi } from './interfaces/po-table-response-api.interface';\nexport declare type QueryParamsType = string | number | boolean;\nexport declare const poTableContainer: string[];\nexport declare const poTableContainerDefault = \"border\";\nexport declare const poTableLiteralsDefault: {\n    en: PoTableLiterals;\n    es: PoTableLiterals;\n    pt: PoTableLiterals;\n    ru: PoTableLiterals;\n};\n/**\n * @description\n *\n * Este componente de tabela é utilizado para exibição de dados com diferentes tipos como por exemplo textos, data, horas e números com\n * formato personalizado.\n *\n * Também é possivel criar tabelas com ordenação de dados, linhas com detalhes, coluna para seleção de linhas, coluna com ações e também\n * carregamento por demanda através do botão **Carregar mais resultados**.\n *\n * > As linhas de detalhes podem também ser customizadas através do [`p-table-row-template`](/documentation/po-table-row-template).\n *\n * > As colunas podem ser customizadas através dos templates [`p-table-column-template`](/documentation/po-table-column-template)\n * e [`p-table-cell-template`](/documentation/po-table-cell-template).\n *\n * O componente permite gerenciar a exibição das colunas dinamicamente. Esta funcionalidade pode ser acessada através do ícone de engrenagem\n * no canto superior direito do cabeçalho da tabela.\n *\n * Caso a largura de todas as colunas forem definidas e o total ultrapassar o tamanho tabela, será exibido um *scroll* na horizontal para a\n * completa visualização dos dados.\n */\nexport declare abstract class PoTableBaseComponent implements OnChanges, OnDestroy {\n    private poDate;\n    private poTableService;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Se verdadeiro, habilita a quebra de texto ao transborda-lo dentro de qualquer coluna.\n     * > Quando ocorrer a quebra de texto, ao passar o mouse no conteúdo da célula,\n     * o mesmo será exibido através do [`po-tooltip`](/documentation/po-tooltip).\n     */\n    hideTextOverflow: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Permite que o gerenciador de colunas, responsável pela definição de quais colunas serão exibidas, seja escondido.\n     *\n     * @default `false`\n     */\n    hideColumnsManager?: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Permite fechar um detalhe ou row template automaticamente, ao abrir outro item.\n     *\n     * @default `false`\n     */\n    autoCollapse?: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Permite que seja adicionado o estado de carregamento no botão \"Carregar mais resultados\".\n     *\n     * @default `false`\n     */\n    loadingShowMore?: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Habilita em todas as colunas a opção de ordenação de dados. Caso a coluna seja do tipo 'data' ou 'dateTime' a\n     * mesma deve respeitar os tipos de entrada definidos para que sejam ordenadas.\n     *\n     * @default `false`\n     */\n    sort: boolean;\n    /**\n     * @description\n     *\n     * Se verdadeiro, torna habilitado o botão \"Carregar mais resultados\".\n     *\n     * @default `false`\n     */\n    showMoreDisabled?: boolean;\n    /**\n     * @description\n     *\n     * Habilita ou desabilita o estilo listrado da tabela (`striped`).\n     * > Recomendado para tabelas com maior número de dados, facilitando a sua visualização na tabela.\n     *\n     * @default `false`\n     */\n    striped?: boolean;\n    /**\n     * @description\n     *\n     * Esconde o *checkbox* para seleção de todas as linhas.\n     *\n     * > Sempre receberá *true* caso a seleção de apenas uma linha esteja ativa.\n     *\n     * @default `false`\n     */\n    hideSelectAll: boolean;\n    /**\n     * @description\n     *\n     * Define que somente uma linha da tabela pode ser selecionada.\n     *\n     * > Esta definição não se aplica aos itens filhos, os mesmos possuem comportamento independente do item pai.\n     */\n    singleSelect?: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define uma quantidade máxima de colunas que serão exibidas na tabela.\n     *\n     * Quando chegar no valor informado, as colunas que não estiverem selecionadas ficarão\n     * desabilitadas e caso houver mais colunas visíveis do que o permitido, as excedentes\n     * serão ignoradas por ordem de posição.\n     */\n    maxColumns?: number;\n    /**\n     * @optional\n     *\n     * @description\n     * Evento executado quando todas as linhas são selecionadas por meio do *checkbox* que seleciona todas as linhas.\n     */\n    allSelected: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     * Evento executado quando a seleção das linhas é desmarcada por meio do *checkbox* que seleciona todas as linhas.\n     */\n    allUnselected: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento executado ao colapsar uma linha do `po-table`.\n     *\n     * > Como parâmetro o componente envia o item colapsado.\n     */\n    collapsed: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento executado ao expandir uma linha do `po-table`.\n     *\n     * > Como parâmetro o componente envia o item expandido.\n     */\n    expanded: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento executado ao selecionar uma linha do `po-table`.\n     */\n    selected: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Recebe uma ação de clique para o botão \"Carregar mais resultados\", caso nenhuma ação for definida o mesmo\n     * não é visível.\n     *\n     * Recebe um objeto `{ column, type }` onde:\n     *\n     * - column (`PoTableColumn`): objeto da coluna que está ordenada.\n     * - type (`PoTableColumnSortType`): tipo da ordenação.\n     */\n    showMore: EventEmitter<PoTableColumnSort>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento executado ao ordenar colunas da tabela.\n     *\n     * Recebe um objeto `{ column, type }` onde:\n     *\n     * - column (`PoTableColumn`): objeto da coluna que foi clicada/ordenada.\n     * - type (`PoTableColumnSortType`): tipo da ordenação.\n     */\n    sortBy: EventEmitter<PoTableColumnSort>;\n    /**\n     * @optional\n     *\n     * @description\n     * Evento executado ao desmarcar a seleção de uma linha do `po-table`.\n     */\n    unselected: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     * Evento disparado ao fechar o popover do gerenciador de colunas após alterar as colunas visíveis.\n     *\n     * O componente envia como parâmetro um array de string com as colunas visíveis atualizadas.\n     * Por exemplo: [\"idCard\", \"name\", \"hireStatus\", \"age\"].\n     */\n    changeVisibleColumns: EventEmitter<string[]>;\n    allColumnsWidthPixels: boolean;\n    columnMasterDetail: PoTableColumn;\n    hasMainColumns: boolean;\n    mainColumns: Array<PoTableColumn>;\n    selectAll: boolean;\n    sortedColumn: {\n        property: PoTableColumn;\n        ascending: boolean;\n    };\n    subtitleColumns: Array<PoTableColumn>;\n    page: number;\n    pageSize: number;\n    hasService?: boolean;\n    private _actions?;\n    private _columns;\n    private _container?;\n    private _height?;\n    private _hideDetail?;\n    private _items;\n    private _literals;\n    private _loading?;\n    private _selectable?;\n    private language;\n    private _serviceApi;\n    private poTableServiceSubscription;\n    private sortStore;\n    private _infiniteScrollDistance?;\n    private _infiniteScroll?;\n    /**\n     * @description\n     *\n     * Lista de itens da tabela.\n     * > Se falso, será inicializado como um *array* vazio.\n     */\n    set items(items: Array<any>);\n    get items(): Array<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Lista das colunas da tabela, deve receber um *array* de objetos que implementam a interface `PoTableColumn`.\n     * Por padrão receberá como valor a primeira coluna da lista de itens da tabela.\n     * > Caso não encontre valor, a mensagem 'Nenhuma definição de colunas' será exibida.\n     *\n     */\n    set columns(columns: Array<PoTableColumn>);\n    get columns(): Array<PoTableColumn>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Adiciona um contorno arredondado ao `po-table`, as opções são:\n     * - `border`: com bordas/linhas.\n     * - `shadow`: com sombras.\n     *\n     * @default `border`\n     */\n    set container(value: string);\n    get container(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a altura da tabela em *pixels* e fixa o cabeçalho.\n     */\n    set height(height: number);\n    get height(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Habilita a visualização da lista de detalhes de cada linha da coluna.\n     *\n     * @default `false`\n     */\n    set hideDetail(hideDetail: boolean);\n    get hideDetail(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Objeto com as literais usadas no `po-table`.\n     *\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\n     *\n     * ```\n     *  const customLiterals: PoTableLiterals = {\n     *    loadMoreData: 'Buscar mais dados',\n     *    loadingData: 'Processando',\n     *    noColumns: 'Sem colunas',\n     *    noData: 'Sem dados',\n     *    seeCompleteSubtitle: 'Mostrar legenda completa',\n     *    completeSubtitle: 'Todas legendas'\n     *  };\n     * ```\n     *\n     * Ou passando apenas as literais que deseja customizar:\n     *\n     * ```\n     *  const customLiterals: PoTableLiterals = {\n     *    noData: 'Sem dados'\n     *  };\n     * ```\n     *\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n     *\n     * ```\n     * <po-table\n     *   [p-literals]=\"customLiterals\">\n     * </po-table>\n     * ```\n     *\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\n     */\n    set literals(value: PoTableLiterals);\n    get literals(): PoTableLiterals;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Bloqueia a interação do usuário com os dados da _table_.\n     *\n     * @default `false`\n     */\n    set loading(loading: boolean);\n    get loading(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define uma lista de ações.\n     *\n     * Quando houver apenas uma ação definida ela será exibida diretamente na coluna, caso contrário, o componente\n     * se encarrega de agrupá-las exibindo o ícone [**po-icon-more**](/guides/icons) que listará as ações ao ser clicado.\n     *\n     * **A coluna de ações não será exibida quando:**\n     *  - a lista conter valores inválidos ou indefinidos.\n     *  - tenha uma única ação e a mesma não for visível.\n     */\n    set actions(actions: Array<PoTableAction>);\n    get actions(): Array<PoTableAction>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Permite a seleção de linhas na tabela e, caso a propriedade `p-single-select` esteja definida será possível\n     * selecionar apenas uma única linha.\n     *\n     * **Importante:**\n     *  - As linhas de detalhe definidas em `PoTableDetail` possuem comportamento independente da linha mestre;\n     *  - Cada linha possui por padrão a propriedade dinâmica `$selected`, na qual é possível validar se a linha\n     * está selecionada, por exemplo: `item.$selected` ou `item['$selected']`.\n     *\n     * @default `false`\n     */\n    set selectable(value: boolean);\n    get selectable(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela e o botão \"Carregar Mais\" deixará de ser exibido. Ao chegar no fim da tabela\n     * executará a função `p-show-more`.\n     *\n     * **Regras de utilização:**\n     *  - O scroll infinito só funciona para tabelas que utilizam a propriedade `p-height` e que possuem o scroll já na carga inicial dos dados.\n     *\n     * @default `false`\n     */\n    set infiniteScroll(value: boolean);\n    get infiniteScroll(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define o percentual necessário para disparar o evento `p-show-more`, que é responsável por carregar mais dados na tabela. Caso o valor informado seja maior que 100 ou menor\n     * que 0, o valor padrão será 100%\n     *\n     * **Exemplos:**\n     *  - p-infinite-scroll-distance = 80: Quando atingir 80%  do scroll da tabela, o `p-show-more` será disparado.\n     */\n    set infiniteScrollDistance(value: number);\n    get infiniteScrollDistance(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * URL da API responsável por retornar os registros.\n     *\n     * Ao realizar a busca de mais registros via paginação (Carregar mais resultados), será enviado os parâmetros `page` e `pageSize`, conforme abaixo:\n     *\n     * ```\n     * url + ?page=1&pageSize=10\n     * ```\n     *\n     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:\n     * - Coluna decrescente:\n     * ```\n     *  url + ?page=1&pageSize=10&order=-name\n     * ```\n     *\n     * - Coluna ascendente:\n     * ```\n     *  url + ?page=1&pageSize=10&order=name\n     * ```\n     *\n     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api).\n     */\n    set serviceApi(service: string);\n    get serviceApi(): string;\n    get hasColumns(): boolean;\n    get hasItems(): boolean;\n    get nameColumnDetail(): string;\n    get validColumns(): PoTableColumn[];\n    private get sortType();\n    constructor(poDate: PoDateService, languageService: PoLanguageService, poTableService: PoTableService);\n    ngOnDestroy(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    selectAllRows(): void;\n    selectRow(row: any): void;\n    selectDetailRow(row: any): void;\n    getClassColor(row: any, column: any): string;\n    toggleDetail(row: any): void;\n    toggleRowAction(row: any): void;\n    sortColumn(column: PoTableColumn): void;\n    onShowMore(): void;\n    getFilteredItems(queryParams?: {\n        [key: string]: QueryParamsType;\n    }): Observable<PoTableResponseApi>;\n    setTableResponseProperties(data: PoTableResponseApi): void;\n    initializeData(params?: {\n        [key: string]: QueryParamsType;\n    }): void;\n    protected getDefaultColumns(item: any): {\n        label: string;\n        property: string;\n    }[];\n    protected setShowDetail(rowIdentifier: any | number, isShowDetail: boolean): void;\n    private collapseAllItems;\n    private configAfterSelectRow;\n    private emitExpandEvents;\n    private emitSelectAllEvents;\n    private emitSelectEvents;\n    private getColumnColor;\n    private getColumnMasterDetail;\n    private getMainColumns;\n    private getSubtitleColumns;\n    private isEverySelected;\n    private onChangeColumns;\n    private setColumnLink;\n    private setColumnMasterDetail;\n    private setMainColumns;\n    private setSubtitleColumns;\n    private sortArray;\n    private unselectOtherRows;\n    private verifyWidthColumnsPixels;\n    private setService;\n    private getFilteredParams;\n    private getOrderParam;\n    protected abstract calculateHeightTableContainer(height: any): any;\n    protected abstract calculateWidthHeaders(): any;\n    protected abstract checkInfiniteScroll(): any;\n}\n"]}