{"version":3,"file":"po-checkbox-group-base.component.d.ts","sources":["po-checkbox-group-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter } from '@angular/core';\nimport { PoCheckboxGroupOption } from './interfaces/po-checkbox-group-option.interface';\nimport { PoCheckboxGroupOptionView } from './interfaces/po-checkbox-group-option-view.interface';\n/**\n * @description\n *\n * O componente `po-checkbox-group` exibe uma lista de múltipla escolha onde o usuário pode marcar e desmarcar,\n * utilizando a tecla de espaço ou o clique do mouse, várias opções.\n *\n * > Para seleção única, utilize o [**PO Radio Group**](/documentation/po-radio-group).\n *\n * Por padrão, o po-checkbox-group retorna um array com os valores dos itens selecionados para o model.\n *\n * ```\n * favorites = ['PO', 'Angular'];\n * ```\n *\n * Na maioria das situações, o array com os objetos setados já atende as necessidades mas, caso o desenvolvedor\n * tenha necessidade de usar um valor indeterminado (`null`), ou seja, nem marcado (`true`) e nem desmarcado (`false`),\n * deve setar a propriedade `p-indeterminate` como `true`.\n *\n * Nesse caso, o po-checkbox-group vai retornar um objeto com todas as opções disponíveis e seus valores.\n *\n * ```\n * favorites = {\n *  PO: true,\n *  Angular: true,\n *  VueJS: false,\n *  React: null // indeterminado\n * };\n * ```\n */\nexport declare class PoCheckboxGroupBaseComponent implements ControlValueAccessor, Validator {\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /** Nome dos checkboxes */\n    name: string;\n    /** Texto de apoio do campo */\n    help?: string;\n    /** Label do campo */\n    label?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Função para atualizar o `ngModel` do componente, necessário quando não for utilizado dentro da tag form.\n     */\n    ngModelChange: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao alterar valor do campo\n     */\n    change: EventEmitter<any>;\n    checkboxGroupOptionsView: Array<PoCheckboxGroupOptionView>;\n    checkedOptions: any;\n    checkedOptionsList: any;\n    mdColumns: number;\n    propagateChange: any;\n    validatorChange: any;\n    private _columns;\n    private _disabled?;\n    private _indeterminate?;\n    private _options?;\n    private _required?;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Possibilita definir a quantidade de colunas para exibição dos itens do *checkbox*.\n     * - É possível exibir as opções entre `1` e `4` colunas.\n     * - Para resolução `sm` a colunagem invariavelmente passa para `1` coluna.\n     * - Quando se trata de resolução `md` e o valor estabelecido para colunas for superior a `2`,\n     * o *grid system* será composto por `2` colunas.\n     * - Para evitar a quebra de linha, prefira a utilização de `1` coluna para opções com textos grandes.\n     *\n     * @default `2`\n     *\n     */\n    set columns(value: number);\n    get columns(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Desabilita todos os itens do checkbox.\n     *\n     * @default `false`\n     */\n    set disabled(value: boolean);\n    get disabled(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caso exista a necessidade de usar o valor indeterminado (`null`) dentro da lista de opções, é necessário setar\n     * a propriedade `p-indeterminate` como `true`, por padrão essa propriedade vem desabilitada (`false`).\n     *\n     * Quando essa propriedade é setada como `true`, o *po-checkbox-group* passa a devolver um objeto completo para o\n     * `ngModel`, diferente do array que contém apenas os valores selecionados.\n     *\n     * @default `false`\n     */\n    set indeterminate(indeterminate: boolean);\n    get indeterminate(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     * Lista de opções que serão exibidas\n     * Nesta propriedade deve ser definido um array de objetos que implementam a interface PoCheckboxGroupOption\n     */\n    set options(value: Array<PoCheckboxGroupOption>);\n    get options(): Array<PoCheckboxGroupOption>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define que o campo será obrigatório.\n     *\n     * @default `false`\n     */\n    set required(required: boolean);\n    get required(): boolean;\n    changeValue(): void;\n    checkIndeterminate(): any;\n    checkOption(value: PoCheckboxGroupOption): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(optionsModel: any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    validate(abstractControl: AbstractControl): {\n        [key: string]: any;\n    };\n    protected validateModel(model: any): void;\n    private checkColumnsRange;\n    private checkOptionModel;\n    private generateCheckOptions;\n    private getGridSystemColumns;\n    private isInvalidIndeterminate;\n    private removeDuplicatedOptions;\n    private setCheckboxGroupOptionsView;\n}\n"]}