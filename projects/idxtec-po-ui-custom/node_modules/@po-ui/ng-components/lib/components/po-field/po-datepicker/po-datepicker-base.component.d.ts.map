{"version":3,"file":"po-datepicker-base.component.d.ts","sources":["po-datepicker-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { PoMask } from '../po-input/po-mask';\nimport { PoDatepickerIsoFormat } from './enums/po-datepicker-iso-format.enum';\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\n/**\n * @description\n *\n * O `po-datepicker` é um componente específico para manipulação de datas permitindo a digitação e / ou seleção.\n *\n * O formato de exibição da data, ou seja, o formato que é apresentado ao usuário é o dd/mm/yyyy,\n * mas podem ser definidos outros padrões (veja mais na propriedade `p-format`).\n *\n * O idioma padrão do calendário será exibido de acordo com o navegador, caso tenha necessidade de alterar\n * use a propriedade `p-locale`.\n *\n * O datepicker aceita três formatos de data: o E8601DZw (yyyy-mm-ddThh:mm:ss+|-hh:mm), o E8601DAw (yyyy-mm-dd) e o\n * Date padrão do Javascript.\n *\n * > Por padrão, o formato de saída do *model* se ajustará conforme o formato de entrada. Se por acaso precisar controlar o valor de saída,\n * a propriedade `p-iso-format` provê esse controle independentemente do formato de entrada. Veja abaixo os formatos disponíveis:\n *\n * - Formato de entrada e saída (E8601DZw) - `'2017-11-28T00:00:00-02:00'`;\n *\n * - Formato de entrada e saída (E8601DAw) - `'2017-11-28'`;\n *\n * - Formato de entrada (Date) - `new Date(2017, 10, 28)` e saída (E8601DAw) - `'2017-11-28'`;\n *\n * **Importante:**\n *\n * - Para utilizar datas com ano inferior a 100, verificar o comportamento do [`new Date`](https://www.w3schools.com/js/js_dates.asp)\n * e utilizar o método [`setFullYear`](https://www.w3schools.com/jsref/jsref_setfullyear.asp).\n * - Caso a data esteja inválida, o `model` receberá **'Data inválida'**.\n * - Caso o `input` esteja passando um `[(ngModel)]`, mas não tenha um `name`, então irá ocorrer um erro\n * do próprio Angular (`[ngModelOptions]=\"{standalone: true}\"`).\n *\n * Exemplo:\n *\n * ```\n * <po-datepicker\n *   [(ngModel)]=\"pessoa.nome\"\n *   [ngModelOptions]=\"{standalone: true}\"\n * </po-datepicker>\n * ```\n *\n * > Não esqueça de importar o `FormsModule` em seu módulo, tal como para utilizar o `input default`.\n */\nexport declare abstract class PoDatepickerBaseComponent implements ControlValueAccessor, OnInit, Validator {\n    private languageService;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    name: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /**\n     * Mensagem apresentada quando a data for inválida ou fora do período.\n     *\n     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja obrigatório.\n     */\n    errorPattern?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao sair do campo.\n     */\n    onblur: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao alterar valor do campo.\n     */\n    onchange: EventEmitter<any>;\n    protected firstStart: boolean;\n    protected hour: string;\n    protected isExtendedISO: boolean;\n    protected objMask: any;\n    protected onChangeModel: any;\n    protected validatorChange: any;\n    protected onTouchedModel: any;\n    private _format?;\n    private _isoFormat;\n    private _maxDate;\n    private _minDate;\n    private _noAutocomplete?;\n    private _placeholder?;\n    private shortLanguage;\n    private previousValue;\n    private _date;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a propriedade nativa `autocomplete` do campo como `off`.\n     *\n     * @default `false`\n     */\n    set noAutocomplete(value: boolean);\n    get noAutocomplete(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Mensagem que aparecerá enquanto o campo não estiver preenchido.\n     */\n    set placeholder(placeholder: string);\n    get placeholder(): string;\n    /** Desabilita o campo. */\n    disabled?: boolean;\n    set setDisabled(disabled: string);\n    /** Torna o elemento somente leitura. */\n    readonly?: boolean;\n    set setReadonly(readonly: string);\n    /** Faz com que o campo seja obrigatório. */\n    required?: boolean;\n    set setRequired(required: string);\n    /** Habilita ação para limpar o campo. */\n    clean?: boolean;\n    set setClean(clean: string);\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define uma data mínima para o `po-datepicker`.\n     */\n    set minDate(value: string | Date);\n    get minDate(): string | Date;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define uma data máxima para o `po-datepicker`.\n     */\n    set maxDate(value: string | Date);\n    get maxDate(): string | Date;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Formato de exibição da data.\n     *\n     * Valores válidos:\n     *  - `dd/mm/yyyy`\n     *  - `mm/dd/yyyy`\n     *  - `yyyy/mm/dd`\n     *\n     * @default `dd/mm/yyyy`\n     */\n    set format(value: string);\n    get format(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Padrão de formatação para saída do *model*, independentemente do formato de entrada.\n     *\n     * > Veja os valores válidos no *enum* `PoDatepickerIsoFormat`.\n     */\n    set isoFormat(value: PoDatepickerIsoFormat);\n    get isoFormat(): PoDatepickerIsoFormat;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Idioma do Datepicker.\n     *\n     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.\n     */\n    _locale?: string;\n    set locale(value: string);\n    get locale(): string;\n    constructor(languageService: PoLanguageService);\n    set date(value: any);\n    get date(): any;\n    ngOnInit(): void;\n    getDateFromString(dateString: string): Date;\n    formatToDate(value: Date): string;\n    controlModel(date: Date): void;\n    callOnChange(value: any, retry?: boolean): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(func: any): void;\n    registerOnTouched(func: any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    validate(c: AbstractControl): {\n        [key: string]: any;\n    };\n    protected validateModel(model: any): void;\n    protected buildMask(): PoMask;\n    abstract writeValue(value: any): void;\n    abstract refreshValue(value: Date): void;\n}\n"]}