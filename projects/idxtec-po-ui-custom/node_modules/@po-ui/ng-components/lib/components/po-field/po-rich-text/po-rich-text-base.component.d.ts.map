{"version":3,"file":"po-rich-text-base.component.d.ts","sources":["po-rich-text-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter } from '@angular/core';\nimport { PoRichTextService } from './po-rich-text.service';\n/**\n * @description\n *\n * O componente `po-rich-text` é um editor de textos enriquecidos.\n *\n * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).\n *\n * > No navegador Internet Explorer não é possível alterar a cor do texto.\n */\nexport declare abstract class PoRichTextBaseComponent implements ControlValueAccessor, Validator {\n    private richTextService;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /**\n     * @description\n     *\n     * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.\n     */\n    errorMessage?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Texto de apoio do campo.\n     */\n    help?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Rótulo do campo.\n     */\n    label?: string;\n    /** Nome e identificador do campo. */\n    name: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.\n     */\n    change: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.\n     */\n    changeModel: EventEmitter<any>;\n    invalid: boolean;\n    onChangeModel: any;\n    value: string;\n    private _height?;\n    private _placeholder;\n    private _readonly;\n    private _required;\n    private validatorChange;\n    protected onTouched: any;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a altura da área de edição de texto.\n     *\n     * > Altura mínima do componente é `94` e a altura máxima é `262`.\n     */\n    set height(height: number);\n    get height(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Mensagem que aparecerá enquanto o campo não estiver preenchido.\n     *\n     * @default ''\n     */\n    set placeholder(value: string);\n    get placeholder(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será somente leitura.\n     *\n     * @default `false`\n     */\n    set readonly(value: boolean);\n    get readonly(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será obrigatório.\n     *\n     * @default `false`\n     */\n    set required(value: boolean);\n    get required(): boolean;\n    constructor(richTextService: PoRichTextService);\n    registerOnChange(func: any): void;\n    registerOnTouched(func: any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    validate(abstractControl: AbstractControl): {\n        [key: string]: any;\n    };\n    writeValue(value: string): void;\n    protected updateModel(value: any): void;\n    protected validateModel(value: any): void;\n}\n"]}