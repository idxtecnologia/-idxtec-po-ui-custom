{"version":3,"file":"po-checkbox-base.component.d.ts","sources":["po-checkbox-base.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ControlValueAccessor } from '@angular/forms';\nimport { EventEmitter } from '@angular/core';\n/**\n * @description\n *\n * O componente `po-checkbox` exibe uma caixa de opção com um texto ao lado, na qual é possível marcar e desmarcar através tanto\n * no *click* do *mouse* quanto por meio da tecla *space* quando estiver com foco.\n *\n * Cada opção poderá receber um estado de marcado, desmarcado, indeterminado e desabilitado, como também uma ação que será disparada quando\n * ocorrer mudanças do valor.\n *\n * > O *model* deste componente aceitará valores igual à `true`, `false` ou `null` para quando for indeterminado.\n */\nexport declare abstract class PoCheckboxBaseComponent implements ControlValueAccessor {\n    /** Define o nome do *checkbox*. */\n    name: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /** Texto de exibição do *checkbox*. */\n    label?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado quando o valor do *checkbox* for alterado.\n     */\n    change: EventEmitter<any>;\n    checkboxValue: boolean | null;\n    id: string;\n    propagateChange: any;\n    onTouched: any;\n    private _disabled?;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define o estado do *checkbox* como desabilitado.\n     *\n     * @default `false`\n     */\n    set disabled(value: boolean);\n    get disabled(): boolean;\n    changeValue(): void;\n    checkOption(value: boolean | null): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    writeValue(value: any): void;\n    protected abstract changeModelValue(value: boolean | null): any;\n}\n"]}