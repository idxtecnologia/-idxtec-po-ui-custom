{"version":3,"file":"po-datepicker-range-base.component.d.ts","sources":["po-datepicker-range-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\nimport { PoDateService } from './../../../services/po-date/po-date.service';\nimport { PoDatepickerRangeLiterals } from './interfaces/po-datepicker-range-literals.interface';\nimport { PoDatepickerRange } from './interfaces/po-datepicker-range.interface';\n/**\n * @description\n *\n * O `po-datepicker-range` é um componente para seleção de um período entre duas datas, onde é possível informar apenas\n * a data inicial ou a data final.\n *\n * O componente `[(ngModel)]` do `po-datepicker-range` trabalha com um objeto que implementa a interface\n * `PoDatepickerRange`, contendo as seguintes propriedades:\n * ```\n * { \"start\": '2017-11-28', \"end\": '2017-11-30' }\n * ```\n *\n * <a id=\"accepted-formats\"></a>\n * Este componente pode receber os seguintes formatos de data:\n *\n * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**\n * ```\n * '2017-11-28T00:00:00-02:00';\n * ```\n *\n * - **Data (E8601DAw.): yyyy-mm-dd**\n * ```\n * '2017-11-28';\n * ```\n *\n * - **JavaScript Date Object:**\n * ```\n * new Date(2017, 10, 28);\n * ```\n *\n * > O componente respeitará o formato passado para o *model* via codificação. Porém, caso seja feita alteração em algum\n * dos valores de data em tela, o componente atribuirá o formato **Data (E8601DAw.): yyyy-mm-dd** ao model.\n *\n * Importante:\n *\n * - Quando preenchidas a data inicial e final, a data inicial deve ser sempre menor ou igual a data final;\n * - Ao passar uma data inválida via codificação, o valor será mantido no *model* e o `input` da tela aparecerá vazio;\n * - Permite trabalhar com as duas datas separadamente através das propriedades `p-start-date` e `p-end-date` no lugar do\n * `[(ngModel)]`, no entanto sem a validação do formulário;\n * - Para a validação do formulário, utilize o `[(ngModel)]`.\n */\nexport declare abstract class PoDatepickerRangeBaseComponent implements ControlValueAccessor, Validator {\n    protected poDateService: PoDateService;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Texto de apoio do campo.\n     */\n    help?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Rótulo do campo.\n     */\n    label?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao alterar valor do campo.\n     */\n    onChange: EventEmitter<any>;\n    errorMessage: string;\n    dateRange: PoDatepickerRange;\n    protected format: any;\n    protected isDateRangeInputFormatValid: boolean;\n    protected isStartDateRangeInputValid: boolean;\n    protected onTouchedModel: any;\n    private _clean?;\n    private _disabled?;\n    private _endDate?;\n    private _literals?;\n    private _maxDate;\n    private _minDate;\n    private _noAutocomplete?;\n    private _readonly;\n    private _required?;\n    private _startDate?;\n    private language;\n    private onChangeModel;\n    private validatorChange;\n    get isDateRangeInputValid(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Habilita ação para limpar o campo.\n     *\n     * @default `false`\n     */\n    set clean(clean: boolean);\n    get clean(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Desabilita o campo.\n     *\n     * @default `false`\n     */\n    set disabled(value: boolean);\n    get disabled(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Data final.\n     */\n    set endDate(date: string | Date);\n    get endDate(): string | Date;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Objeto com as literais usadas no `po-datepicker-range`.\n     *\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\n     *\n     * ```\n     *  const customLiterals: PoDatepickerRangeLiterals = {\n     *    invalidFormat: 'Date in inconsistent format',\n     *    startDateGreaterThanEndDate: 'End date less than start date'\n     *  };\n     * ```\n     *\n     * Ou passando apenas as literais que deseja customizar:\n     *\n     * ```\n     *  const customLiterals: PoDatepickerRangeLiterals = {\n     *    invalidFormat: 'Date in inconsistent format'\n     *  };\n     * ```\n     *\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n     *\n     * ```\n     * <po-datepicker-range\n     *   [p-literals]=\"customLiterals\">\n     * </po-datepicker-range>\n     * ```\n     *\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\n     */\n    set literals(value: PoDatepickerRangeLiterals);\n    get literals(): PoDatepickerRangeLiterals;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define uma data mínima para o `po-datepicker-range`.\n     */\n    set minDate(value: string | Date);\n    get minDate(): string | Date;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define uma data máxima para o `po-datepicker-range`.\n     */\n    set maxDate(value: string | Date);\n    get maxDate(): string | Date;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a propriedade nativa `autocomplete` do campo como `off`.\n     *\n     * @default `false`\n     */\n    set noAutocomplete(value: boolean);\n    get noAutocomplete(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será somente leitura.\n     *\n     * @default `false`\n     */\n    set readonly(value: boolean);\n    get readonly(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será obrigatório.\n     *\n     * @default `false`\n     */\n    set required(required: boolean);\n    get required(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Data inicial.\n     */\n    set startDate(date: string | Date);\n    get startDate(): string | Date;\n    constructor(poDateService: PoDateService, languageService: PoLanguageService);\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(func: any): void;\n    registerOnTouched(func: any): void;\n    registerOnValidatorChange?(fn: () => void): void;\n    validate(control: AbstractControl): ValidationErrors;\n    validateDateInRange(startDate: any): boolean;\n    writeValue(dateRange: PoDatepickerRange): void;\n    protected dateFormatFailed(value: string): boolean;\n    protected updateModel(value: any): void;\n    protected validateModel(value: any): void;\n    protected verifyValidDate(startDate: string, endDate: string): boolean;\n    private convertPatternDateFormat;\n    private dateRangeFailed;\n    private dateRangeFormatFailed;\n    private dateRangeObjectFailed;\n    private isDateRangeObject;\n    private requiredDateRangeFailed;\n    private dateIsValid;\n    protected abstract resetDateRangeInputValidation(): void;\n    protected abstract updateScreenByModel(dateRange: PoDatepickerRange): any;\n}\n"]}