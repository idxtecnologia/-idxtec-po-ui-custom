{"version":3,"file":"po-rich-text-toolbar.component.d.ts","sources":["po-rich-text-toolbar.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';\nimport { PoLanguageService } from '../../../../services/po-language/po-language.service';\nimport { PoButtonGroupItem } from '../../../po-button-group';\nimport { PoRichTextToolbarButtonGroupItem } from '../interfaces/po-rich-text-toolbar-button-group-item.interface';\nimport { PoRichTextImageModalComponent } from '../po-rich-text-image-modal/po-rich-text-image-modal.component';\nimport { PoRichTextLinkModalComponent } from '../po-rich-text-link-modal/po-rich-text-link-modal.component';\nexport declare class PoRichTextToolbarComponent implements AfterViewInit {\n    private languageService;\n    colorPickerInput: ElementRef;\n    toolbarElement: ElementRef;\n    richTextImageModal: PoRichTextImageModalComponent;\n    richTextLinkModal: PoRichTextLinkModalComponent;\n    command: EventEmitter<string | {\n        command: string;\n        value: string;\n    }>;\n    modal: EventEmitter<any>;\n    linkEditing: EventEmitter<any>;\n    readonly literals: any;\n    alignButtons: Array<PoRichTextToolbarButtonGroupItem>;\n    formatButtons: Array<PoRichTextToolbarButtonGroupItem>;\n    listButtons: Array<PoRichTextToolbarButtonGroupItem>;\n    linkButtons: Array<PoRichTextToolbarButtonGroupItem>;\n    mediaButtons: Array<PoButtonGroupItem>;\n    private _readonly;\n    private selectedLinkElement;\n    set readonly(value: boolean);\n    get readonly(): boolean;\n    get isInternetExplorer(): boolean;\n    constructor(languageService: PoLanguageService);\n    ngAfterViewInit(): void;\n    changeTextColor(value: any): void;\n    emitLinkEditing(isLinkEdit: boolean): void;\n    selectedLink(selectedLinkElement: any): void;\n    setButtonsStates(obj: {\n        commands: Array<string>;\n        hexColor: string;\n    }): void;\n    shortcutTrigger(): void;\n    emitCommand(command: string): void;\n    private emitAlignCommand;\n    private removeButtonFocus;\n    private setColorInColorPicker;\n    private toggleDisableButtons;\n}\n"]}