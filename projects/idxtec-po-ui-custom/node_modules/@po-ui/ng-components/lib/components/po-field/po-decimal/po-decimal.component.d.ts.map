{"version":3,"file":"po-decimal.component.d.ts","sources":["po-decimal.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';\nimport { AbstractControl } from '@angular/forms';\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\nimport { PoInputBaseComponent } from '../po-input/po-input-base.component';\n/**\n *\n * @docsExtends PoInputBaseComponent\n *\n * @description\n *\n * <br>\n * - O `po-decimal` é um *input* específico para receber apenas números decimais, por isso recebe as seguintes características:\n *  + Aceita apenas números;\n *  + Utiliza ',' como separador de decimal;\n *  + Utiliza '.' para separação de milhar;\n *  + É possível configurar a quantidade de casas decimais e a quantidade de digitos do campo.\n *\n * > **Importante:**\n * Atualmente o JavaScript limita-se a um conjunto de dados de `32 bits`, e para que os valores comportem-se devidamente,\n * o `po-decimal` contém um tratamento que limita em 16 o número total de casas antes e após a vírgula.\n * Veja abaixo as demais regras nas documentações de `p-decimals-length` e `p-thousand-maxlength`.\n *\n * @example\n *\n * <example name=\"po-decimal-basic\" title=\"PO Decimal Basic\">\n *  <file name=\"sample-po-decimal-basic/sample-po-decimal-basic.component.html\"> </file>\n *  <file name=\"sample-po-decimal-basic/sample-po-decimal-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"po-decimal-labs\" title=\"PO Decimal Labs\">\n *  <file name=\"sample-po-decimal-labs/sample-po-decimal-labs.component.html\"> </file>\n *  <file name=\"sample-po-decimal-labs/sample-po-decimal-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"po-decimal-hourly-wage\" title=\"PO Decimal - Hourly Wage\">\n *  <file name=\"sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.html\"> </file>\n *  <file name=\"sample-po-decimal-hourly-wage/sample-po-decimal-hourly-wage.component.ts\"> </file>\n * </example>\n *\n * <example name=\"po-decimal-hourly-wage-reactive-form\" title=\"PO Decimal - Hourly Wage Reactive Form\">\n *  <file name=\"sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.html\"> </file>\n *  <file name=\"sample-po-decimal-hourly-wage-reactive-form/sample-po-decimal-hourly-wage-reactive-form.component.ts\"> </file>\n * </example>\n */\nexport declare class PoDecimalComponent extends PoInputBaseComponent implements AfterViewInit, OnInit {\n    private el;\n    private poLanguageService;\n    inputEl: ElementRef;\n    private _decimalsLength?;\n    private _thousandMaxlength?;\n    private _locale?;\n    private _min?;\n    private _max?;\n    private decimalSeparator;\n    private fireChange;\n    private isKeyboardAndroid;\n    private minusSign;\n    private oldDotsLength;\n    private thousandSeparator;\n    private valueBeforeChange;\n    private regex;\n    get autocomplete(): \"on\" | \"off\";\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Quantidade máxima de casas decimais.\n     *\n     * > **Importante:**\n     * - O valor máximo permitido é 15;\n     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;\n     * - Esta propriedade sobrepõe apenas o valor **padrão** de `p-thousand-maxlength`;\n     * - Caso `p-thousand-maxlength` tenha um valor definido, esta propriedade poderá receber apenas o valor restante do limite total (16).\n     *\n     * @default `2`\n     */\n    set decimalsLength(value: number);\n    get decimalsLength(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Quantidade máxima de dígitos antes do separador decimal.\n     *\n     * > **Importante:**\n     * - O valor máximo permitido é 13;\n     * - A soma total de `p-decimals-length` com `p-thousand-maxlength` limita-se à 16;\n     * - Esta propriedade sobrepõe o valor definido em `p-decimals-length`.\n     *\n     * @default `13`\n     */\n    set thousandMaxlength(value: number);\n    get thousandMaxlength(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Informa o locale(país) para a formatação do valor.\n     * Por padrão o valor será configurado segundo a o módulo [`I18n`](documentation/po-i18n)\n     *\n     * > Para ver quais linguagens suportadas acesse [`I18n`](documentation/po-i18n)\n     *\n     */\n    set locale(locale: string);\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Valor mínimo.\n     */\n    set min(value: number);\n    get min(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Valor máximo.\n     */\n    set max(value: number);\n    get max(): number;\n    constructor(el: ElementRef, poLanguageService: PoLanguageService, cd: ChangeDetectorRef);\n    ngOnInit(): void;\n    setNumbersSeparators(): void;\n    ngAfterViewInit(): void;\n    clear(value: any): void;\n    extraValidation(abstractControl: AbstractControl): {\n        [key: string]: any;\n    };\n    focus(): void;\n    getScreenValue(): any;\n    hasInvalidClass(): boolean;\n    hasLetters(value?: string): RegExpMatchArray;\n    isValidNumber(event: any): boolean;\n    onBlur(event: any): void;\n    onFocus(event: FocusEvent): void;\n    onInput(event: any): void;\n    onInputKeyboardAndroid(event: any): any;\n    onKeyPress(event: KeyboardEvent): void;\n    setPaddingInput(): void;\n    writeValueModel(value: any): void;\n    getErrorPatternMessage(): string;\n    private addZeroBefore;\n    private containsComma;\n    private containsMoreThanOneDecimalSeparator;\n    private controlChangeEmitter;\n    private formatMask;\n    private formatToModelValue;\n    private formatToViewValue;\n    private formatValueWithoutThousandSeparator;\n    private getValueAfterSeparator;\n    private getValueBeforeSeparator;\n    private hasLessDot;\n    private hasMoreDot;\n    private hasMinusSignInvalidPosition;\n    private isInvalidKey;\n    private isGreaterThanTotalLengthLimit;\n    private isKeyDecimalSeparator;\n    private isPositionAfterDecimalSeparator;\n    private isSelectionStartDifferentSelectionEnd;\n    private isValidKey;\n    private isValueBetweenAllowed;\n    private verifyDecimalLengthIsZeroAndKeyPressedIsComma;\n    private verifyAutoFocus;\n    private setInitialSelectionRange;\n    private replaceAt;\n    private replaceCommaToDot;\n    private setCursorInput;\n    private setPositionValue;\n    private setViewValue;\n    private validateCursorPositionBeforeSeparator;\n    private verifyThousandLength;\n    private verifyInsertComma;\n    private verifyInsertMinusSign;\n    private verifyValueAfterComma;\n}\n"]}