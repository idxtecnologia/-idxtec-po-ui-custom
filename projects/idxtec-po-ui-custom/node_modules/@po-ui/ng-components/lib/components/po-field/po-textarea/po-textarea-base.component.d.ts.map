{"version":3,"file":"po-textarea-base.component.d.ts","sources":["po-textarea-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, ChangeDetectorRef } from '@angular/core';\n/**\n * @description\n *\n * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.\n * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.\n *\n * Importante:\n *\n * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de\n * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]=\"{standalone: true}\"`, por exemplo:\n *\n * ```\n * <po-textarea\n *   [(ngModel)]=\"pessoa.nome\"\n *   [ngModelOptions]=\"{standalone: true}\">\n * </po-textarea>\n * ```\n */\nexport declare abstract class PoTextareaBaseComponent implements ControlValueAccessor, Validator {\n    cd: ChangeDetectorRef;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /** Label do campo. */\n    label?: string;\n    /** Texto de apoio do campo. */\n    help?: string;\n    /** Nome e Id do componente. */\n    name: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao sair do campo.\n     */\n    blur: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao entrar do campo.\n     */\n    enter: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao alterar valor e deixar o campo.\n     */\n    change: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao alterar valor do model.\n     */\n    changeModel: EventEmitter<any>;\n    private _disabled;\n    private _maxlength;\n    private _minlength;\n    private _placeholder;\n    private _readonly;\n    private _required;\n    private _rows;\n    private modelLastUpdate;\n    private onChangePropagate;\n    private validatorChange;\n    protected onTouched: any;\n    /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */\n    set placeholder(value: string);\n    get placeholder(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será desabilitado.\n     *\n     * @default `false`\n     */\n    set disabled(disabled: boolean);\n    get disabled(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será somente leitura.\n     *\n     * @default `false`\n     */\n    set readonly(readonly: boolean);\n    get readonly(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será obrigatório.\n     *\n     * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.\n     *\n     * @default `false`\n     */\n    set required(required: boolean);\n    get required(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica a quantidade mínima de caracteres que o campo aceita.\n     */\n    set minlength(minlength: number);\n    get minlength(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica a quantidade máxima de caracteres que o campo aceita.\n     */\n    set maxlength(maxlength: number);\n    get maxlength(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica a quantidade de linhas que serão exibidas.\n     *\n     * @default `3`\n     */\n    set rows(value: number);\n    get rows(): number;\n    constructor(cd: ChangeDetectorRef);\n    callOnChange(value: any): void;\n    controlChangeModelEmitter(value: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(func: any): void;\n    registerOnTouched(func: any): void;\n    registerOnValidatorChange(func: any): void;\n    validate(abstractControl: AbstractControl): {\n        [key: string]: any;\n    };\n    writeValue(value: any): void;\n    protected validateModel(): void;\n    abstract writeValueModel(value: any): void;\n}\n"]}