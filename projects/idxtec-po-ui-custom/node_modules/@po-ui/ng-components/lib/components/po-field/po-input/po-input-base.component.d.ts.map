{"version":3,"file":"po-input-base.component.d.ts","sources":["po-input-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\n/**\n * @description\n *\n * Este é um componente baseado em input, com várias propriedades do input nativo e outras\n * propriedades extras como: máscara, pattern, mensagem de erro e etc.\n * Você deve informar a variável que contém o valor como [(ngModel)]=\"variavel\", para que o\n * input receba o valor da variável e para que ela receba as alterações do valor (two-way-databinding).\n * A propriedade name é obrigatória para que o formulário e o model funcionem corretamente.\n *\n * Importante:\n *\n * - Caso o input tenha um [(ngModel)] sem o atributo name, ocorrerá um erro de angular.\n * Então você precisa informar o atributo name ou o atributo [ngModelOptions]=\"{standalone: true}\".\n * Exemplo: [(ngModel)]=\"pessoa.nome\" [ngModelOptions]=\"{standalone: true}\".\n *\n */\nexport declare abstract class PoInputBaseComponent implements ControlValueAccessor, Validator {\n    private cd?;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define o ícone que será exibido no início do campo.\n     *\n     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:\n     * ```\n     * <po-input p-icon=\"po-icon-user\" p-label=\"PO input\"></po-input>\n     * ```\n     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:\n     * ```\n     * <po-input p-icon=\"fa fa-podcast\" p-label=\"PO input\"></po-input>\n     * ```\n     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:\n     * ```\n     * <po-input [p-icon]=\"template\" p-label=\"input template ionic\"></po-input>\n     *\n     * <ng-template #template>\n     *  <ion-icon style=\"font-size: inherit\" name=\"heart\"></ion-icon>\n     * </ng-template>\n     * ```\n     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.\n     */\n    icon?: string | TemplateRef<void>;\n    /** Rótulo do campo. */\n    label?: string;\n    /** Texto de apoio do campo. */\n    help?: string;\n    /** Nome e identificador do campo. */\n    name: string;\n    /**\n     * @description\n     *\n     * Mensagem que será apresentada quando o `pattern` ou a máscara não for satisfeita.\n     *\n     * > Esta mensagem não é apresentada quando o campo estiver vazio, mesmo que ele seja requerido.\n     */\n    errorPattern?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao sair do campo.\n     */\n    blur: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao entrar do campo.\n     */\n    enter: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao alterar valor e deixar o campo.\n     */\n    change: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado ao alterar valor do model.\n     */\n    changeModel: EventEmitter<any>;\n    type: string;\n    onChangePropagate: any;\n    objMask: any;\n    modelLastUpdate: any;\n    protected onTouched: any;\n    protected passedWriteValue: boolean;\n    protected validatorChange: any;\n    private _maxlength?;\n    private _minlength?;\n    private _noAutocomplete?;\n    private _placeholder?;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a propriedade nativa `autocomplete` do campo como `off`.\n     *\n     * > No componente `po-password` será definido como `new-password`.\n     *\n     * @default `false`\n     */\n    set noAutocomplete(value: boolean);\n    get noAutocomplete(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Mensagem que aparecerá enquanto o campo não estiver preenchido.\n     *\n     * @default ''\n     */\n    set placeholder(value: string);\n    get placeholder(): string;\n    /**\n     * @description\n     *\n     * Se verdadeiro, desabilita o campo.\n     *\n     * @default `false`\n     */\n    disabled?: boolean;\n    set setDisabled(disabled: string);\n    /** Indica que o campo será somente leitura. */\n    readonly?: boolean;\n    set setReadonly(readonly: string);\n    /**\n     * @description\n     *\n     * Indica que o campo será obrigatório.\n     *\n     * > Esta propriedade é desconsiderada quando o input está desabilitado `(p-disabled)`.\n     *\n     * @default `false`\n     */\n    required?: boolean;\n    set setRequired(required: string);\n    /** Se verdadeiro, o campo receberá um botão para ser limpo. */\n    clean?: boolean;\n    set setClean(clean: string);\n    /**\n     * @description\n     *\n     * Expressão regular para validar o campo.\n     * Quando o campo possuir uma máscara `(p-mask)` será automaticamente validado por ela, porém\n     * é possível definir um p-pattern para substituir a validação da máscara.\n     */\n    pattern?: string;\n    set setPattern(pattern: string);\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica a quantidade máxima de caracteres que o campo aceita.\n     */\n    set maxlength(value: number);\n    get maxlength(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica a quantidade mínima de caracteres que o campo aceita.\n     */\n    set minlength(value: number);\n    get minlength(): number;\n    /**\n     * @description\n     *\n     * Indica uma máscara para o campo. Exemplos: (+99) (99) 99999?-9999, 99999-999, 999.999.999-99.\n     * A máscara gera uma validação automática do campo, podendo esta ser substituída por um REGEX específico\n     * através da propriedade p-pattern.\n     * O campo será sinalizado e o formulário ficará inválido quando o valor informado estiver fora do padrão definido,\n     * mesmo quando desabilitado.\n     */\n    mask?: string;\n    set setMask(mask: string);\n    /**\n     * @description\n     *\n     * Indica se o `model` receberá o valor formatado pela máscara ou apenas o valor puro (sem formatação).\n     *\n     * @default `false`\n     */\n    maskFormatModel?: boolean;\n    set setMaskFormatModel(maskFormatModel: string);\n    constructor(cd?: ChangeDetectorRef);\n    callOnChange(value: any): void;\n    callUpdateModelWithTimeout(value: any): void;\n    controlChangeModelEmitter(value: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(func: any): void;\n    registerOnTouched(func: any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    updateModel(value: any): void;\n    validate(c: AbstractControl): {\n        [key: string]: any;\n    };\n    writeValue(value: any): void;\n    protected validateModel(): void;\n    private validatePatternOnWriteValue;\n    /**\n     * Função que atribui foco ao componente.\n     *\n     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:\n     *\n     * ```\n     * import { PoNomeDoComponenteComponent } from '@po-ui/ng-components';\n     *\n     * ...\n     *\n     * @ViewChild(PoNomeDoComponenteComponent, { static: true }) nomeDoComponente: PoNomeDoComponenteComponent;\n     *\n     * focusComponent() {\n     *   this.nomeDoComponente.focus();\n     * }\n     * ```\n     */\n    abstract focus(): void;\n    abstract writeValueModel(value: any): void;\n    abstract extraValidation(c: AbstractControl): {\n        [key: string]: any;\n    };\n    abstract getScreenValue(): string;\n}\n"]}