{"version":3,"file":"po-combo-base.component.d.ts","sources":["po-combo-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { EventEmitter, OnInit, TemplateRef } from '@angular/core';\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\nimport { PoComboFilter } from './interfaces/po-combo-filter.interface';\nimport { PoComboFilterMode } from './po-combo-filter-mode.enum';\nimport { PoComboFilterService } from './po-combo-filter.service';\nimport { PoComboGroup } from './interfaces/po-combo-group.interface';\nimport { PoComboLiterals } from './interfaces/po-combo-literals.interface';\nimport { PoComboOption } from './interfaces/po-combo-option.interface';\nimport { PoComboOptionGroup } from './interfaces/po-combo-option-group.interface';\nexport declare const poComboLiteralsDefault: {\n    en: PoComboLiterals;\n    es: PoComboLiterals;\n    pt: PoComboLiterals;\n    ru: PoComboLiterals;\n};\n/**\n * @description\n *\n * O `po-combo` exibe uma lista de opções com fácil seleção e filtragem.\n *\n * Além da exibição padrão, nele é possível listar as opões em agrupamentos.\n *\n * É possível selecionar e navegar entre as opções da lista tanto através do *mouse* quanto do teclado. No teclado navegue com\n * as setas e pressione *Enter* na opção que desejar.\n *\n * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.\n *\n * Em `p-filter-mode`, o filtro poderá ser configurado para buscar opões que correspondam ao início, fim ou que contenha o valor digitado.\n *\n * O `po-combo` guarda o último valor caso o usuário desista de uma busca, deixando o campo ou pressionando *Esc*. Caso seja digitado no\n * campo de busca a descrição completa de um item, então a seleção será automaticamente efetuada ao deixar o campo ou pressionando *Enter*.\n */\nexport declare abstract class PoComboBaseComponent implements ControlValueAccessor, OnInit, Validator {\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /** Label no componente. */\n    label?: string;\n    /** Texto de apoio para o campo. */\n    help?: string;\n    /** Nome do componente. */\n    name: string;\n    /**\n     * @optional\n     *\n     * @description\n     * Nesta propriedade deve ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de\n     * itens no componente.\n     * Caso haja a necessidade de customização, então pode ser informado um serviço implementando a interface PoComboFilter.\n     *\n     * Caso utilizado uma URL, o serviço deve ser retornado no padrão API TOTVS e utiliza as propriedades\n     * `p-field-label` e `p-field-value` para a construção da lista de itens.\n     *\n     * Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:\n     * ```\n     * url + ?filter=Peter\n     * ```\n     *\n     * Se for definida a propriedade `p-filter-params`, a mesma também será concatenada. Por exemplo, para o\n     * parâmetro `{ age: 23 }` a URL ficaria:\n     *\n     * ```\n     * url + ?page=1&pageSize=20&age=23&filter=Peter\n     * ```\n     */\n    filterService: PoComboFilter | string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define o ícone que será exibido no início do campo.\n     *\n     * É possível usar qualquer um dos ícones da [Biblioteca de ícones](/guides/icons). conforme exemplo abaixo:\n     * ```\n     * <po-combo p-icon=\"po-icon-user\" p-label=\"PO combo\"></po-combo>\n     * ```\n     * Também é possível utilizar outras fontes de ícones, por exemplo a biblioteca *Font Awesome*, da seguinte forma:\n     * ```\n     * <po-combo p-icon=\"fa fa-podcast\" p-label=\"PO combo\"></po-combo>\n     * ```\n     * Outra opção seria a customização do ícone através do `TemplateRef`, conforme exemplo abaixo:\n     * ```\n     * <po-combo [p-icon]=\"template\" p-label=\"combo template ionic\"></po-combo>\n     *\n     * <ng-template #template>\n     *  <ion-icon style=\"font-size: inherit\" name=\"heart\"></ion-icon>\n     * </ng-template>\n     * ```\n     * > Para o ícone enquadrar corretamente, deve-se utilizar `font-size: inherit` caso o ícone utilizado não aplique-o.\n     */\n    icon?: string | TemplateRef<void>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /** Se verdadeiro, o campo receberá um botão para ser limpo. */\n    clean?: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Se verdadeiro, o evento `p-change` receberá como argumento o `PoComboOption` referente à opção selecionada.\n     *\n     * @default `false`\n     */\n    emitObjectValue?: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Se verdadeiro, desabilitará a busca de um item via TAB.\n     *\n     * @default `false`\n     */\n    disabledTabFilter?: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Deve ser informada uma função que será disparada quando houver alterações no ngModel. A função receberá como argumento o model modificado.\n     *\n     * > Pode-se optar pelo recebimento do objeto selecionado ao invés do model através da propriedade `p-emit-object-value`.\n     */\n    change: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Função para atualizar o ngModel do componente, necessário quando não for utilizado dentro da tag form.\n     */\n    ngModelChange: EventEmitter<any>;\n    cacheOptions: Array<PoComboOption | PoComboGroup>;\n    defaultService: PoComboFilterService;\n    firstInWriteValue: boolean;\n    isFirstFilter: boolean;\n    isFiltering: boolean;\n    keyupSubscribe: any;\n    onModelChange: any;\n    previousSearchValue: string;\n    selectedOption: PoComboOption | PoComboGroup;\n    selectedValue: any;\n    selectedView: any;\n    service: PoComboFilterService;\n    visibleOptions: Array<PoComboOption | PoComboGroup>;\n    protected cacheStaticOptions: Array<PoComboOption | PoComboGroup>;\n    protected comboOptionsList: Array<PoComboOption | PoComboGroup>;\n    protected onModelTouched: any;\n    private _changeOnEnter?;\n    private _debounceTime?;\n    private _disabled?;\n    private _disabledInitFilter?;\n    private _fieldLabel?;\n    private _fieldValue?;\n    private _filterMinlength?;\n    private _filterMode?;\n    private _filterParams?;\n    private _literals?;\n    private _options;\n    private _placeholder;\n    private _required?;\n    private _sort?;\n    private language;\n    private fromWriteValue;\n    private validatorChange;\n    /** Mensagem apresentada enquanto o campo estiver vazio. */\n    set placeholder(value: string);\n    get placeholder(): string;\n    /**\n     * @optional\n     *\n     * @description\n     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.\n     * Será utilizada apenas quando houver serviço (`p-filter-service`).\n     *\n     * @default `400`\n     */\n    set debounceTime(value: number);\n    get debounceTime(): number;\n    /**\n     * @optional\n     *\n     * @description\n     * Desabilita o filtro inicial no serviço, que é executado no primeiro clique no campo.\n     *\n     * @default `false`\n     *\n     */\n    set disabledInitFilter(value: boolean);\n    get disabledInitFilter(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\n     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.\n     *\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\n     * PoComboOption.\n     *\n     * @default `value`\n     */\n    set fieldValue(value: string);\n    get fieldValue(): string;\n    /**\n     * @optional\n     *\n     * @description\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\n     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.\n     *\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\n     * PoComboOption.\n     *\n     * @default `label`\n     */\n    set fieldLabel(value: string);\n    get fieldLabel(): string;\n    /**\n     * @optional\n     *\n     * @description\n     * Valor mínimo de caracteres para realizar o filtro no serviço.\n     *\n     * @default `0`\n     */\n    set filterMinlength(value: number);\n    get filterMinlength(): number;\n    /**\n     * @optional\n     *\n     * @description\n     * Indica que o campo será obrigatório.\n     *\n     * @default `false`\n     */\n    set required(required: boolean);\n    get required(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     * Indica que o evento `p-change` só será disparado ao clicar ou pressionar a tecla \"Enter\" sobre uma opção selecionada.\n     *\n     * @default `false`\n     */\n    set changeOnEnter(changeOnEnter: boolean);\n    get changeOnEnter(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     * Indica que o campo será desabilitado.\n     *\n     * @default `false`\n     */\n    set disabled(disabled: boolean);\n    get disabled(): boolean;\n    /** Indica que a lista definida na propriedade p-options será ordenada pela descrição. */\n    set sort(sort: boolean);\n    get sort(): boolean;\n    /**\n     * Nesta propriedade define a lista de opções do `po-combo`.\n     *\n     * > A lista pode ser definida em dois formatos, simples ou com agrupamentos.\n     * - Utilize `PoComboOption` para lista de opções simples.\n     * - Utilize `PoComboOptionGroup` para lista de opções com agrupamento.\n     *\n     * **Importante:**\n     * - A lista deve seguir as definições descritas nas respectivas interfaces, caso contrário não exibirá a(as) opção(ões) fora dos padrões.\n     * - O componente interpretará o formato da lista de acordo com a interface utilizada e só exibirá as opções correspondentes à ela.\n     * - Um agrupamento só será exibido se houver pelo menos uma opção válida.\n     */\n    set options(options: Array<PoComboOption | PoComboOptionGroup>);\n    get options(): Array<PoComboOption | PoComboOptionGroup>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define o modo de pesquisa utilizado no filtro da lista de seleção: `startsWith`, `contains` ou `endsWith`.\n     *\n     * > Quando utilizar a propriedade `p-filter-service` esta propriedade será ignorada.\n     *\n     * @default `startsWith`\n     */\n    set filterMode(filterMode: PoComboFilterMode);\n    get filterMode(): PoComboFilterMode;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface *PoComboFilter*.\n     *\n     * > Caso a lista contenha agrupamentos, os mesmos só serão exibidos se houver no mínimo uma opção que corresponda à pesquisa.\n     */\n    set filterParams(filterParams: any);\n    get filterParams(): any;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Objeto com as literais usadas no `po-combo`.\n     *\n     * Para utilizar basta passar a literal que deseja customizar:\n     *\n     * ```\n     *  const customLiterals: PoComboLiterals = {\n     *    noData: 'Nenhum valor'\n     *  };\n     * ```\n     *\n     * E para carregar a literal customizada, basta apenas passar o objeto para o componente.\n     *\n     * ```\n     * <po-combo\n     *   [p-literals]=\"customLiterals\">\n     * </po-combo>\n     * ```\n     *\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\n     */\n    set literals(value: PoComboLiterals);\n    get literals(): PoComboLiterals;\n    constructor(languageService: PoLanguageService);\n    get isOptionGroupList(): boolean;\n    ngOnInit(): void;\n    onInitService(): void;\n    setService(service: PoComboFilter | string): void;\n    compareMethod(search: string, option: PoComboOption | PoComboGroup, filterMode: PoComboFilterMode): boolean;\n    startsWith(search: string, option: PoComboOption | PoComboGroup): boolean;\n    contains(search: string, option: PoComboOption | PoComboGroup): boolean;\n    endsWith(search: string, option: PoComboOption | PoComboGroup): boolean;\n    getOptionFromValue(value: any, options: any): any;\n    getOptionFromLabel(label: any, options: any): any;\n    updateSelectedValue(option: PoComboOption | PoComboGroup, isUpdateModel?: boolean): void;\n    callModelChange(value: any): any;\n    isEqual(value: any, inputValue: any): boolean;\n    searchForLabel(search: string, options: Array<PoComboOption | PoComboGroup>, filterMode: PoComboFilterMode): void;\n    updateComboList(options?: Array<PoComboOption | PoComboGroup>): void;\n    getNextOption(value: any, options: Array<PoComboOption | PoComboGroup>, reverse?: boolean): any;\n    getIndexSelectedView(): number;\n    compareObjects(obj1: any, obj2: any): boolean;\n    verifyValidOption(): void;\n    writeValue(value: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    validate(abstractControl: AbstractControl): {\n        [key: string]: any;\n    };\n    clear(value: any): void;\n    protected configAfterSetFilterService(service: PoComboFilter | string): void;\n    protected unsubscribeKeyupObservable(): void;\n    protected validateModel(model: any): void;\n    private comboListDefinitions;\n    private compareOptions;\n    private hasDuplicatedOption;\n    private listingComboOptions;\n    private sortOptions;\n    private validateValue;\n    private verifyComboOptions;\n    private verifyComboOptionsGroup;\n    private verifyIfHasLabel;\n    private updateInternalVariables;\n    private updateModel;\n    private updateSelectedValueWithOldOption;\n    abstract setInputValue(value: any): void;\n    abstract applyFilter(value: string): void;\n    abstract getObjectByValue(value: string): void;\n    abstract getInputValue(): string;\n    abstract initInputObservable(): void;\n}\n"]}