{"version":3,"file":"po-lookup-base.component.d.ts","sources":["po-lookup-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { PoLookupAdvancedFilter } from './interfaces/po-lookup-advanced-filter.interface';\nimport { PoLookupColumn } from './interfaces/po-lookup-column.interface';\nimport { PoLookupFilter } from './interfaces/po-lookup-filter.interface';\nimport { PoLookupLiterals } from './interfaces/po-lookup-literals.interface';\nimport { PoLookupFilterService } from './services/po-lookup-filter.service';\n/**\n * @description\n *\n * Componente utilizado para abrir uma janela de busca com uma tabela que lista dados de um serviço. Nesta janela é possível buscar e\n * selecionar um ou mais registros que serão enviados para o campo. O `po-lookup` permite que o usuário digite um valor e pressione a tecla *TAB* para\n * buscar um registro.\n *\n * > Caso o campo seja iniciado ou preenchido com um valor inexistente na busca, o mesmo será limpado.\n * No segundo caso ocorrerá após este perder o foco; ambos os casos o campo ficará inválido quando requerido.\n *\n * > Enquanto o componente realiza a requisição ao servidor, o componente ficará desabilitado e com o status interno do\n * [modelo](https://angular.io/guide/form-validation#creating-asynchronous-validators) como `pending`.\n *\n * Este componente não é recomendado quando a busca dos dados possuir poucas informações, para isso utilize outros componentes como o\n * `po-select` ou o `po-combo`.\n */\nexport declare abstract class PoLookupBaseComponent implements ControlValueAccessor, OnDestroy, OnInit, Validator, AfterViewInit, OnChanges {\n    private defaultService;\n    private injector;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /**\n     * Label do campo.\n     *\n     * > Quando utilizar esta propriedade o seu valor será utilizado como título da modal do componente caso não tenha\n     * sido definido um `modalTitle` na propriedade `p-literals`.\n     */\n    label?: string;\n    /**\n     * @description\n     *\n     * Objeto com as literais usadas no `po-lookup`.\n     *\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\n     *\n     * ```\n     *  const customLiterals: PoLookupLiterals = {\n     *    modalPrimaryActionLabel: 'Select',\n     *    modalSecondaryActionLabel: 'Cancel',\n     *    modalPlaceholder: 'Search Value',\n     *    modalTableNoColumns: 'No columns',\n     *    modalTableNoData: 'No data',\n     *    modalTableLoadingData: 'Loading data',\n     *    modalTableLoadMoreData: 'Load more',\n     *    modalTitle: 'Select a user',\n     *    modalAdvancedSearch: 'Advanced search',\n     *    modalAdvancedSearchTitle: 'Advanced search',\n     *    modalAdvancedSearchPrimaryActionLabel: 'Filter',\n     *    modalAdvancedSearchSecondaryActionLabel: 'Return',\n     *    modalDisclaimerGroupTitle: 'Presenting results filtered by:'\n     *  };\n     * ```\n     *\n     * Ou passando apenas as literais que deseja customizar:\n     *\n     * ```\n     *  const customLiterals: PoLookupLiterals = {\n     *    modalPrimaryActionLabel: 'Select'\n     *  };\n     * ```\n     *\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n     *\n     * ```\n     * <po-lookup\n     *   [p-literals]=\"customLiterals\">\n     * </po-lookup>\n     * ```\n     *\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\n     */\n    literals?: PoLookupLiterals;\n    /** Texto de apoio do campo. */\n    help?: string;\n    /** Mensagem que aparecerá enquanto o campo não estiver preenchido. */\n    set placeholder(value: string);\n    get placeholder(): string;\n    /** Nome e Id do componente. */\n    name: string;\n    /**\n     * @description\n     *\n     * Indica a coluna que será utilizada como valor do campo.\n     *\n     * > Atenção: Caso não seja passada ou tenha o conteúdo incorreto, não irá atualizar o model do formulário.\n     */\n    fieldValue: string;\n    /** Indica a coluna que será utilizada como descrição do campo e como filtro dentro da janela. */\n    set fieldLabel(value: string);\n    get fieldLabel(): string;\n    /** Valor que será repassado como parâmetro para a URL ou aos métodos do serviço que implementam a interface `PoLookupFilter`. */\n    filterParams?: any;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Formato de exibição do campo.\n     *\n     * Recebe uma função que deve retornar uma *string* com o/os valores do objeto formatados para exibição, por exemplo:\n     *\n     * ```\n     * fieldFormat(obj) {\n     *   return `${obj.id} - ${obj.name}`;\n     * }\n     * ```\n     * > Esta propriedade sobrepõe o valor da propriedade `p-field-label` na descrição do campo.\n     *\n     * Pode-se informar uma lista de propriedades que deseja exibir como descrição do campo, Por exemplo:\n     * ```\n     * <po-lookup\n     *  ...\n     *  [p-field-format]=\"['id','nickname']\"\n     *  ...\n     * >\n     *\n     * Objeto retornado:\n     *   {\n     *      id:123,\n     *      name: 'Kakaroto',\n     *      nickname: 'Goku',\n     *   }\n     * Apresentação no campo: 123 - Goku\n     * ```\n     *\n     * > Será utilizado ` - ` como separador.\n     */\n    fieldFormat?: ((value: any) => string) | Array<string>;\n    /**\n     * Lista das colunas da tabela.\n     * Essa propriedade deve receber um array de objetos que implementam a interface PoLookupColumn.\n     */\n    columns?: Array<PoLookupColumn>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /**\n     *\n     * @optional\n     *\n     * @description\n     *\n     * Lista de objetos dos campos que serão criados na busca avançada.\n     *\n     * > Caso não seja passado um objeto ou então ele esteja em branco o link de busca avançada ficará escondido.\n     *\n     * Exemplo de URL com busca avançada:\n     *\n     * ```\n     * url + ?page=1&pageSize=20&name=Tony%20Stark&nickname=Homem%20de%20Ferro\n     * ```\n     *\n     * Caso algum parâmetro seja uma lista, a concatenação é feita utilizando vírgula.\n     * Exemplo:\n     *\n     * ```\n     * url + ?page=1&pageSize=20&name=Tony%20Stark,Peter%20Parker,Gohan\n     * ```\n     *\n     */\n    advancedFilters: Array<PoLookupAdvancedFilter>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta.\n     *\n     * @default `false`\n     */\n    infiniteScroll: boolean;\n    /** Exibe um ícone que permite limpar o campo. */\n    clean: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Permite a seleção de múltiplos itens.\n     *\n     * > Quando habilitado o valor do campo passará a ser uma lista de valores, por exemplo: `[ 12345, 67890 ]`\n     *\n     * @default `false`\n     */\n    multiple: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo\n     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.\n     *\n     * @default `false`\n     */\n    autoHeight: boolean;\n    /**\n     * Evento será disparado quando ocorrer algum erro na requisição de busca do item.\n     * Será passado por parâmetro o objeto de erro retornado.\n     */\n    onError: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento será disparado quando ocorrer alguma seleção.\n     * Será passado por parâmetro o objeto com o valor selecionado.\n     */\n    selected: EventEmitter<any>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     *  Evento que será disparado ao alterar o model.\n     *  Por parâmetro será passado o novo valor.\n     */\n    change: EventEmitter<any>;\n    service: any;\n    protected selectedOptions: any[];\n    protected getSubscription: Subscription;\n    protected keysDescription: Array<any>;\n    protected oldValue: string;\n    protected valueToModel: any;\n    protected oldValueToModel: any;\n    protected onTouched: any;\n    protected resizeListener: () => void;\n    private _disabled?;\n    private _fieldLabel;\n    private _filterService;\n    private _noAutocomplete;\n    private _placeholder;\n    private _required?;\n    private _autoHeight;\n    private autoHeightInitialValue;\n    private onChangePropagate;\n    private validatorChange;\n    private control;\n    /**\n     * Serviço responsável por buscar os dados da tabela na janela. Pode ser informado um serviço que implemente a interface\n     * `PoLookupFilter` ou uma URL.\n     *\n     * Quando utilizada uma URL de um serviço, será concatenada nesta URL o valor que deseja-se filtrar, por exemplo:\n     *\n     * ```\n     * url + ?page=1&pageSize=20&filter=Peter\n     * ```\n     *\n     * Caso utilizar ordenação, a coluna ordenada será enviada através do parâmetro `order`, por exemplo:\n     * - Coluna decrescente:\n     * ```\n     *  url + ?page=1&pageSize=20&filter=Peter&order=-name\n     * ```\n     *\n     * - Coluna ascendente:\n     * ```\n     *  url + ?page=1&pageSize=20&filter=Peter&order=name\n     * ```\n     *\n     * Se for definido a propriedade `p-filter-params`, o mesmo também será concatenado. Por exemplo, para o\n     * parâmetro `{ age: 23 }` a URL ficaria:\n     *\n     * ```\n     * url + ?page=1&pageSize=20&age=23&filter=Peter\n     * ```\n     *\n     * Ao iniciar o campo com valor, os registros serão buscados da seguinte forma:\n     * ```\n     * model = 1234;\n     *\n     * GET url/1234\n     * ```\n     *\n     * Caso estiver com múltipla seleção habilitada:\n     * ```\n     * model = [1234, 5678]\n     *\n     * GET url?${fieldValue}=1234,5678\n     * ```\n     *\n     * > Esta URL deve retornar e receber os dados no padrão de [API do PO UI](https://po-ui.io/guides/api) e utiliza os valores\n     * definidos nas propriedades `p-field-label` e `p-field-value` para a construção do `po-lookup`.\n     *\n     * Caso o usuário digite um valor e pressione a tecla *TAB* para realizar a busca de um registro específico, o valor que se\n     * deseja filtrar será codificado utilizando a função [encodeURIComponent](https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent)\n     * e concatenado na URL da seguinte forma:\n     *\n     * ```\n     * url/valor%20que%20se%20deseja%20filtrar\n     * ```\n     *\n     * > Quando informado um serviço que implemente a interface `PoLookupFilter` o tratamento de encoding do valor a ser filtrado ficará a cargo do desenvolvedor.\n     *\n     */\n    set filterService(filterService: PoLookupFilter | string);\n    get filterService(): PoLookupFilter | string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a propriedade nativa `autocomplete` do campo como `off`.\n     *\n     * @default `false`\n     */\n    set noAutocomplete(value: boolean);\n    get noAutocomplete(): boolean;\n    /**\n     * @optional\n     * @description\n     *\n     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).\n     *\n     * @default `false`\n     */\n    set required(required: boolean);\n    get required(): boolean;\n    /**\n     * @description\n     *\n     * Indica que o campo será desabilitado.\n     *\n     * @default false\n     * @optional\n     */\n    set disabled(disabled: boolean);\n    get disabled(): boolean;\n    constructor(defaultService: PoLookupFilterService, injector: Injector);\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    cleanModel(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnValidatorChange(fn: () => void): void;\n    registerOnChange(func: any): void;\n    registerOnTouched(func: any): void;\n    selectValue(valueSelected: any): void;\n    callOnChange(value: any): void;\n    searchById(value: any): void;\n    validate(abstractControl: AbstractControl): {\n        [key: string]: any;\n    };\n    writeValue(value: any): void;\n    protected cleanViewValue(): void;\n    protected getFormattedLabel(value: any): string;\n    protected selectModel(options: Array<any>): void;\n    protected validateModel(model: any): void;\n    private setService;\n    private setControl;\n    private initializeColumn;\n    abstract setViewValue(value: any, object: any): void;\n    abstract openLookup(): void;\n    abstract setDisclaimers(a: any): any;\n    abstract updateVisibleItems(): any;\n}\n"]}