{"version":3,"file":"po-multiselect-base.component.d.ts","sources":["po-multiselect-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, Validator } from '@angular/forms';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { PoLanguageService } from '../../../services/po-language/po-language.service';\nimport { PoMultiselectFilterMode } from './po-multiselect-filter-mode.enum';\nimport { PoMultiselectLiterals } from './po-multiselect-literals.interface';\nimport { PoMultiselectOption } from './po-multiselect-option.interface';\nimport { PoMultiselectFilter } from './po-multiselect-filter.interface';\nimport { PoMultiselectFilterService } from './po-multiselect-filter.service';\nexport declare const poMultiselectLiteralsDefault: {\n    en: PoMultiselectLiterals;\n    es: PoMultiselectLiterals;\n    pt: PoMultiselectLiterals;\n    ru: PoMultiselectLiterals;\n};\n/**\n * @description\n *\n * O po-multiselect é um componente de múltipla seleção.\n * Este componente é recomendado para dar ao usuário a opção de selecionar vários itens em uma lista.\n *\n * Quando a lista possuir poucos itens, deve-se dar preferência para o uso do po-checkbox-group, por ser mais simples\n * e mais rápido para a seleção do usuário.\n *\n * Este componente também não deve ser utilizado em casos onde a seleção seja única. Nesses casos, deve-se utilizar o\n * po-select, po-combo ou po-radio-group.\n *\n * Com ele também é possível definir uma lista à partir da requisição de um serviço definido em `p-filter-service`.\n */\nexport declare abstract class PoMultiselectBaseComponent implements ControlValueAccessor, OnInit, Validator {\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Aplica foco no elemento ao ser iniciado.\n     *\n     * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.\n     *\n     * @default `false`\n     */\n    autoFocus: boolean;\n    /** Label no componente. */\n    label?: string;\n    /** Texto de apoio para o campo. */\n    help?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define se a indicação de campo opcional será exibida.\n     *\n     * > Não será exibida a indicação se:\n     * - O campo conter `p-required`;\n     * - Não possuir `p-help` e/ou `p-label`.\n     *\n     * @default `false`\n     */\n    optional: boolean;\n    /** Mensagem apresentada enquanto o campo estiver vazio. */\n    placeholder?: string;\n    /**\n     * @description\n     *\n     * Placeholder do campo de pesquisa.\n     *\n     * > Caso o mesmo não seja informado, o valor padrão será traduzido com base no idioma do navegador (pt, es e en).\n     *\n     * @default `Buscar`\n     */\n    placeholderSearch?: string;\n    /** Nome do componente. */\n    name: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica se o campo \"Selecionar todos\" será escondido.\n     *\n     * @default `false`\n     */\n    hideSelectAll: boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Pode ser informada uma função que será disparada quando houver alterações no ngModel.\n     */\n    change: EventEmitter<any>;\n    selectedOptions: Array<PoMultiselectOption>;\n    visibleOptionsDropdown: Array<PoMultiselectOption>;\n    visibleDisclaimers: any[];\n    isServerSearching: boolean;\n    isFirstFilter: boolean;\n    filterSubject: Subject<unknown>;\n    service: PoMultiselectFilterService;\n    defaultService: PoMultiselectFilterService;\n    protected onModelTouched: any;\n    protected clickOutListener: () => void;\n    protected resizeListener: () => void;\n    protected getObjectsByValuesSubscription: Subscription;\n    private _filterService?;\n    private _debounceTime?;\n    private _disabled?;\n    private _filterMode?;\n    private _hideSearch?;\n    private _literals;\n    private _options;\n    private _required?;\n    private _sort?;\n    private _autoHeight;\n    private _fieldLabel?;\n    private _fieldValue?;\n    private language;\n    private lastLengthModel;\n    private onModelChange;\n    private validatorChange;\n    private autoHeightInitialValue;\n    /**\n     * @optional\n     *\n     * @description\n     * Nesta propriedade pode ser informada a URL do serviço em que será realizado o filtro para carregamento da lista de itens no componente.\n     *\n     *Também existe a possibilidade de informar um serviço implementando a interface `PoMultiselectFilter`.\n     *\n     *Caso utilizado uma URL, o serviço deve ser retornado no padrão [API PO UI](https://po-ui.io/guides/api) e utilizar as propriedades `p-field-label` e `p-field-value` para a construção da lista de itens.\n     *\n     *Quando utilizada uma URL de serviço, então será concatenada nesta URL o valor que deseja-se filtrar da seguinte forma:\n     *\n     *```\n     * // caso filtrar por \"Peter\"\n     *  https://localhost:8080/api/heroes?filter=Peter\n     *```\n     *\n     *E caso iniciar o campo com valor, os itens serão buscados da seguinte forma:\n     *\n     *```\n     * // caso o valor do campo for [1234, 5678];\n     *  https://localhost:8080/api/heroes?value=1234,5678\n     *\n     * //O *value* é referente ao `fieldValue`.\n     *```\n     *\n     */\n    set filterService(value: PoMultiselectFilter | string);\n    get filterService(): PoMultiselectFilter | string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define que a altura do componente será auto ajustável, possuindo uma altura minima porém a altura máxima será de acordo\n     * com o número de itens selecionados e a extensão dos mesmos, mantendo-os sempre visíveis.\n     *\n     * > O valor padrão será `true` quando houver serviço (`p-filter-service`).\n     *\n     * @default `false`\n     */\n    set autoHeight(value: boolean);\n    get autoHeight(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     * Esta propriedade define em quanto tempo (em milissegundos), aguarda para acionar o evento de filtro após cada pressionamento de tecla.\n     *\n     * > Será utilizada apenas quando houver serviço (`p-filter-service`) e somente será aceito valor maior do que *zero*.\n     *\n     * @default `400`\n     */\n    set debounceTime(value: number);\n    get debounceTime(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Objeto com as literais usadas no `po-multiselect`.\n     *\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\n     *\n     * ```\n     *  const customLiterals: PoMultiselectLiterals = {\n     *    noData: 'Nenhum dado encontrado',\n     *    placeholderSearch: 'Buscar'\n     *  };\n     * ```\n     *\n     * Ou passando apenas as literais que deseja customizar:\n     *\n     * ```\n     *  const customLiterals: PoMultiselectLiterals = {\n     *    noData: 'Sem dados'\n     *  };\n     * ```\n     *\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente:\n     *\n     * ```\n     * <po-multiselect\n     *   [p-literals]=\"customLiterals\">\n     * </po-po-multiselect>\n     * ```\n     *\n     * > O objeto padrão de literais será traduzido de acordo com o idioma do\n     * [`PoI18nService`](/documentation/po-i18n) ou do browser.\n     */\n    set literals(value: PoMultiselectLiterals);\n    get literals(): PoMultiselectLiterals;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será obrigatório. Esta propriedade é desconsiderada quando o campo está desabilitado (p-disabled).\n     *\n     * @default `false`\n     */\n    set required(required: boolean);\n    get required(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que o campo será desabilitado.\n     *\n     * @default `false`\n     */\n    set disabled(disabled: boolean);\n    get disabled(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Esconde o campo de pesquisa existente dentro do dropdown do po-multiselect.\n     *\n     * @default `false`\n     */\n    set hideSearch(hideSearch: boolean);\n    get hideSearch(): boolean;\n    /**\n     * @description\n     *\n     * Nesta propriedade deve ser definida uma lista de objetos que implementam a interface PoMultiselectOption.\n     * Esta lista deve conter os valores e os labels que serão apresentados na tela.\n     *\n     * > Essa propriedade é imutável, ou seja, sempre que quiser atualizar a lista de opções disponíveis\n     * atualize a referência do objeto:\n     *\n     * ```\n     * // atualiza a referência do objeto garantindo a atualização do template\n     * this.options = [...this.options, { value: 'x', label: 'Nova opção' }];\n     *\n     * // evite, pois não atualiza a referência do objeto podendo gerar atrasos na atualização do template\n     * this.options.push({ value: 'x', label: 'Nova opção' });\n     * ```\n     */\n    set options(options: Array<PoMultiselectOption>);\n    get options(): Array<PoMultiselectOption>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Indica que a lista definida na propriedade p-options será ordenada pelo label antes de ser apresentada no\n     * dropdown.\n     *\n     * @default `false`\n     */\n    set sort(sort: boolean);\n    get sort(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define o modo de pesquisa utilizado no campo de busca, quando habilitado.\n     * Valores definidos no enum: PoMultiselectFilterMode\n     *\n     * @default `startsWith`\n     */\n    set filterMode(filterMode: PoMultiselectFilterMode);\n    get filterMode(): PoMultiselectFilterMode;\n    /**\n     * @optional\n     *\n     * @description\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\n     * (`p-options`), esta propriedade será responsável pelo texto de apresentação de cada item da lista.\n     *\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\n     * `PoMultiSelectOption`.\n     *\n     * @default `label`\n     */\n    set fieldLabel(value: string);\n    get fieldLabel(): string;\n    /**\n     * @optional\n     *\n     * @description\n     * Deve ser informado o nome da propriedade do objeto que será utilizado para a conversão dos itens apresentados na lista do componente\n     * (`p-options`), esta propriedade será responsável pelo valor de cada item da lista.\n     *\n     * Necessário quando informar o serviço como URL e o mesmo não estiver retornando uma lista de objetos no padrão da interface\n     * `PoMultiSelectOption`.\n     *\n     * @default `value`\n     */\n    set fieldValue(value: string);\n    get fieldValue(): string;\n    constructor(languageService: PoLanguageService);\n    ngOnInit(): void;\n    setService(service: PoMultiselectFilter | string): void;\n    validAndSortOptions(): void;\n    setUndefinedLabels(options: any): void;\n    updateList(options: Array<PoMultiselectOption>): void;\n    callOnChange(selectedOptions: Array<PoMultiselectOption>): void;\n    eventChange(selectedOptions: any): void;\n    getValuesFromOptions(selectedOptions: Array<PoMultiselectOption>): (string | number)[];\n    getLabelByValue(value: any): string;\n    searchByLabel(search: string, options: Array<PoMultiselectOption>, filterMode: PoMultiselectFilterMode): void;\n    compareMethod(search: string, option: PoMultiselectOption, filterMode: PoMultiselectFilterMode): boolean;\n    startsWith(search: string, option: PoMultiselectOption): boolean;\n    contains(search: string, option: PoMultiselectOption): boolean;\n    endsWith(search: string, option: PoMultiselectOption): boolean;\n    validate(c: AbstractControl): {\n        [key: string]: any;\n    };\n    updateSelectedOptions(newOptions: Array<any>, options?: PoMultiselectOption[]): void;\n    writeValue(values: any): void;\n    setDisabledState(isDisabled: boolean): void;\n    registerOnChange(fn: any): void;\n    registerOnTouched(fn: any): void;\n    registerOnValidatorChange(fn: () => void): void;\n    private validateModel;\n    abstract applyFilter(value?: string): Observable<Array<PoMultiselectOption>>;\n    abstract updateVisibleItems(): void;\n}\n"]}