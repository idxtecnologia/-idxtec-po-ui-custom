{"version":3,"file":"po-menu.component.d.ts","sources":["po-menu.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, OnDestroy, OnInit, Renderer2 } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { PoMenuBaseComponent } from './po-menu-base.component';\nimport { PoMenuHeaderTemplateDirective } from './po-menu-header-template/po-menu-header-template.directive';\nimport { PoMenuItem } from './po-menu-item.interface';\nimport { PoMenuItemsService } from './services/po-menu-items.service';\nimport { PoMenuGlobalService } from './services/po-menu-global.service';\nimport { PoMenuService } from './services/po-menu.service';\nimport { PoLanguageService } from '../../services/po-language/po-language.service';\n/**\n * @docsExtends PoMenuBaseComponent\n *\n * @description\n *\n * Aparece completo em telas com largura maior que 1200px, caso contrário o menu é escondido e chamado por meio de um botão.\n *\n * O menu também pode ser colapsado. Essa opção é habilitada quando todos os itens de primeiro nível possuírem ícones e textos curtos.\n * Se colapsado, somente os itens de primeiro nível serão exibidos e, caso o item selecionado possua sub-níveis,\n * então o menu alternará novamente para o estado aberto.\n *\n * Existe a possibilidade de customizar a logomarca, que é exibida na parte superior do componente.\n *\n * E para adicionar um conteúdo personalizado entre a logomarca e o campo de filtro,\n * basta adicionar este conteúdo com a diretiva [**p-menu-header-template**](/documentation/po-menu-header-template).\n *\n * Caso utilizar o filtro de menus, é possível realizar buscas em serviço, apenas informando a URL do serviço ou a instância de\n * um serviço customizado implementando a interface `PoMenuFilter`.\n *\n * Para o menu funcionar corretamente é necessário importar o `RouterModule` e `Routes` do módulo principal de\n *  sua aplicação:\n *\n * ````\n * import { RouterModule, Routes } from '@angular/router';\n *\n * ...\n *\n * @NgModule({\n *   imports: [\n *     RouterModule,\n *     Routes,\n *     ...\n *     PoModule,\n *     ...\n *   ],\n *   declarations: [\n *     AppComponent\n *   ],\n *   providers: [],\n *   bootstrap: [AppComponent]\n * })\n * export class AppModule { }\n * ```\n *\n * Além disso é necessário criar um módulo configurando as rotas da aplicação.\n *\n * ```\n * import { NgModule } from '@angular/core';\n *\n * import { RouterModule, Routes } from '@angular/router';\n *\n * import { HelloWorldComponent } from './hello-world/hello-world.component';\n *\n * const routes: Routes = [\n *   {path: 'hello-world', component: HelloWorldComponent}\n * ];\n *\n * @NgModule({\n *   imports: [RouterModule.forRoot(routes, {useHash: true})],\n *   exports: [RouterModule]\n * })\n * export class AppRoutingModule {}\n * ```\n *\n * @example\n *\n * <example name=\"po-menu-basic\" title=\"PO Menu Basic\">\n *   <file name=\"sample-po-menu-basic/sample-po-menu-basic.component.html\"> </file>\n *   <file name=\"sample-po-menu-basic/sample-po-menu-basic.component.ts\"> </file>\n * </example>\n *\n * <example name=\"po-menu-labs\" title=\"PO Menu Labs\">\n *   <file name=\"sample-po-menu-labs/sample-po-menu-labs.component.html\"> </file>\n *   <file name=\"sample-po-menu-labs/sample-po-menu-labs.component.ts\"> </file>\n * </example>\n *\n * <example name=\"po-menu-human-resources\" title=\"PO Menu - Human Resources\">\n *   <file name=\"sample-po-menu-human-resources/sample-po-menu-human-resources.component.html\"> </file>\n *   <file name=\"sample-po-menu-human-resources/sample-po-menu-human-resources.component.ts\"> </file>\n *   <file name=\"sample-po-menu-human-resources/sample-po-menu-human-resources.service.ts\"> </file>\n * </example>\n */\nexport declare class PoMenuComponent extends PoMenuBaseComponent implements AfterViewInit, OnDestroy, OnInit, DoCheck {\n    changeDetector: ChangeDetectorRef;\n    private element;\n    private renderer;\n    private router;\n    private menuItemsService;\n    menuHeaderTemplate: PoMenuHeaderTemplateDirective;\n    activeMenuItem: PoMenuItem;\n    collapsedMobile: boolean;\n    filterLoading: boolean;\n    groupedMenuItem: PoMenuItem;\n    id: string;\n    linkActive: string;\n    mobileOpened: boolean;\n    noData: boolean;\n    timeoutFilter: any;\n    private filteringItems;\n    private menuInitialized;\n    private menuPrevious;\n    private resizeListener;\n    private itemSubscription;\n    private routeSubscription;\n    constructor(changeDetector: ChangeDetectorRef, element: ElementRef, renderer: Renderer2, router: Router, menuItemsService: PoMenuItemsService, menuGlobalService: PoMenuGlobalService, menuService: PoMenuService, languageService: PoLanguageService);\n    private get isActiveItemMenuSubMenu();\n    get enableCollapse(): boolean;\n    get enableCollapseButton(): boolean;\n    get hasFooter(): boolean;\n    get isCollapsed(): boolean;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    activateMenuByUrl(urlPath: string, menus: Array<PoMenuItem>): any;\n    checkActiveMenuByUrl(urlPath: string): void;\n    /**\n     * <a id=\"colapseMethod\"></a>\n     *\n     * *Método para colapsar (retrair) o menu.\n     */\n    collapse(): void;\n    debounceFilter(filter: string): void;\n    /**\n     * <a id=\"expandMethod\"></a>\n     *\n     * *Método para expandir (aumentar) o menu.\n     */\n    expand(): void;\n    subscribeToMenuItem(): void;\n    subscribeToRoute(): void;\n    /**\n     * <a id=\"toggleMethod\"></a>\n     * *Método que colapsa e expande o menu alternadamente.\n     *\n     * > *Os métodos apenas vão colapsar/expandir o menu se:\n     *  - Todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.\n     */\n    toggle(): void;\n    toggleMenuMobile(): void;\n    protected checkingRouterChildrenFragments(): string;\n    protected validateCollapseClass(collapsedMobile?: boolean): void;\n    private activateCollapseSubMenuItem;\n    private activateMenuItem;\n    private areSubMenus;\n    private clearGroupMenuIfFirstLevel;\n    private clickMenuItem;\n    private convertToMenuItemFiltered;\n    private createResizeListener;\n    private executeMenuAction;\n    private filterItems;\n    private filterLocalItems;\n    private filterProcess;\n    private filterOnService;\n    private findItems;\n    private findParent;\n    private findRootParent;\n    private getActiveMenuParent;\n    private groupMenuItem;\n    private isRootMenuEqualGroupedMenu;\n    private openParentMenu;\n    private showNoData;\n    private stringify;\n    private toggleGroupedMenuItem;\n    private toggleMenuCollapse;\n    private toggleResize;\n    private validateToggleMenu;\n    private updateMenu;\n}\n"]}