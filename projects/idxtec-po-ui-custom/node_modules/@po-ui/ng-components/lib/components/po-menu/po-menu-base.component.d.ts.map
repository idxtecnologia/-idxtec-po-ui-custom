{"version":3,"file":"po-menu-base.component.d.ts","sources":["po-menu-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { PoMenuFilter } from './po-menu-filter/po-menu-filter.interface';\nimport { PoMenuItem } from './po-menu-item.interface';\nimport { PoMenuService } from './services/po-menu.service';\nimport { PoMenuGlobalService } from './services/po-menu-global.service';\nimport { PoLanguageService } from '../../services/po-language/po-language.service';\nexport declare const poMenuLiteralsDefault: {\n    en: {\n        itemNotFound: string;\n        emptyLabelError: string;\n    };\n    es: {\n        itemNotFound: string;\n        emptyLabelError: string;\n    };\n    pt: {\n        itemNotFound: string;\n        emptyLabelError: string;\n    };\n    ru: {\n        itemNotFound: string;\n        emptyLabelError: string;\n    };\n};\n/**\n * @description\n *\n * Este é um componente de menu lateral que é utilizado para navegação nas páginas de uma aplicação.\n *\n * O componente po-menu recebe uma lista de objetos do tipo `MenuItem` com as informações dos itens de menu como\n * textos, links para redirecionamento, ações, até 4 níveis de menu e ícones para o primeiro nível de menu.\n */\nexport declare abstract class PoMenuBaseComponent {\n    menuGlobalService: PoMenuGlobalService;\n    menuService: PoMenuService;\n    languageService: PoLanguageService;\n    allowIcons: boolean;\n    allowCollapseMenu: boolean;\n    filteredItems: any;\n    filterService: PoMenuFilter;\n    readonly literals: any;\n    private _collapsed;\n    private _filter;\n    private _level;\n    private _logo;\n    private _maxLevel;\n    private _menus;\n    private _params;\n    private _service;\n    private _shortLogo;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Colapsa (retrai) o menu e caso receba o valor `false` expande o menu.\n     *\n     * > Utilize esta propriedade para iniciar o menu colapsado.\n     *\n     * > Ao utilizar os métodos [`colapse`](documentation/po-menu#colapseMethod), [`expand`](documentation/po-menu#expandMethod) e\n     * [`toggle`](documentation/po-menu#toggleMethod) o valor desta propriedade não é alterado.\n     *\n     * **Importante:**\n     *\n     * > O menu será colapsado/expandido apenas se todos os itens de menu tiverem valor nas propriedades `icon` e `shortLabel`.\n     *\n     * @default `false`\n     */\n    set collapsed(collapsed: boolean);\n    get collapsed(): boolean;\n    /** Lista dos itens do menu. Se o valor estiver indefinido ou inválido, será inicializado como um array vazio. */\n    set menus(menus: Array<PoMenuItem>);\n    get menus(): Array<PoMenuItem>;\n    get maxLevel(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Habilita um campo para pesquisa no menu.\n     * A pesquisa é realizada em todos os níveis do menu e busca apenas pelos itens que contém uma ação e/ou link definidos,\n     * ou também, pode ser realizada através de um serviço definido na propriedade `p-service`.\n     *\n     * > O campo de pesquisa é desabilitado se o menu estiver colapsado.\n     *\n     * @default `false`\n     */\n    set filter(filter: boolean);\n    get filter(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Nesta propriedade deve ser informada a URL do serviço em que será utilizado para realizar o filtro de itens do\n     * menu quando realizar uma busca. Caso haja a necessidade de customização, pode ser informado um\n     * serviço implementando a interface `PoMenuFilter`.\n     *\n     * Caso utilizada uma URL, o serviço deve retornar os dados conforme o\n     * [Guia de implementação de APIs](https://po-ui.io/guides/api) do PO UI.\n     *\n     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando o valor digitado\n     * no parâmetro `search`, veja exemplo:\n     *\n     * > O filtro no serviço será realizado caso contenha no mínimo três caracteres no campo de busca, por exemplo `tot`.\n     *\n     * ```\n     * <po-menu p-service=\"/api/v1/fnd/menu\">\n     * </po-menu>\n     *\n     * Requisição: GET /api/v1/fnd/menu?search=contas\n     * ```\n     *\n     * > É necessário que propriedade `p-filter` esteja habilitada.\n     */\n    set service(value: string | PoMenuFilter);\n    get service(): string | PoMenuFilter;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Deve ser informado um objeto que deseja-se utilizar na requisição de filtro dos itens de menu.\n     *\n     * Caso utilizado um serviço customizado, implementando a interface `PoMenuFilter`, o valor desta propriedade\n     * será passado como parâmetro, na função `getFilteredData`.\n     *\n     * Quando utilizada uma URL de serviço, será realizado um *GET* na URL informada, passando os valores informados\n     * nesta propriedade em conjunto com o parâmetro `search`, veja exemplo:\n     *\n     * ```\n     * <po-menu p-service=\"/api/v1/fnd/menu\" [p-params]=\"{ company: 1, user: 297767512 }\">\n     * </po-menu>\n     *\n     * Requisição: GET /api/v1/fnd/menu?search=contas&company=1&user=297767512\n     * ```\n     */\n    set params(value: any);\n    get params(): any;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caminho para a logomarca, que será exibida quando o componente estiver expandido, localizada na parte superior.\n     *\n     * > **Importante:**\n     * - Caso esta propriedade estiver indefinida ou inválida o espaço para logomarca será removido.\n     * - Como boa prática, indica-se utilizar imagens com até `24px` de altura e `224px` de largura,\n     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.\n     */\n    set logo(value: any);\n    get logo(): any;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caminho para a logomarca, que será exibida quando o componente estiver colapsado, localizada na parte superior.\n     *\n     * > **Importante:**\n     * - Caso esta propriedade estiver indefinida ou inválida passa a assumir o valor informado na propriedade `p-logo` e na ausência desta o\n     * espaço para logomarca será removido.\n     * - Como boa prática, indica-se utilizar imagens com até `48px` de altura e `48px` de largura,\n     * caso ultrapassar esses valores a imagem será readequada no espaço disponível.\n     * - Caso não informar um valor, esta propriedade passa a assumir o valor informado na propriedade `p-logo`.\n     */\n    set shortLogo(value: any);\n    get shortLogo(): any;\n    constructor(menuGlobalService: PoMenuGlobalService, menuService: PoMenuService, languageService: PoLanguageService);\n    protected setMenuExtraProperties(): void;\n    protected setMenuItemProperties(menuItem: PoMenuItem): void;\n    protected validateMenus(menus: any): void;\n    protected setMenuType(menuItem: PoMenuItem): string;\n    private configService;\n    private processSubItems;\n    private removeBadgeAlert;\n    private setMenuBadgeAlert;\n    private validateMenu;\n    protected abstract checkActiveMenuByUrl(urlRouter: any): any;\n    protected abstract checkingRouterChildrenFragments(): any;\n    protected abstract validateCollapseClass(): any;\n}\n"]}