{"version":3,"file":"po-chart-circular.component.d.ts","sources":["po-chart-circular.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, EventEmitter, NgZone } from '@angular/core';\nimport { PoChartContainerSize } from '../../interfaces/po-chart-container-size.interface';\nimport { PoChartLabelCoordinates } from '../../interfaces/po-chart-label-coordinates.interface';\nimport { PoChartOptions } from '../../interfaces/po-chart-options.interface';\nimport { PoChartPathCoordinates } from '../../interfaces/po-chart-path-coordinates.interface';\nimport { PoChartSerie } from '../../interfaces/po-chart-serie.interface';\nexport declare abstract class PoChartCircularComponent {\n    private ngZone;\n    private changeDetector;\n    containerSize: PoChartContainerSize;\n    circularClick: EventEmitter<any>;\n    circularHover: EventEmitter<any>;\n    private svgPaths;\n    private svgLabels;\n    canDisplayLabels: boolean;\n    seriesLabels: Array<PoChartLabelCoordinates>;\n    seriesList: Array<PoChartPathCoordinates>;\n    showLabels: boolean;\n    protected innerRadius: number;\n    protected totalValue: number;\n    private _options;\n    private _series;\n    private animate;\n    set options(value: PoChartOptions);\n    get options(): PoChartOptions;\n    set series(value: Array<PoChartSerie>);\n    get series(): Array<PoChartSerie>;\n    constructor(ngZone: NgZone, changeDetector: ChangeDetectorRef);\n    onSerieClick(selectedItem: any): void;\n    onSerieHover(selectedItem: any): void;\n    protected calculateAngle(data: number, totalValue: number): number;\n    protected drawSeries(series: Array<PoChartSerie>, height: number): void;\n    private calculateTotalValue;\n    private calculateSerieCoordinates;\n    private calculateCoordinatesWithAnimation;\n    private calculateCurrentEndAngle;\n    private initDrawPaths;\n    private setSerieLabelCoordinates;\n    private validateSeries;\n    protected abstract calculateCoordinates(height: any, startRadianAngle: any, currentEndRadianAngle: any): any;\n    protected abstract getTooltipLabel(data: any, label: any, tooltip: any): any;\n}\n"]}