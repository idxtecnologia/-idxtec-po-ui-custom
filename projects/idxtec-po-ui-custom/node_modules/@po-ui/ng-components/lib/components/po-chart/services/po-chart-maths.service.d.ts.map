{"version":3,"file":"po-chart-maths.service.d.ts","sources":["po-chart-maths.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { PoChartType } from '../enums/po-chart-type.enum';\nimport { PoChartMinMaxValues } from '../interfaces/po-chart-min-max-values.interface';\nimport { PoChartOptions } from '../interfaces/po-chart-options.interface';\nimport { PoChartSerie } from '../interfaces/po-chart-serie.interface';\nexport declare class PoChartMathsService {\n    /**\n     * Calcula e retorna os válores mínimo e máximo das séries.\n     *\n     * @param series Lista de séries.\n     * @param acceptNegativeValues boolean.\n     */\n    calculateMinAndMaxValues(series: Array<any>, acceptNegativeValues?: boolean): PoChartMinMaxValues;\n    /**\n     * Retorna o valor com maior quantidade de dígitos entre todas as séries.\n     * Pode receber uma lista de categorias para o caso de gráfico de barra, ou então a lista de séries se o tipo de gráfico for linha ou coluna.\n     *\n     * @param data Lista de séries.\n     * @param type O tipo do gráfico'.\n     * @param options As opções para validação de número de linhas do eixo X'.\n     */\n    getLongestDataValue(data: Array<PoChartSerie | string>, type: PoChartType, options: PoChartOptions): number | string;\n    /**\n     * Retorna o tamanho da série que tiver mais itens.\n     *\n     * @param series Lista de séries.\n     */\n    seriesGreaterLength(series: Array<PoChartSerie>): number;\n    /**\n     * Retorna o percentual em decimal da série passada pela distância entre os valores mínimos e máximos da série.\n     *\n     * Se o valor mínimo for negativo o alcance partirá dele como sendo zero %.\n     *\n     * Por exemplo:\n     *    minValue = -10;\n     *    maxValue = 0;\n     *    serieValue = -8\n     *    O resultado será de 0.20;\n     *\n     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.\n     * @param serieValue O valor da série.\n     */\n    getSeriePercentage(minMaxValues: any, serieValue: number): number;\n    /**\n     * Calcula e retorna uma lista de valores referentes aos textos dos eixos X em relação à quantidade de linhas horizontais.\n     *\n     * @param minMaxValues Objeto contendo os valores mínimo e máximo de todas as séries.\n     * @param gridLines Quantidade de linhas horizontais. Valor default é 5.\n     */\n    range(minMaxValues: PoChartMinMaxValues, gridLines?: number): any[];\n    /**\n     *\n     * Verifica se o valor passado é um Integer ou Float.\n     *\n     * @param number O valor a ser validado\n     */\n    verifyIfFloatOrInteger(number: number): boolean;\n    private amountOfGridLines;\n    private getAxisXLabelLongestValue;\n    private getGridLineArea;\n    private getDomain;\n    private getFractionFromInt;\n    private getLongestData;\n}\n"]}