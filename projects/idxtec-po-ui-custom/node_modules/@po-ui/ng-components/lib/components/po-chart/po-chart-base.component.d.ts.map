{"version":3,"file":"po-chart-base.component.d.ts","sources":["po-chart-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { PoChartContainerSize } from './interfaces/po-chart-container-size.interface';\nimport { PoChartGaugeSerie } from './po-chart-types/po-chart-gauge/po-chart-gauge-series.interface';\nimport { PoChartType } from './enums/po-chart-type.enum';\nimport { PoChartOptions } from './interfaces/po-chart-options.interface';\nimport { PoChartSerie } from './interfaces/po-chart-serie.interface';\nimport { PoColorService } from '../../services/po-color/po-color.service';\n/**\n * @description\n *\n * O `po-chart` é um componente para renderização de dados através de gráficos, com isso facilitando a compreensão e tornando a\n * visualização destes dados mais agradável.\n *\n * Através de suas principais propriedades é possível definir atributos, tais como tipo de gráfico, altura, título, cores customizadas, opções para os eixos, entre outros.\n *\n * O componente permite utilizar em conjunto séries do tipo linha e coluna.\n *\n * Além disso, também é possível definir uma ação que será executada ao clicar em determinado elemento do gráfico\n * e outra que será executada ao passar o *mouse* sobre o elemento.\n *\n * #### Guia de uso para Gráficos\n *\n * > Veja nosso [guia de uso para gráficos](/guides/guide-charts) para auxiliar na construção do seu gráfico,\n * informando em qual caso utilizar, o que devemos evitar e boas práticas relacionada a cores.\n */\nexport declare abstract class PoChartBaseComponent implements OnChanges {\n    protected colorService: PoColorService;\n    /** Define o título do gráfico. */\n    title?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento executado quando o usuário clicar sobre um elemento do gráfico.\n     *\n     * O evento emitirá o seguinte parâmetro:\n     * - *donut* e *pie*: um objeto contendo a categoria e valor da série.\n     * - *area*, *line*, *column* e *bar*: um objeto contendo o nome da série, valor e categoria do eixo do gráfico.\n     */\n    seriesClick: EventEmitter<PoChartGaugeSerie | PoChartSerie>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento executado quando o usuário passar o *mouse* sobre um elemento do gráfico.\n     *\n     * O evento emitirá o seguinte parâmetro de acordo com o tipo de gráfico:\n     * - *donut* e *pie*: um objeto contendo a categoria e valor da série.\n     * - *area*, *line*, *column* e *bar*: um objeto contendo a categoria, valor da série e categoria do eixo do gráfico.\n     */\n    seriesHover: EventEmitter<PoChartGaugeSerie | PoChartSerie>;\n    chartSeries: Array<PoChartSerie | PoChartGaugeSerie>;\n    chartType: PoChartType;\n    svgContainerSize: PoChartContainerSize;\n    private _options;\n    private _categories;\n    private _height;\n    private _series;\n    private _type;\n    private defaultType;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a altura do gráfico.\n     *\n     * > O valor mínimo aceito nesta propriedade é 200.\n     *\n     * @default `400px`\n     */\n    set height(value: number);\n    get height(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define o tipo de gráfico.\n     *\n     * É possível também combinar gráficos dos tipos linha e coluna. Para isso, opte pela declaração de `type` conforme a interface `PoChartSerie`.\n     *\n     * > Note que, se houver declaração de tipo de gráfico tanto em `p-type` quanto em `PochartSerie.type`, o valor `{ type }` da primeira série anulará o valor definido em `p-type`.\n     *\n     * Se não passado valor, o padrão será relativo à primeira série passada em `p-series`:\n     * - Se `p-series = [{ data: [1,2,3] }]`: será `PoChartType.Column`.\n     * - Se `p-series = [{ data: 1 }]`: será `PoChartType.Pie`.\n     *\n     * > Veja os valores válidos no *enum* `PoChartType`.\n     */\n    set type(value: PoChartType);\n    get type(): PoChartType;\n    /**\n     * @description\n     *\n     * Define os elementos do gráfico que serão criados dinamicamente.\n     */\n    set series(value: Array<PoChartSerie> | PoChartGaugeSerie);\n    get series(): Array<PoChartSerie> | PoChartGaugeSerie;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define os nomes das categorias que serão plotadas no eixo X do gráfico caso seja do tipo `bar`, ou então nos eixos Y do grid de gráficos dos tipos `area`, `columnn` e `line`.\n     *\n     * > Gráficos do tipo `bar` dimensionam a área do gráfico de acordo com a largura do maior texto de categorias. No entanto, é uma boa prática optar por palavras curtas para que a leitura do gráfico não seja prejudicada.\n     *\n     * > Caso não seja especificado um valor para a categoria, será plotado um hífen na categoria referente a cada série.\n     */\n    set categories(value: Array<string>);\n    get categories(): Array<string>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Objeto com as configurações usadas no `po-chart`.\n     *\n     * É possível, por exemplo, definir as configurações de exibição das legendas,\n     * configurar os eixos(*axis*) para os gráficos dos tipos `area`, `line`, `column` e `bar` da seguinte forma:\n     *\n     * ```\n     *  chartOptions: PoChartOptions = {\n     *    legend: true,\n     *    axis: {\n     *      minRange: 0,\n     *      maxRange: 100,\n     *      gridLines: 5,\n     *    },\n     *  };\n     * ```\n     */\n    set options(value: PoChartOptions);\n    get options(): PoChartOptions;\n    constructor(colorService: PoColorService);\n    get isTypeCircular(): boolean;\n    ngOnChanges(changes: SimpleChanges): void;\n    onSeriesClick(event: any): void;\n    onSeriesHover(event: any): void;\n    private setDefaultHeight;\n    private transformObjectToArrayObject;\n    private setTypeDefault;\n    private validateSerieAndAddType;\n    private appendColors;\n    private appendType;\n    abstract rebuildComponentRef(): void;\n    protected abstract getSvgContainerSize(): void;\n    protected abstract calculateAxisXLabelArea(): number;\n}\n"]}