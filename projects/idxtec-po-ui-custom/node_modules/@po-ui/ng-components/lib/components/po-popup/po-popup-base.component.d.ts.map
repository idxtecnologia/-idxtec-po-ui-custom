{"version":3,"file":"po-popup-base.component.d.ts","sources":["po-popup-base.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { PoPopupAction } from './po-popup-action.interface';\n/**\n * @description\n *\n * O componente `po-popup` é um container pequeno recomendado para ações de navegação:\n * Ele abre sobreposto aos outros componentes.\n *\n * É possível escolher as posições do `po-popup` em relação ao componente alvo, para isto veja a propriedade `p-position`.\n *\n * Também é possível informar um _template_ _header_ para o `po-popup`, que será exibido acima das ações.\n * Para funcionar corretamente é preciso adicionar a propriedade `p-popup-header-template` no elemento que servirá de template, por exemplo:\n *\n * ```\n * <po-popup [p-target]=\"target\">\n *   <div p-popup-header-template>\n *     <div>\n *       Dev PO\n *     </div>\n *     <div>\n *       dev.po@po-ui.com.br\n *     </div>\n *   </div>\n * </po-popup >\n * ```\n */\nexport declare class PoPopupBaseComponent {\n    arrowDirection: string;\n    showPopup: boolean;\n    protected oldTarget: any;\n    protected param: any;\n    protected clickoutListener: () => void;\n    protected resizeListener: () => void;\n    private _actions;\n    private _customPositions?;\n    private _hideArrow;\n    private _isCornerAlign;\n    private _position?;\n    private _target;\n    /** Lista de ações que serão exibidas no componente. */\n    set actions(value: Array<PoPopupAction>);\n    get actions(): Array<PoPopupAction>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Oculta a seta do componente *popup*.\n     *\n     * @default `false`\n     */\n    set hideArrow(value: boolean);\n    get hideArrow(): boolean;\n    set isCornerAlign(value: boolean);\n    get isCornerAlign(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define a posição inicial que o `po-popup` abrirá em relação ao componente alvo. Sugere-se que seja\n     * usada a orientação `bottom-left` (abaixo e a esquerda), porém o mesmo é flexível e será rotacionado\n     * automaticamente para se adequar a tela, caso necessário.\n     *\n     * > Caso seja definido um `p-custom-positions` o componente irá abrir na posição definida na propriedade `p-position`\n     * e caso não caiba na posição inicial ele irá rotacionar seguindo a ordem de posições definidas no `p-custom-positions`.\n     *\n     * Posições válidas:\n     * - `right`: Posiciona o po-popup no lado direito do componente alvo.\n     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.\n     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.\n     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.\n     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.\n     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.\n     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.\n     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.\n     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.\n     * - `top`: Posiciona o po-popup acima do componente alvo.\n     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.\n     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.\n     *\n     * @default `bottom-left`\n     */\n    set position(value: string);\n    get position(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Define as posições e a sequência que o `po-popup` poderá rotacionar. A sequência será definida pela ordem passada\n     * no *array*. Caso não seja definido, o `po-popup` irá rotacionar em todas as posições válidas.\n     *\n     * > O componente sempre irá abrir na posição definida no `p-position` e caso não caiba na posição definida o mesmo\n     * irá rotacionar seguindo a ordem definida pelo `p-custom-position`.\n     *\n     * Posições válidas:\n     * - `right`: Posiciona o po-popup no lado direito do componente alvo.\n     * - `right-bottom`: Posiciona o po-popup no lado direito inferior do componente alvo.\n     * - `right-top`: Posiciona o po-popup no lado direito superior do componente alvo.\n     * - `bottom`: Posiciona o po-popup abaixo do componente alvo.\n     * - `bottom-left`: Posiciona o po-popup abaixo e à esquerda do componente alvo.\n     * - `bottom-right`: Posiciona o po-popup abaixo e à direita do componente alvo.\n     * - `left`: Posiciona o po-popup no lado esquerdo do componente alvo.\n     * - `left-top`: Posiciona o po-popup no lado esquerdo superior do componente alvo.\n     * - `left-bottom`: Posiciona o po-popup no lado esquerdo inferior do componente alvo.\n     * - `top`: Posiciona o po-popup acima do componente alvo.\n     * - `top-right`: Posiciona o po-popup acima e à direita do componente alvo.\n     * - `top-left`: Posiciona o po-popup acima e à esquerda do componente alvo.\n     */\n    set customPositions(value: Array<string>);\n    get customPositions(): Array<string>;\n    /**\n     * @description\n     *\n     * Para utilizar o `po-popup` deve-se colocar uma variável local no componente que disparará o evento\n     * de abertura no mesmo e com isso, invocará a função `toggle`, por exemplo:\n     *\n     * ```\n     * <span #icon class=\"po-icon po-icon-credit-payment\" (click)=\"popup.toggle()\">\n     *   Credit Actions\n     * </span>\n     *\n     * <po-popup #popup\n     *   [p-actions]=\"actions\"\n     *   [p-target]=\"icon\">\n     * </po-popup>\n     * ```\n     *\n     * Caso o elemento alvo for um componente, será preciso obter o `ElementRef` do mesmo e passá-lo à propriedade, por exemplo:\n     *\n     * ```\n     * // component.html\n     *\n     * <po-button #poButton\n     *   p-label=\"Open Popover\"\n     *   (p-click)=\"popup.toggle()\">\n     * </po-button>\n     *\n     * <po-popup #popup\n     *   [p-actions]=\"actions\"\n     *   [p-target]=\"poButtonRef\">\n     * </po-popup>\n     *\n     * // component.ts\n     *\n     * @ViewChild('poButton', { read: ElementRef }) poButtonRef: ElementRef;\n     * ```\n     */\n    set target(value: any);\n    get target(): any;\n}\n"]}