{"version":3,"file":"po-step.component.d.ts","sources":["po-step.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ElementRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PoStepperStatus } from '../enums/po-stepper-status.enum';\n/**\n * @description\n *\n * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:\n *\n * ```\n * <po-stepper>\n *\n *    <po-step p-label=\"Endereço\">\n *\n *        <!-- Conteúdo referente ao endereço -->\n *\n *    </po-step>\n *\n *    <po-step p-label=\"Pagamento\">\n *\n *        <!-- Conteúdo referente ao pagamento -->\n *\n *    </po-step>\n *\n *  </po-stepper>\n * ```\n *\n * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro\n * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam\n * desabilitados (*disabled*).\n *\n * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o\n * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá\n * com o status desabilitado.\n *\n * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível\n * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).\n *\n * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento\n * e exemplos de uso.\n */\nexport declare class PoStepComponent implements AfterContentInit {\n    private elementRef;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Função chamada quando o próximo *step* for clicado ou quando o método `PoStepperComponent.next()` for chamado.\n     * Ao retornar `true` define que esse *step* ficará ativo e o atual como concluído (*done*).\n     * Também aceita funções que retornem `Observable<boolean>`. Ao retornar um `Observable<boolean>`,\n     * garanta que esse `Observable` será completado, caso houver algum erro durante o processo não será possível prosseguir\n     * ao próximo *step*.\n     *\n     * Ao ser disparada, a mesma receberá por parâmetro o `PoStepComponent` atual.\n     *\n     * O contexto da função que será chamada, será o mesmo que o do `PoStepComponent`, então para poder alterar\n     * para o contexto do componente que o está utilizando, pode ser utilizado a propriedade `bind` do Javascript.\n     * Por exemplo, para a função `validate`:\n     *\n     * ```\n     * <po-step p-label=\"Step 1\" [p-can-active-next-step]=\"validate.bind(this)\">\n     * ...\n     * </po-step>\n     * ```\n     */\n    canActiveNextStep: ((currentStep: any) => boolean) | ((currentStep: any) => Observable<boolean>);\n    /** Título que será exibido descrevendo o passo (*step*). */\n    label: string;\n    id?: string;\n    private _status?;\n    set status(status: PoStepperStatus);\n    get status(): PoStepperStatus;\n    constructor(elementRef: ElementRef);\n    ngAfterContentInit(): void;\n    protected setDisplayOnActiveOrError(): void;\n}\n"]}