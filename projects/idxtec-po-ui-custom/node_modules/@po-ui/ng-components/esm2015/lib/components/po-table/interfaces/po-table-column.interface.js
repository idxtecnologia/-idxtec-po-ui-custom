export {};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtY29sdW1uLmludGVyZmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby10YWJsZS9pbnRlcmZhY2VzL3BvLXRhYmxlLWNvbHVtbi5pbnRlcmZhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBvVGFibGVCb29sZWFuIH0gZnJvbSAnLi9wby10YWJsZS1ib29sZWFuLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlQ29sdW1uSWNvbiB9IGZyb20gJy4uL3BvLXRhYmxlLWNvbHVtbi1pY29uL3BvLXRhYmxlLWNvbHVtbi1pY29uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlQ29sdW1uTGFiZWwgfSBmcm9tICcuLi9wby10YWJsZS1jb2x1bW4tbGFiZWwvcG8tdGFibGUtY29sdW1uLWxhYmVsLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1RhYmxlRGV0YWlsIH0gZnJvbSAnLi4vcG8tdGFibGUtZGV0YWlsL3BvLXRhYmxlLWRldGFpbC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9UYWJsZVN1YnRpdGxlQ29sdW1uIH0gZnJvbSAnLi4vcG8tdGFibGUtc3VidGl0bGUtZm9vdGVyL3BvLXRhYmxlLXN1YnRpdGxlLWNvbHVtbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEB1c2VkQnkgUG9UYWJsZUNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBwYXJhIGNvbmZpZ3VyYcOnw6NvIGRhcyBjb2x1bmFzIGRvIGBwby10YWJsZWAuXG4gKlxuICogQXMgZGVmaW5pw6fDtWVzIGRhcyBjb2x1bmFzIHNlcsOjbyBhcGxpY2FkYXMgbGluaGEgYSBsaW5oYS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQb1RhYmxlQ29sdW1uIHtcbiAgLyoqXG4gICAqIERlZmluZSB1bWEgYcOnw6NvIG5hIGNvbHVuYSBxdWFuZG8gbyB0aXBvIGRhIGNvbHVuYSBmb3IgYGxpbmtgIG91IGBpY29uYC5cbiAgICpcbiAgICogPiBRdWFuZG8gZm9yIGRvIHRpcG8gYGxpbmtgIHNlcsOhIGVudmlhZG8gY29tbyBwcmltZWlybyBwYXLDom1ldHJvIG8gdmFsb3IgZGEgY29sdW5hXG4gICAqIGUgbm8gc2VndW5kbyBwYXLDom1ldHJvIG8gb2JqZXRvIGNvbXBsZXRvIGRhIGxpbmhhLiBDYXNvIHRlbmhhIHNpZG8gZGVmaW5pZG8gdW1hIGHDp8OjbyBlIHVtIGxpbmsgbmEgY29sdW5hLCBhIGHDp8Ojb1xuICAgKiBzZXLDoSBleGVjdXRhZGEgYW8gaW52w6lzIGRvIGxpbmsuXG4gICAqXG4gICAqID4gUXVhbmRvIGZvciBkbyB0aXBvIGBpY29uYCBlbnZpYXLDoSBvIG9iamV0byBjb21wbGV0byBkYSBsaW5oYSBlIG8gc2VndW5kbyBwYXLDom1ldHJvIHNlcsOhIGEgZGVmaW5pw6fDo28gZGEgY29sdW5hLlxuICAgKi9cbiAgYWN0aW9uPzogRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIERlZmluZSB1bSBvYmpldG8gZG8gdGlwbyBgUG9UYWJsZUJvb2xlYW5gIHBhcmEgYXMgY29sdW5hcyBkbyB0aXBvIF9ib29sZWFuXy4gUG9yIGV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiAgeyBwcm9wZXJ0eTogJ2FwcHJvYmF0aW9uJywgdHlwZTogJ2Jvb2xlYW4nLCBib29sZWFuOiB7XG4gICAqICAgIHRydWVMYWJlbDogJ0FjY2VwdGVkJywgZmFsc2VMYWJlbDogJ1JlamVjdGVkJ1xuICAgKiAgfX1cbiAgICogYGBgXG4gICAqXG4gICAqID4gQ2FzbyBuw6NvIHNlamEgZGVmaW5pZG8gdW0gb2JqZXRvIHBhcmEgY29sdW5hcyBkbyB0aXBvICpib29sZWFuKixcbiAgICogZXN0YSBleGliaXLDoSBwb3IgcGFkcsOjbyBgU2ltYCBlIGBOw6NvYCBkZSBhY29yZG8gY29tIG9zIHZhbG9yZXMgX2Jvb2xlYW5vc18uXG4gICAqL1xuICBib29sZWFuPzogUG9UYWJsZUJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIGEgY29yIHF1ZSBzZXLDoSBhcGxpY2FkYSBubyBjb250ZcO6ZG8gZGEgY29sdW5hLlxuICAgKlxuICAgKiBWYWxvcmVzIHbDoWxpZG9zOlxuICAgKiAtIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTAxXCI+PC9zcGFuPiBgY29sb3ItMDFgXG4gICAqIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDJcIj48L3NwYW4+IGBjb2xvci0wMmBcbiAgICogLSA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0wM1wiPjwvc3Bhbj4gYGNvbG9yLTAzYFxuICAgKiAtIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA0XCI+PC9zcGFuPiBgY29sb3ItMDRgXG4gICAqIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDVcIj48L3NwYW4+IGBjb2xvci0wNWBcbiAgICogLSA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0wNlwiPjwvc3Bhbj4gYGNvbG9yLTA2YFxuICAgKiAtIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTA3XCI+PC9zcGFuPiBgY29sb3ItMDdgXG4gICAqIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMDhcIj48L3NwYW4+IGBjb2xvci0wOGBcbiAgICogLSA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0wOVwiPjwvc3Bhbj4gYGNvbG9yLTA5YFxuICAgKiAtIDxzcGFuIGNsYXNzPVwiZG90IHBvLWNvbG9yLTEwXCI+PC9zcGFuPiBgY29sb3ItMTBgXG4gICAqIC0gPHNwYW4gY2xhc3M9XCJkb3QgcG8tY29sb3ItMTFcIj48L3NwYW4+IGBjb2xvci0xMWBcbiAgICogLSA8c3BhbiBjbGFzcz1cImRvdCBwby1jb2xvci0xMlwiPjwvc3Bhbj4gYGNvbG9yLTEyYFxuICAgKlxuICAgKiA+IEV4aXN0ZSBhIHBvc3NpYmlsaWRhZGUgZGUgaW5mb3JtYXIgdW1hIGZ1bsOnw6NvIHF1ZSByZXRvcm5lIHVtIGRvcyB2YWxvcmVzIGFjZWl0b3MsIHNlcsOjbyBwYXNzYWRvc1xuICAgKiBwb3IgcGFyw6JtZXRybyBhIGxpbmhhIGUgYSBjb2x1bmEgYXR1YWwsIHBvciBleGVtcGxvOlxuICAgKlxuICAgKiBgYGBcbiAgICogKHJvdywgY29sdW1uKSA9PiB7IHJvd1tjb2x1bW5dID09ICd0ZXh0JyA/ICdjb2xvci0wMycgOiAnY29sb3ItMDknIH1cbiAgICogYGBgXG4gICAqXG4gICAqID4gw4kgcG9zc8OtdmVsIHRhbWLDqW0gdXPDoS1sYSBuYSBjb2x1bmEgZG8gdGlwbyBgaWNvbnNgIHBhcmEgYWx0ZXJhw6fDo28gZGFzIGNvcmVzIGRlIHNldSBjb250ZcO6ZG8gY29uZm9ybWUgZXhlbXBsbyBhYmFpeG8sXG4gICAqIGNvbnR1ZG8sIGRlc3RhIGZvcm1hIHNvYnJlcMO1ZSBhIGNvciBlc3BlY2lmaWNhZGEgZW0gY2FkYSBvYmpldG8gY2FzbyBoYWphOlxuICAgKlxuICAgKiBgYGBcbiAgICogeyBwcm9wZXJ0eTogJ2NvbHVtbkljb24nLCBsYWJlbDogJ0xpa2UnLCB0eXBlOiAnaWNvbicsIGNvbG9yOiAnY29sb3ItMDgnLCBpY29uczogW1xuICAgKiAgIHsgdmFsdWU6ICdwby1pY29uLXN0YXInLCBhY3Rpb246ICgpID0+IHRoaXMubm90aWZpY2F0aW9uKCkgfVxuICAgKiBdfSxcbiAgICogYGBgXG4gICAqL1xuICBjb2xvcj86IHN0cmluZyB8IEZ1bmN0aW9uO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdW0gb2JqZXRvIHF1ZSBzZWd1ZSBhIGludGVyZmFjZSBgUG9UYWJsZURldGFpbGAsIHBhcmEgYXMgY29sdW5hcyBkZSBkZXRhbGhlcy4gUG9yIGV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiB7IGNvbHVtbnM6IFt7IHByb3BlcnR5OiAncGFja2FnZScsIGxhYmVsOiAnUGFjb3RlJyB9XSwgdHlwZUhlYWRlcjogJ3RvcCcgfVxuICAgKiBgYGBcbiAgICpcbiAgICovXG4gIGRldGFpbD86IFBvVGFibGVEZXRhaWw7XG5cbiAgLyoqXG4gICAqIEZ1bsOnw6NvIHF1ZSBkZXZlIHJldG9ybmFyIHVtIGJvb2xlYW5vIHBhcmEgaGFiaWxpdGFyIG91IGRlc2FiaWxpdGFyIG8gKmxpbmsqIGUgc3VhIGHDp8Ojby5cbiAgICpcbiAgICogPiBQcm9wcmllZGFkZSBkaXNwb27DrXZlbCBuYXMgY29sdW5hcyBkbyB0aXBvIGBsaW5rYC5cbiAgICovXG4gIGRpc2FibGVkPzogRnVuY3Rpb247XG5cbiAgLyoqXG4gICAqIEZvcm1hdG8gZGUgZXhpYmnDp8OjbyBkbyB2YWxvciBkYSBjb2x1bmE6XG4gICAqIC0gRm9ybWF0byBwYXJhIG1vZWRhIChjdXJyZW5jeSkuIEV4ZW1wbG9zOiAnQlJMJywgJ1VTRCcuXG4gICAqIC0gRm9ybWF0byBwYXJhIGRhdGEgKGRhdGUpOiBhY2VpdGEgYXBlbmFzIG9zIGNhcmFjdGVyZXMgZGUgZGlhKGRkKSwgbcOqcyhNTSBvdSBtbSkgZSBhbm8gKHl5eXkgb3UgeXkpLFxuICAgKiBjYXNvIG7Do28gc2VqYSBpbmZvcm1hZG8gdW0gZm9ybWF0byBvIG1lc21vIHNlcsOhICdkZC9NTS95eXl5Jy4gRXhlbXBsb3M6ICdkZC9NTS95eXl5JywgJ2RkLU1NLXl5JywgJ21tL2RkL3l5eXknLlxuICAgKiAtIEZvcm1hdG8gcGFyYSBob3LDoXJpbyAodGltZSk6IGFjZWl0YSBhcGVuYXMgb3MgY2FyYWN0ZXJlcyBkZSBob3JhKEhIKSwgbWludXRvcyhtbSksIHNlZ3VuZG9zKHNzKSBlXG4gICAqICBtaWxpc2VndW5kb3MoZi1mZmZmZmYpLCBvcyBtaWxpc2VndW5kb3Mgc8OjbyBvcGNpb25haXMsIGNhc28gbsOjbyBzZWphIGluZm9ybWFkbyB1bSBmb3JtYXRvIG8gbWVzbW8gc2Vyw6FcbiAgICogJ0hIOm1tOnNzJy4gRXhlbXBsb3M6ICdISDptbScsICdISDptbTpzcy5mZmZmZmYnLCAnSEg6bW06c3MuZmYnLCAnbW06c3MuZmZmJy5cbiAgICogLSBGb3JtYXRvIHBhcmEgbsO6bWVyb3MgKG51bWJlcik6IGFjZWl0YSB1bSB2YWxvciBzZWd1aW5kbyBvIHBhZHLDo28gWyoqRGVjaW1hbFBpcGUqKl0oaHR0cHM6Ly9hbmd1bGFyLmlvL2FwaS9jb21tb24vRGVjaW1hbFBpcGUpXG4gICAqICBwYXJhIGZvcm1hdGHDp8OjbywgZSBjYXNvIG7Do28gc2VqYSBpbmZvcm1hZG8sIG8gbsO6bWVybyBzZXLDoSBleGliaWRvIG5hIHN1YSBmb3JtYSBvcmlnaW5hbC4gRXhlbXBsbzpcbiAgICpcbiAgICogICsgIENvbSBvIHZhbG9yIGRlIGVudHJhZGE6IGA1MGAgZSBhIHZhbG9yIHBhcmEgZm9ybWF0YcOnw6NvOiBgJzEuMi01J2AgbyByZXN1bHRhZG8gc2Vyw6E6IGA1MC4wMGBcbiAgICovXG4gIGZvcm1hdD86IHN0cmluZztcblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSB1bSAqYXJyYXkqIGRlIG9iamV0b3MgcGFyYSBjb2x1bmFzIGRlIMOtY29uZXMgcXVlIGlyw6Egc29icmVwb3Igb3MgdmFsb3JlcyBjb21vIGBhY3Rpb25gIGUgYGNvbG9yYFxuICAgKiBkZWZpbmlkb3MgbmEgY29sdW5hLCDDoCBwYXJ0aXIgZG8gKnZhbHVlKiBkYSBbYFBvVGFibGVDb2x1bW5JY29uYF0oZG9jdW1lbnRhdGlvbi9wby10YWJsZSN0YWJsZUNvbHVtbkljb24pLCBwb3IgZXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqICB7IHByb3BlcnR5OiAnY29sdW1uSWNvbicsIGxhYmVsOiAnSWNvbnMnLCB0eXBlOiAnaWNvbicsIGFjdGlvbjogdGhpcy5mYXZvcml0ZS5iaW5kKHRoaXMpLCBpY29uczogW1xuICAgKiAgICB7IHZhbHVlOiAnZGVsZXRlJywgaWNvbjogJ3BvLWljb24tcGx1cycsIGNvbG9yOiAnY29sb3ItMDYnLCBhY3Rpb246IHRoaXMuYWRkLmJpbmQodGhpcyksIHRvb2x0aXA6ICdBZGljaW9uYSB1bSBub3ZvIGl0ZW0nIH0sXG4gICAqICAgIHsgdmFsdWU6ICdlZGl0JywgaWNvbjogJ3BvLWljb24tZWRpdCcsIGFjdGlvbjogdGhpcy5lZGl0LmJpbmQodGhpcykgfSxcbiAgICogICAgeyB2YWx1ZTogJ2RlbGV0ZScsIGljb246ICdwby1pY29uLWRlbGV0ZScsIGNvbG9yOiAnY29sb3ItMTInLCBhY3Rpb246IHRoaXMucmVtb3ZlLmJpbmQodGhpcykgfVxuICAgKiAgXX0sXG4gICAqIGBgYFxuICAgKlxuICAgKiBgYGBcbiAgICogIC4uLlxuICAgKiAgeyBpZDogMSwgY29sdW1uSWNvbjogWydwby1pY29uLWVkaXQnLCAncG8taWNvbi1yZW1vdmUnLCAncG8taWNvbi1zdGFyJ10gfVxuICAgKiAgLi4uXG4gICAqXG4gICAqIGBgYFxuICAgKi9cbiAgaWNvbnM/OiBBcnJheTxQb1RhYmxlQ29sdW1uSWNvbj47XG5cbiAgLyoqXG4gICAqIFRleHRvIHBhcmEgdMOtdHVsbyBkYSBjb2x1bmEuXG4gICAqXG4gICAqIENhc28gbsOjbyBzZWphIGluZm9ybWFkbywgc2Vyw6EgdXRpbGl6YWRvIGNvbW8gKmxhYmVsKiBvIHZhbG9yIGRhIHByb3ByaWVkYWRlICpwcm9wZXJ0eSogY29tIGEgcHJpbWVpcmEgbGV0cmEgZW0gbWFpw7pzY3Vsby5cbiAgICovXG4gIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdW0gYXJyYXkgZGUgb2JqZXRvcyBwYXJhIGFzIGNvbHVuYXMgZGUgbGFiZWwsIG9uZGUgJ2xhYmVscycgw6kgdW1hIGxpc3RhIGRlIG9iamV0b3NcbiAgICogZG8gdGlwbyBgUG9UYWJsZUNvbHVtbkxhYmVsYCBuYSBxdWFsIGRldmVtIHNlciBkZWZpbmlkYXMgb3MgbGFiZWxzLiBQb3IgZXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqIHsgcHJvcGVydHk6ICdmbGlnaHRTdGF0dXMnLCBsYWJlbDogJ1N0YXR1cycsIHR5cGU6ICdsYWJlbCcsIHdpZHRoOicxMDBweCcsIGxhYmVsczogW1xuICAgKiAgeyB2YWx1ZTogJ2NvbmZpcm1lZCcsIGNvbG9yOiAnY29sb3ItMTEnLCBsYWJlbDogJ0NvbmZpcm1hZG8nLCB0b29sdGlwOiAnRmxpZ2h0IFN0YXR1cycgfSxcbiAgICogIHsgdmFsdWU6ICdkZWxheWVkJywgY29sb3I6ICdjb2xvci0wOCcsIGxhYmVsOiAnQXRyYXNhZG8nLCB0b29sdGlwOiAnRmxpZ2h0IFN0YXR1cycgfVxuICAgKiB9XG4gICAqIGBgYFxuICAgKlxuICAgKi9cbiAgbGFiZWxzPzogQXJyYXk8UG9UYWJsZUNvbHVtbkxhYmVsPjtcblxuICAvKipcbiAgICogRGVmaW5lIG8gbm9tZSBkYSBwcm9wcmllZGFkZSBxdWUgY29udGVyw6EgbyBgbGlua2AgYSBzZXIgcmVkaXJlY2lvbmFkby5cbiAgICpcbiAgICogQGRlZmF1bHQgbGlua1xuICAgKi9cbiAgbGluaz86IHN0cmluZztcblxuICAvKiogTm9tZSBpZGVudGlmaWNhZG9yIGRhIGNvbHVuYS4gKi9cbiAgcHJvcGVydHk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29udHJvbGEgc2UgYSBjb2x1bmEgc2Vyw6EgY29uc2lkZXJhZGEgY29tbyBcIm9yZGVuYXZlbFwiLiBDYXNvIHNlamEgZGVmaW5pZG8gdW0gdmFsb3IgZmFsc28sIGEgY29sdW5hIG7Do28gc2Vyw6EgdXNhZGEgcGFyYVxuICAgKiBvcmRlbmHDp8Ojby5cbiAgICpcbiAgICogQGRlZmF1bHQgYHRydWVgXG4gICAqL1xuICBzb3J0YWJsZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERlZmluZSB1bSBhcnJheSBkZSBvYmpldG9zIHBhcmEgYXMgY29sdW5hcyBkZSBsZWdlbmRhLiBPbmRlLCBgc3VidGl0bGVzYCDDqSB1bWEgbGlzdGEgZGUgb2JqZXRvcyBkbyB0aXBvIFBvVGFibGVTdWJ0aXRsZSBuYSBxdWFsXG4gICAqIGRldmVtIHNlciBkZWZpbmlkYXMgYXMgb3DDp8O1ZXMgZGUgbGVnZW5kYS4gUG9yIGV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiB7IHByb3BlcnR5OiAnZmxpZ2h0U3RhdHVzJywgbGFiZWw6ICdTdGF0dXMnLCBjb2xvcjogJ3N1YnRpdGxlJywgd2lkdGg6JzEwMHB4Jywgc3VidGl0bGVzOiBbXG4gICAqICB7IHZhbHVlOiAnY29uZmlybWVkJywgY29sb3I6ICdjb2xvci0xMScsIGxhYmVsOiAnQ29uZmlybWFkbycsIGNvbnRlbnQ6ICcxJyB9LFxuICAgKiAgeyB2YWx1ZTogJ2RlbGF5ZWQnLCBjb2xvcjogJ2NvbG9yLTA4JywgbGFiZWw6ICdBdHJhc2FkbycsIGNvbnRlbnQ6ICcyJyB9XG4gICAqIH1cbiAgICogYGBgXG4gICAqIE5lc3NlIGV4ZW1wbG8gYSBjb2x1bmEgZXNjb2xoaWRhIHBhcmEgbGVnZW5kYSDDqSAnZmxpZ2h0U3RhdHVzJywgc2UgbyB2YWxvciBkZXNzYSBjb2x1bmEgZm9yICdjb25maXJtZWQnLCBvIHRleHRvIGRhIGxlZ2VuZGEgc2Vyw6FcbiAgICogJ0NvbmZpcm1hZG8nLlxuICAgKlxuICAgKi9cbiAgc3VidGl0bGVzPzogQXJyYXk8UG9UYWJsZVN1YnRpdGxlQ29sdW1uPjtcblxuICAvKipcbiAgICogRGVmaW5lIHVtIHRleHRvIGRlIGFqdWRhIHF1ZSBzZXLDoSBleGliaWRvIGFvIHBhc3NhciBvICptb3VzZSogc29icmUgdW0gdGV4dG8uXG4gICAqXG4gICAqID4gTyB0b29sdGlwIHPDsyBzZXLDoSB2aXPDrXZlbCBzZSBmb3IgdW1hIGNvbHVuYSBkbyB0aXBvICpsaW5rKi5cbiAgICpcbiAgICogPiBDYXNvIGEgcHJvcHJpZWRhZGUgYHAtaGlkZS10ZXh0LW92ZXJmbG93YCBlc3RlamEgaGFiaWxpdGFkYSBlIG8gY29udGXDumRvIGRhIGPDqWx1bGEgZXhjZWRlciBhIGxhcmd1cmEgZGEgY29sdW5hLFxuICAgKiDDqSBpZ25vcmFkbyBvIHZhbG9yIGF0cmlidcOtZG8gYW8gKnRvb2x0aXAqIGUgc2Vyw6EgZXhpYmlkbyBqdXN0YW1lbnRlIG8gY29udGXDumRvIGRhIGPDqWx1bGEuXG4gICAqL1xuICB0b29sdGlwPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaXBvIGRhIGNvbHVuYS5cbiAgICpcbiAgICogVmFsb3JlcyB2w6FsaWRvczpcbiAgICogLSBgYm9vbGVhbmA6IEV4aWJpcsOhIHBvciBwYWRyw6NvIGBTaW1gIGUgYE7Do29gIGRlIGFjb3JkbyBjb20gb3MgdmFsb3JlcyAqYm9vbGVhbm9zKi5cbiAgICogPiBDYXNvIG5lY2Vzc2l0ZSBleGliaXIgdmFsb3JlcyBkaWZlcmVudGVzIGRvIHBhZHLDo28sIGRldmUtc2UgdXRpbGl6YXIgYSBwcm9wcmllZGFkZSBgYm9vbGVhbmAgZGVzdGEgaW50ZXJmYWNlLlxuICAgKiAtIGBjdXJyZW5jeWA6IHZhbG9yZXMgbW9uZXTDoXJpb3MuXG4gICAqXG4gICAqIC0gYGRhdGVgOiB2YWxvciBkZSBkYXRhcy5cbiAgICogICsgQWNlaXRhIG9zIHRpcG9zIF9zdHJpbmdfIGUgX0RhdGVfIHBhZHLDo28gZG8gSmF2YXNjcmlwdCxcbiAgICogIHBvciBleGVtcGxvOiBgJzIwMTctMTEtMjgnYCBvdSBgbmV3IERhdGUoMjAxNywgMTAsIDI4KWAuXG4gICAqXG4gICAqIC0gYGRhdGVUaW1lYDogdmFsb3IgZGUgZGF0YSBjb20gaG9yw6FyaW8uXG4gICAqICArIEFjZWl0YSBvIHRpcG8gX3N0cmluZ18gbm8gZm9ybWF0byAqKklTTy04NjAxKiogZXh0ZW5kaWRvICoqJ3l5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbScqKlxuICAgKiBlIG8gdGlwbyBfRGF0ZV8gcGFkcsOjbyBkbyBKYXZhc2NyaXB0LCBwb3IgZXhlbXBsbzogYCcyMDE3LTExLTI4VDAwOjAwOjAwLTAyOjAwJ2Agb3UgYG5ldyBEYXRlKDIwMTcsIDEwLCAyOClgLlxuICAgKlxuICAgKiAtIGBkZXRhaWxgOiBhcnJheSBkZSBvYmpldG9zIHBhcmEgbyBtYXN0ZXItZGV0YWlsLlxuICAgKiAtIGBpY29uYDogKmFycmF5KiBkZSAqc3RyaW5nKiBvdSBvYmpldG9zIHBhcmEgYSBjb2x1bmEgZGUgw61jb25lcy5cbiAgICogLSBgbGFiZWxgOiB0ZXh0byBjb20gZGVzdGFxdWUuXG4gICAqIC0gYGxpbmtgOiBoYWJpbGl0YSBsaW5rIG5hIGNvbHVuYSBwYXJhIGHDp8OjbyBvdSBuYXZlZ2HDp8Ojby5cbiAgICogLSBgbnVtYmVyYDogdmFsb3JlcyBudW3DqXJpY29zLlxuICAgKiAtIGBzdHJpbmdgOiB0ZXh0b3MuXG4gICAqIC0gYHN1YnRpdGxlYDogYXJyYXkgZGUgb2JqZXRvcyBwYXJhIGEgY29sdW5hIGRlIGxlZ2VuZGEuXG4gICAqXG4gICAqIC0gYHRpbWVgOiB2YWxvciBkZSBob3LDoXJpby5cbiAgICogICsgQWNlaXRhIG8gdGlwbyBfc3RyaW5nXyBub3MgZm9ybWF0b3MgKionSEg6bW06c3MnKiogb3UgKionSEg6bW06c3MuZmZmZmZmJyoqLCBwb3IgZXhlbXBsbzogYCcyMzoxMjo0NSdgLlxuICAgKiAtIGBjZWxsVGVtcGxhdGVgOiBJbmRpY2EgcXVlIGEgY29sdW5hIHNlcsOhIHV0aWxpemFkYSBjb21vIHRlbXBsYXRlLCBlbSBjb25qdW50byBjb20gb1xuICAgKiBbUG9UYWJsZUNlbGxUZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tdGFibGUtY2VsbC10ZW1wbGF0ZSkuXG4gICAqIC0gYGNvbHVtblRlbXBsYXRlYDogSW5kaWNhIHF1ZSBhIGNvbHVuYSBzZXLDoSB1dGlsaXphZGEgY29tbyB0ZW1wbGF0ZSwgZW0gY29uanVudG8gY29tIG9cbiAgICogW1BvVGFibGVDb2x1bW5UZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tdGFibGUtY29sdW1uLXRlbXBsYXRlKS5cbiAgICpcbiAgICogQGRlZmF1bHQgYHN0cmluZ2BcbiAgICovXG4gIHR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29udHJvbGEgYSBleGliacOnw6NvIGRhIGNvbHVuYS4gQ2FzbyBzZWphIGRlZmluaWRvIHVtIHZhbG9yIGZhbHNvLCBhIGNvbHVuYSBuw6NvIHNlcsOhIGV4aWJpZGEgbWFzIG1hcyBzZXLDoSBwb3Nzw612ZWwgdG9ybsOhLWxhXG4gICAqIHZpc8OtdmVsIGF0cmF2w6lzIGRvICoqZ2VyZW5jaWFkb3IgZGUgY29sdW5hcyoqLlxuICAgKlxuICAgKiA+IEEgZGlzcG9uaWJpbGlkYWRlIGRlIHZpc3VhbGl6YcOnw6NvIHBvZGUgbGltaXRhci1zZSBkZSBhY29yZG8gY29tIGEgZGVmaW5pw6fDo28gZGUgYHAtbWF4LWNvbHVtbnNgLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgdHJ1ZWBcbiAgICovXG4gIHZpc2libGU/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGxhcmd1cmEgZGEgY29sdW5hIHBvZGUgc2VyIGluZm9ybWFkYSBlbSBwaXhlbHMgb3UgcG9yY2VudGFnZW0uXG4gICAqID4gRXhlbXBsbzogJzEwMHB4JyBvdSAnMjAlJy5cbiAgICovXG4gIHdpZHRoPzogc3RyaW5nO1xufVxuIl19