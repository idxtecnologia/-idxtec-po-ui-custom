import { Component, Input, Renderer2, ViewChild } from '@angular/core';
export class PoGaugePointerComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this.afterViewInit = false;
    }
    set coordinates(value) {
        var _a, _b;
        this._coordinates = value;
        if ((_a = this._coordinates) === null || _a === void 0 ? void 0 : _a.radius) {
            this.calculateRadiusScale(this.coordinates.radius);
        }
        if (((_b = this._coordinates) === null || _b === void 0 ? void 0 : _b.hasOwnProperty('pointerDegrees')) && this.afterViewInit) {
            this.applyPointerRotation(this.coordinates.pointerDegrees);
        }
    }
    get coordinates() {
        return this._coordinates;
    }
    ngAfterViewInit() {
        var _a;
        if ((_a = this._coordinates) === null || _a === void 0 ? void 0 : _a.pointerDegrees) {
            this.applyPointerRotation(this.coordinates.pointerDegrees);
        }
        this.afterViewInit = true;
    }
    calculateRadiusScale(radius) {
        const scale = radius / 20;
        const maxScaleValue = 24;
        this.radiusScale = scale < maxScaleValue ? scale : maxScaleValue;
    }
    applyPointerRotation(degrees) {
        this.renderer.setStyle(this.pointer.nativeElement, 'transformOrigin', `${this.coordinates.radius}px ${this.coordinates.radius}px`);
        this.renderer.setStyle(this.pointer.nativeElement, 'transform', `rotate(${degrees}deg)`);
    }
}
PoGaugePointerComponent.decorators = [
    { type: Component, args: [{
                selector: '[po-gauge-pointer]',
                template: "<svg:g>\n  <svg:path #pointer\n    class=\"po-gauge-pointer\"\n    [attr.d]=\"coordinates?.coordinates\"\n  >\n  </svg:path> \n\n  <svg:circle \n    class=\"po-gauge-pointer-circle\" \n    [attr.cx]=\"coordinates?.radius\" \n    [attr.cy]=\"coordinates?.radius\" \n    [attr.r]=\"radiusScale\"\n  >\n  </svg:circle>\n</svg:g>"
            },] }
];
PoGaugePointerComponent.ctorParameters = () => [
    { type: Renderer2 }
];
PoGaugePointerComponent.propDecorators = {
    pointer: [{ type: ViewChild, args: ['pointer',] }],
    coordinates: [{ type: Input, args: ['p-coordinates',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZ2F1Z2UtcG9pbnRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZ2F1Z2UvcG8tZ2F1Z2Utc3ZnL3BvLWdhdWdlLXBvaW50ZXIvcG8tZ2F1Z2UtcG9pbnRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFpQixTQUFTLEVBQWMsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPbEcsTUFBTSxPQUFPLHVCQUF1QjtJQXlCbEMsWUFBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQWxCL0Isa0JBQWEsR0FBRyxLQUFLLENBQUM7SUFrQlksQ0FBQztJQWhCM0MsSUFBNEIsV0FBVyxDQUFDLEtBQXlCOztRQUMvRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUUxQixJQUFJLE1BQUEsSUFBSSxDQUFDLFlBQVksMENBQUUsTUFBTSxFQUFFO1lBQzdCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsSUFBSSxDQUFBLE1BQUEsSUFBSSxDQUFDLFlBQVksMENBQUUsY0FBYyxDQUFDLGdCQUFnQixDQUFDLEtBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUM3RSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM1RDtJQUNILENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDM0IsQ0FBQztJQUlELGVBQWU7O1FBQ2IsSUFBSSxNQUFBLElBQUksQ0FBQyxZQUFZLDBDQUFFLGNBQWMsRUFBRTtZQUNyQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM1RDtRQUVELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQzVCLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxNQUFNO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDMUIsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDO1FBRXpCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7SUFDbkUsQ0FBQztJQUVPLG9CQUFvQixDQUFDLE9BQWU7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUMxQixpQkFBaUIsRUFDakIsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sSUFBSSxDQUM1RCxDQUFDO1FBQ0YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLFVBQVUsT0FBTyxNQUFNLENBQUMsQ0FBQztJQUMzRixDQUFDOzs7WUFyREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLGlWQUErQzthQUNoRDs7O1lBTnFELFNBQVM7OztzQkFRNUQsU0FBUyxTQUFDLFNBQVM7MEJBUW5CLEtBQUssU0FBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgUmVuZGVyZXIyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvR2F1Z2VDb29yZGluYXRlcyB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvcG8tZ2F1Z2UtY29vcmRpbmF0ZXMuaW50ZXJmYWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW3BvLWdhdWdlLXBvaW50ZXJdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWdhdWdlLXBvaW50ZXIuY29tcG9uZW50LnN2Zydcbn0pXG5leHBvcnQgY2xhc3MgUG9HYXVnZVBvaW50ZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgQFZpZXdDaGlsZCgncG9pbnRlcicpIHBvaW50ZXI6IEVsZW1lbnRSZWY7XG5cbiAgcmFkaXVzU2NhbGU6IG51bWJlcjtcblxuICBwcml2YXRlIF9jb29yZGluYXRlczogUG9HYXVnZUNvb3JkaW5hdGVzO1xuXG4gIHByaXZhdGUgYWZ0ZXJWaWV3SW5pdCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgncC1jb29yZGluYXRlcycpIHNldCBjb29yZGluYXRlcyh2YWx1ZTogUG9HYXVnZUNvb3JkaW5hdGVzKSB7XG4gICAgdGhpcy5fY29vcmRpbmF0ZXMgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLl9jb29yZGluYXRlcz8ucmFkaXVzKSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZVJhZGl1c1NjYWxlKHRoaXMuY29vcmRpbmF0ZXMucmFkaXVzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fY29vcmRpbmF0ZXM/Lmhhc093blByb3BlcnR5KCdwb2ludGVyRGVncmVlcycpICYmIHRoaXMuYWZ0ZXJWaWV3SW5pdCkge1xuICAgICAgdGhpcy5hcHBseVBvaW50ZXJSb3RhdGlvbih0aGlzLmNvb3JkaW5hdGVzLnBvaW50ZXJEZWdyZWVzKTtcbiAgICB9XG4gIH1cblxuICBnZXQgY29vcmRpbmF0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICBpZiAodGhpcy5fY29vcmRpbmF0ZXM/LnBvaW50ZXJEZWdyZWVzKSB7XG4gICAgICB0aGlzLmFwcGx5UG9pbnRlclJvdGF0aW9uKHRoaXMuY29vcmRpbmF0ZXMucG9pbnRlckRlZ3JlZXMpO1xuICAgIH1cblxuICAgIHRoaXMuYWZ0ZXJWaWV3SW5pdCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGNhbGN1bGF0ZVJhZGl1c1NjYWxlKHJhZGl1cykge1xuICAgIGNvbnN0IHNjYWxlID0gcmFkaXVzIC8gMjA7XG4gICAgY29uc3QgbWF4U2NhbGVWYWx1ZSA9IDI0O1xuXG4gICAgdGhpcy5yYWRpdXNTY2FsZSA9IHNjYWxlIDwgbWF4U2NhbGVWYWx1ZSA/IHNjYWxlIDogbWF4U2NhbGVWYWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlQb2ludGVyUm90YXRpb24oZGVncmVlczogbnVtYmVyKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShcbiAgICAgIHRoaXMucG9pbnRlci5uYXRpdmVFbGVtZW50LFxuICAgICAgJ3RyYW5zZm9ybU9yaWdpbicsXG4gICAgICBgJHt0aGlzLmNvb3JkaW5hdGVzLnJhZGl1c31weCAke3RoaXMuY29vcmRpbmF0ZXMucmFkaXVzfXB4YFxuICAgICk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnBvaW50ZXIubmF0aXZlRWxlbWVudCwgJ3RyYW5zZm9ybScsIGByb3RhdGUoJHtkZWdyZWVzfWRlZylgKTtcbiAgfVxufVxuIl19