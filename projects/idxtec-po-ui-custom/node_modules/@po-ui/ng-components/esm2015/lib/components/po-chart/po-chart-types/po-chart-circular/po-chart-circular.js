/* eslint-disable */
import { __rest } from "tslib";
import { Directive, ElementRef, NgZone, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { convertNumberToDecimal } from '../../../../utils/util';
import { poChartAngleStepInterval, poChartCompleteCircle, poChartDonutSerieWidth, poChartGaugeSerieWidth, poChartStartAngle } from './po-chart-circular.constant';
import { PoDefaultColorsTextBlack } from '../../../../services/po-color/po-colors.constant';
import { PoChartDynamicTypeComponent } from '../po-chart-dynamic-type.component';
import { PoChartType } from '../../enums/po-chart-type.enum';
const poChartBlackColor = '#000000';
const poChartWhiteColor = '#ffffff';
export class PoChartCircular extends PoChartDynamicTypeComponent {
    constructor(el, ngZone, renderer) {
        super();
        this.el = el;
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.chartItemStartAngle = poChartStartAngle;
        this.windowResizeEmitter = new Subject();
        this.chartItemsEndAngleList = [];
        this.svgPathElementsList = [];
        this.svgTextElementsList = [];
    }
    ngOnDestroy() {
        this.removeWindowResizeListener();
        this.removeWindowScrollListener();
        this.animationRunning = false;
    }
    ngOnInit() {
        this.chartInitSetup();
        this.setEventListeners();
    }
    removeTooltip() {
        if (this.tooltipElement) {
            this.renderer.addClass(this.tooltipElement, 'po-invisible');
        }
    }
    drawPath(path, chartItemStartAngle, chartItemEndAngle) {
        const sinAlpha = Math.sin(chartItemStartAngle);
        const cosAlpha = Math.cos(chartItemStartAngle);
        const sinBeta = Math.sin(chartItemEndAngle);
        const cosBeta = Math.cos(chartItemEndAngle);
        const startX = this.centerX + cosAlpha * this.centerX;
        const startY = this.centerX + sinAlpha * this.centerX;
        const endX = this.centerX + cosBeta * this.centerX;
        const endY = this.centerX + sinBeta * this.centerX;
        const startInnerX = this.centerX + cosAlpha * this.innerRadius;
        const startInnerY = this.centerX + sinAlpha * this.innerRadius;
        const endInnerX = this.centerX + cosBeta * this.innerRadius;
        const endInnerY = this.centerX + sinBeta * this.innerRadius;
        const halfGaugeCoordinates = [
            'M',
            startX,
            startY,
            'A',
            this.centerX,
            this.centerX,
            0,
            '0,1',
            endX,
            endY,
            'A',
            1,
            1,
            0,
            '0,1',
            endInnerX,
            endInnerY,
            'A',
            this.innerRadius,
            this.innerRadius,
            0,
            '0,0',
            startInnerX,
            startInnerY,
            'A',
            1,
            1,
            0,
            '0,1',
            startX,
            startY,
            'Z'
        ].join(' ');
        return path.setAttribute('d', halfGaugeCoordinates);
    }
    getSeriesWithValue(series) {
        const newSeries = [];
        series.forEach((serie, index) => {
            var _a;
            const value = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
            if (value > 0) {
                newSeries.push(Object.assign(Object.assign({}, serie), { color: this.colors[index] }));
            }
        });
        return newSeries;
    }
    animationSetup() {
        this.chartItemEndAngle = this.chartItemsEndAngleList[0];
        this.animationRunning = true;
        this.drawPathInit();
    }
    appendGaugeBackgroundPathElement(svgPathsWrapper) {
        const svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'po-chart-gauge-base-path');
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
    }
    calculateAngleRadians() {
        this.series.forEach((serie, index) => {
            var _a;
            const data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
            this.chartItemsEndAngleList[index] = this.calculateEndAngle(data, this.totalValue);
        });
    }
    calculateCurrentEndAngle(angleCurrentPosition) {
        const isSerieDrawCompleted = this.chartItemStartAngle + angleCurrentPosition > this.chartItemStartAngle + this.chartItemEndAngle;
        if (isSerieDrawCompleted) {
            return this.chartItemStartAngle + this.chartItemEndAngle - poChartCompleteCircle;
        }
        else {
            return this.chartItemStartAngle + angleCurrentPosition;
        }
    }
    calculateEndAngle(value, totalValue) {
        const endAngle = (value / totalValue) * (Math.PI * 2);
        return this.isChartGaugeType ? endAngle / 2 : endAngle;
    }
    calculateSVGDimensions() {
        this.calculateSVGContainerDimensions(this.chartWrapper, this.chartHeader, this.chartLegend);
        this.innerRadius = this.setInnerRadius(this.type);
    }
    changeTooltipPosition(event) {
        if (this.tooltipElement && this.tooltipElement.classList.contains('po-invisible')) {
            this.showTooltip();
        }
        const tooltipPositions = this.setTooltipPositions(event);
        this.renderer.setStyle(this.tooltipElement, 'left', `${tooltipPositions.left}px`);
        this.renderer.setStyle(this.tooltipElement, 'top', `${tooltipPositions.top}px`);
    }
    chartInitSetup() {
        this.calculateSVGDimensions();
        this.calculateTotalValue();
        this.calculateAngleRadians();
        this.createSVGElements();
        this.animationSetup();
    }
    checkingIfScrollsWithPoPage() {
        const poPageContent = document.getElementsByClassName('po-page-content');
        return poPageContent.length ? poPageContent[0] : window;
    }
    createPath(serie, svgPathsWrapper) {
        const svgPath = this.renderer.createElement('svg:path', 'svg');
        this.renderer.setAttribute(svgPath, 'class', 'po-path-item');
        this.renderer.setAttribute(svgPath, 'fill', serie.color);
        this.setElementAttributes(svgPath, serie);
        svgPathsWrapper.appendChild(svgPath);
        this.renderer.appendChild(this.svgElement, svgPathsWrapper);
        this.svgPathElementsList.push(svgPath);
    }
    createPaths() {
        const svgPathsWrapper = this.renderer.createElement('svg:g', 'svg');
        if (this.isChartGaugeType) {
            this.appendGaugeBackgroundPathElement(svgPathsWrapper);
            // Tratamento para evitar que o path desenhe os arcos referentes ao border radius do path.
            if (this.isSerieValueEqualZero()) {
                return;
            }
        }
        this.series.forEach(serie => this.createPath(serie, svgPathsWrapper));
    }
    createText(serie) {
        const data = serie.value;
        const svgG = this.renderer.createElement('svg:g', 'svg');
        const svgText = this.renderer.createElement('svg:text', 'svg');
        const fontSize = this.getFontSize();
        const textColor = this.getTextColor(serie.color);
        svgText.textContent = this.getPercentValue(data, this.totalValue) + '%';
        this.renderer.setAttribute(svgText, 'class', 'po-path-item');
        this.renderer.setAttribute(svgText, 'fill', textColor);
        this.renderer.setAttribute(svgText, 'font-size', fontSize);
        this.renderer.setAttribute(svgText, 'fill-opacity', '0');
        this.setElementAttributes(svgText, serie);
        this.renderer.appendChild(svgG, svgText);
        this.renderer.appendChild(this.svgElement, svgG);
        this.svgTextElementsList.push(svgText);
    }
    createTexts() {
        if (this.type === PoChartType.Donut) {
            this.series.forEach(serie => this.createText(serie));
        }
    }
    createSVGElements() {
        const viewBoxHeight = this.isChartGaugeType
            ? this.centerX + this.centerX * poChartGaugeSerieWidth
            : this.chartWrapper;
        const preserveAspectRatio = this.isChartGaugeType ? 'xMidYMax' : 'xMidYMin';
        this.svgElement = this.renderer.createElement('svg:svg', 'svg');
        this.renderer.setAttribute(this.svgElement, 'viewBox', `0 0 ${this.chartWrapper} ${viewBoxHeight}`);
        this.renderer.setAttribute(this.svgElement, 'preserveAspectRatio', `${preserveAspectRatio} meet`);
        this.renderer.setAttribute(this.svgElement, 'class', 'po-chart-svg-element');
        this.renderer.setAttribute(this.svgElement, 'width', `${this.centerX}`);
        this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);
        this.svgContainer.nativeElement.appendChild(this.svgElement);
        this.createPaths();
        this.createTexts();
    }
    drawPathInit() {
        if (!this.animationRunning) {
            return;
        }
        else {
            this.ngZone.runOutsideAngular(() => this.drawSeries());
        }
    }
    drawSeries(currentSerieIndex = 0, angleCurrentPosition = 0) {
        const isFinishedDrawingCurrentSeries = angleCurrentPosition > this.chartItemEndAngle;
        const isFinishedDrawingAllSeries = currentSerieIndex === this.svgPathElementsList.length;
        if (isFinishedDrawingAllSeries) {
            return;
        }
        if (isFinishedDrawingCurrentSeries) {
            this.chartItemStartAngle = this.chartItemStartAngle + this.chartItemEndAngle;
            currentSerieIndex++;
            this.chartItemEndAngle = this.chartItemsEndAngleList[currentSerieIndex];
            angleCurrentPosition = 0;
        }
        else {
            angleCurrentPosition += poChartAngleStepInterval;
            this.drawPath(this.svgPathElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
            this.setTextProperties(this.svgTextElementsList[currentSerieIndex], this.chartItemStartAngle, this.calculateCurrentEndAngle(angleCurrentPosition));
        }
        window.requestAnimationFrame(this.drawSeries.bind(this, currentSerieIndex, angleCurrentPosition));
    }
    emitEventOnEnter(event) {
        this.onSerieHover.next(event);
    }
    getFontSize() {
        const fontSizePorcent = 0.04;
        const fontSize = fontSizePorcent * this.chartWrapper;
        return `${fontSize.toFixed(0)}px`;
    }
    getPercentValue(value, totalValue) {
        const percentValue = (value / totalValue) * 100;
        const floatPercentValue = convertNumberToDecimal(percentValue, 2);
        return String(floatPercentValue).replace('.', ',');
    }
    getTextColor(color) {
        if (PoDefaultColorsTextBlack.includes(color)) {
            return poChartBlackColor;
        }
        return poChartWhiteColor;
    }
    getTooltipValue(value) {
        if (this.type === PoChartType.Pie) {
            return value.toString();
        }
        return this.getPercentValue(value, this.totalValue) + '%';
    }
    isSerieValueEqualZero() {
        return this.series.length && this.series[0].value === 0;
    }
    onMouseClick() {
        let serieOnClick;
        const _a = this.series[0], { color } = _a, serie = __rest(_a, ["color"]);
        serieOnClick = serie;
        this.onSerieClick.next(serieOnClick);
    }
    onMouseEnter(event) {
        let serieOnEnter;
        const _a = this.series[0], { color } = _a, serie = __rest(_a, ["color"]);
        this.chartElementDescription = event.target.getAttributeNS(null, 'data-tooltip-category');
        serieOnEnter = serie;
        this.emitEventOnEnter(serieOnEnter);
    }
    onWindowResize() {
        this.calculateSVGDimensions();
        this.renderer.setAttribute(this.svgElement, 'width', `${this.centerX}`);
        this.renderer.setAttribute(this.svgElement, 'height', `${this.svgHeight}`);
        this.windowResizeEmitter.next();
    }
    removeWindowResizeListener() {
        if (this.windowResizeListener) {
            this.windowResizeListener();
        }
    }
    removeWindowScrollListener() {
        if (this.windowScrollListener) {
            this.windowScrollListener();
        }
    }
    setEventListeners() {
        let chartSeries = this.el.nativeElement.querySelectorAll('.po-path-item');
        chartSeries = Array.from(chartSeries);
        chartSeries.forEach(serie => {
            this.renderer.listen(serie, 'click', this.onMouseClick.bind(this));
            this.renderer.listen(serie, 'mouseenter', this.onMouseEnter.bind(this));
            if (!this.isChartGaugeType) {
                this.renderer.listen(serie, 'mousemove', this.changeTooltipPosition.bind(this));
                this.renderer.listen(serie, 'mouseleave', this.removeTooltip.bind(this));
            }
        });
        this.windowResizeListener = this.renderer.listen(window, 'resize', this.onWindowResize.bind(this));
        this.windowScrollListener = this.renderer.listen(this.checkingIfScrollsWithPoPage(), 'scroll', this.removeTooltip.bind(this));
    }
    setInnerRadius(type) {
        let serieWidth;
        switch (type) {
            case PoChartType.Donut: {
                serieWidth = poChartDonutSerieWidth;
                break;
            }
            case PoChartType.Gauge: {
                serieWidth = poChartGaugeSerieWidth;
                break;
            }
            case PoChartType.Pie: {
                return 0;
            }
        }
        return this.centerX - this.centerX * serieWidth;
    }
    setTextProperties(text, startAngle, endAngle) {
        // necessário text.getClientRects().length para contornar erro de console causado no Firefox
        if (this.type === PoChartType.Donut && text.getClientRects().length) {
            // utilizado para recuperar o angulo do meio, entre o inicio e fim para centralizar o texto
            const centerAngle = (startAngle + endAngle) / 2;
            const textBox = text.getBBox();
            const halfTextWidth = textBox.width / 2;
            const halfTextHeight = textBox.height / 2;
            // radius interno (circulo branco) + a metade da diferença entre tamanho do centro e radius interno
            const radius = this.innerRadius + (this.centerX - this.innerRadius) / 2;
            const xCoordinate = radius * Math.cos(centerAngle) + this.centerX - halfTextWidth;
            const yCoordinate = radius * Math.sin(centerAngle) + this.centerX + halfTextHeight / 2;
            text.setAttribute('x', xCoordinate);
            text.setAttribute('y', yCoordinate);
            text.setAttribute('fill-opacity', '1');
        }
    }
    setTooltipPositions(event) {
        const displacement = 8;
        return {
            left: event.clientX - this.tooltipElement.offsetWidth / 2,
            top: event.clientY - this.tooltipElement.offsetHeight - displacement
        };
    }
    setElementAttributes(svgElement, serie) {
        var _a, _b;
        const { tooltip } = serie;
        const data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
        const label = (_b = serie.label) !== null && _b !== void 0 ? _b : (serie.description || serie.category);
        this.renderer.setAttribute(svgElement, 'data-tooltip-value', `${data}`);
        if (this.isChartGaugeType) {
            this.renderer.setAttribute(svgElement, 'data-tooltip-description', label);
        }
        else {
            const tooltipValue = this.getTooltipValue(data);
            this.renderer.setAttribute(svgElement, 'data-tooltip-category', label);
            this.renderer.setAttribute(svgElement, 'data-tooltip-text', tooltip || `${label}: ${tooltipValue}`);
        }
    }
    showTooltip() {
        this.renderer.removeClass(this.tooltipElement, 'po-invisible');
    }
}
PoChartCircular.decorators = [
    { type: Directive }
];
PoChartCircular.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
//# sourceMappingURL=data:application/json;base64,