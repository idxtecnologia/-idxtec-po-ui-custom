import { Input, Directive } from '@angular/core';
/**
 * @description
 *
 * Este componente gera uma estrutura de navegação que apresenta ao usuário a localização
 * da URL atual, exibindo as antecessoras conforme é realizado a navegação na aplicação.
 *
 * Quando não houver espaçamento suficiente para exibi-lás, o componente se encarrega também
 * de agrupar as URLs antecessoras, gerando assim um ícone que permite a visualização em cascata.
 *
 * Caso um endereço seja especificado na propriedade `p-favorite-service`, o componente permite ao usuário
 * favoritar a URL.
 *
 * Havendo necessidade de incluir parâmetros na requisição do serviço,
 * o componente dispõe da propriedade `p-params-service` que recebe um objeto contendo as informações.
 */
export class PoBreadcrumbBaseComponent {
    constructor() {
        this.itemsView = [];
        this._items = [];
    }
    /**
     * @description
     *
     * Lista de itens do _breadcrumb_.
     *
     * **Exemplo:**
     * ```
     * { label: 'Po Portal', link: 'portal' }
     * ```
     */
    set items(items) {
        this._items = items;
        this.itemsView = [].concat(items);
    }
    get items() {
        return this._items;
    }
}
PoBreadcrumbBaseComponent.decorators = [
    { type: Directive }
];
PoBreadcrumbBaseComponent.propDecorators = {
    favoriteService: [{ type: Input, args: ['p-favorite-service',] }],
    paramsService: [{ type: Input, args: ['p-params-service',] }],
    items: [{ type: Input, args: ['p-items',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1icmVhZGNydW1iL3BvLWJyZWFkY3J1bWItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJakQ7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFFSCxNQUFNLE9BQU8seUJBQXlCO0lBRHRDO1FBMEVFLGNBQVMsR0FBNEIsRUFBRSxDQUFDO1FBS2hDLFdBQU0sR0FBNEIsRUFBRSxDQUFDO0lBb0IvQyxDQUFDO0lBbEJDOzs7Ozs7Ozs7T0FTRztJQUNILElBQXNCLEtBQUssQ0FBQyxLQUE4QjtRQUN4RCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDOzs7WUFsR0YsU0FBUzs7OzhCQStEUCxLQUFLLFNBQUMsb0JBQW9COzRCQVMxQixLQUFLLFNBQUMsa0JBQWtCO29CQW1CeEIsS0FBSyxTQUFDLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuL3BvLWJyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBnZXJhIHVtYSBlc3RydXR1cmEgZGUgbmF2ZWdhw6fDo28gcXVlIGFwcmVzZW50YSBhbyB1c3XDoXJpbyBhIGxvY2FsaXphw6fDo29cbiAqIGRhIFVSTCBhdHVhbCwgZXhpYmluZG8gYXMgYW50ZWNlc3NvcmFzIGNvbmZvcm1lIMOpIHJlYWxpemFkbyBhIG5hdmVnYcOnw6NvIG5hIGFwbGljYcOnw6NvLlxuICpcbiAqIFF1YW5kbyBuw6NvIGhvdXZlciBlc3Bhw6dhbWVudG8gc3VmaWNpZW50ZSBwYXJhIGV4aWJpLWzDoXMsIG8gY29tcG9uZW50ZSBzZSBlbmNhcnJlZ2EgdGFtYsOpbVxuICogZGUgYWdydXBhciBhcyBVUkxzIGFudGVjZXNzb3JhcywgZ2VyYW5kbyBhc3NpbSB1bSDDrWNvbmUgcXVlIHBlcm1pdGUgYSB2aXN1YWxpemHDp8OjbyBlbSBjYXNjYXRhLlxuICpcbiAqIENhc28gdW0gZW5kZXJlw6dvIHNlamEgZXNwZWNpZmljYWRvIG5hIHByb3ByaWVkYWRlIGBwLWZhdm9yaXRlLXNlcnZpY2VgLCBvIGNvbXBvbmVudGUgcGVybWl0ZSBhbyB1c3XDoXJpb1xuICogZmF2b3JpdGFyIGEgVVJMLlxuICpcbiAqIEhhdmVuZG8gbmVjZXNzaWRhZGUgZGUgaW5jbHVpciBwYXLDom1ldHJvcyBuYSByZXF1aXNpw6fDo28gZG8gc2VydmnDp28sXG4gKiBvIGNvbXBvbmVudGUgZGlzcMO1ZSBkYSBwcm9wcmllZGFkZSBgcC1wYXJhbXMtc2VydmljZWAgcXVlIHJlY2ViZSB1bSBvYmpldG8gY29udGVuZG8gYXMgaW5mb3JtYcOnw7Vlcy5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9CcmVhZGNydW1iQmFzZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFBlcm1pdGUgZGVmaW5pciB1bWEgVVJMIG5vIGNvbXBvbmVudGUgYHBvLWJyZWFkY3J1bWJgIHBhcmEgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhci5cbiAgICogPiBQYXJhIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGUsIG8gw7psdGltbyBgUG9CcmVhZGNydW1iSXRlbWAgZGEgbGlzdGEgZGUgaXRlbXMgZGEgcHJvcHJpZWRhZGUgYHAtaXRlbXNgIGRldmUgdGVyIHVtIGxpbmsgaW5mb3JtYWRvLlxuICAgKlxuICAgKiA+IEEgQVBJIGRldmUgZXN0YXIgcHJlcGFyYWRhIHBhcmEgcmV0b3JuYXIgdW0gb2JqZXRvIG5vIGZvcm1hdG8gYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YC5cbiAgICpcbiAgICogQW8gaW5pY2lhciwgbyBgcG8tYnJlYWRjcnVtYmAgZmF6IHVtIEdFVCBuYSBVUkwgZGVmaW5pZGEgbmEgcHJvcHJpZWRhZGUgYHAtZmF2b3JpdGUtc2VydmljZWAgZSBkZXZlIHJldG9ybmFyIGEgcHJvcHJpZWRhZGVcbiAgICogYHsgaXNGYXZvcml0ZTogYm9vbGVhbiB9YCBkbyDDumx0aW1vIGBQb0JyZWFkY3J1bWJJdGVtYCBkZWZpbmlkbyBuYSBsaXN0YSBkZSBpdGVucyBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXG4gICAqXG4gICAqIEFvIGNsaWNhciBlbSBmYXZvcml0YXIgb3UgZGVzZmF2b3JpdGFyIG8gYHBvLWJyZWFkY3J1bWJgIGZheiB1bSBQT1NUIGNvbSBvIGxpbmsgZSBhIHByb3ByaWVkYWRlIGB7IGlzRmF2b3JpdGU6IGJvb2xlYW4gfWBcbiAgICogZGVmaW5pZG9zIG5vIMO6bHRpbW8gaXRlbSBkYSBwcm9wcmllZGFkZSBgcC1pdGVtc2AuXG4gICAqXG4gICAqID4gQ2FzbyBhbGd1bSBwYXLDom1ldHJvIHNlamEgZGVmaW5pZG8gbmEgcHJvcHJpZWRhZGUgYHAtcGFyYW1zLXNlcnZpY2VgLCBvIG1lc21vIHNlcsOhIGVudmlhZG8gcGFyYSBhIEFQSSBlIHJldG9ybmFyw6FcbiAgICogYXDDs3MgZmF6ZXIgdW0gR0VUIG91IFBPU1QuXG4gICAqXG4gICAqIEV4ZW1wbG8gZGUgVVJMIGNvbnRlbmRvIG8gc2VydmnDp28gZGUgZmF2b3JpdGFyIG91IGRlc2Zhdm9yaXRhcjpcbiAgICpcbiAgICogYGBgXG4gICAqIGh0dHBzOi8vcG8tdWkuaW8vc2FtcGxlL2FwaS9mYXZvcml0ZVxuICAgKiBgYGBcbiAgICpcbiAgICogQW8gZmF6ZXIgbyBHRVQgbyBgcG8tYnJlYWRjcnVtYmAgY29uY2F0ZW5hIG8gbGluayBjb20gYSBVUkwgZGUgc2VydmnDp28uIEV4ZW1wbG86XG4gICAqXG4gICAqIGBgYFxuICAgKiBHRVQgaHR0cDovLzxkb21haW4+L2FwaS9mYXZvcml0ZT91cmw9L2V4YW1wbGVcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiBHRVQgaHR0cDovL3BvLmNvbS5ici9zYW1wbGUvYXBpL2Zhdm9yaXRlP3VybD0vZXhhbXBsZVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIFBPU1RcbiAgICogcGF5bG9hZDogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6ICcvZXhhbXBsZScgfVxuICAgKiBgYGBcbiAgICpcbiAgICogQ2FzbyBwb3NzdWEgcGFyw6JtZXRyb3MgZGVmaW5pZG9zIG5hIHByb3ByaWVkYWRlIGBwLXBhcmFtcy1zZXJ2aWNlYDpcbiAgICpcbiAgICogYGBgXG4gICAqIFBPU1RcbiAgICogcGF5bG9hZDogeyBpc0Zhdm9yaXRlOiB0cnVlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnBvJyB9XCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogRXhlbXBsb3MgZGUgcmV0b3JubzpcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogdHJ1ZSwgdXJsOiBcIi9leGFtcGxlXCIgfVxuICAgKiBgYGBcbiAgICpcbiAgICogYGBgXG4gICAqIHsgaXNGYXZvcml0ZTogZmFsc2UsIHVybDogXCIvZXhhbXBsZVwiIH1cbiAgICogYGBgXG4gICAqXG4gICAqIGBgYFxuICAgKiB7IGlzRmF2b3JpdGU6IGZhbHNlLCB1cmw6IFwiL2V4YW1wbGVcIiwgcGFyYW1zOiBcInsgaWQ6IDE0LCB1c2VyOiAnZGV2LnBvJyB9XCIgfVxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1mYXZvcml0ZS1zZXJ2aWNlJykgZmF2b3JpdGVTZXJ2aWNlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIE9iamV0byBxdWUgcG9zc2liaWxpdGEgbyBlbnZpbyBkZSBwYXLDom1ldHJvcyBhZGljaW9uYWlzIMOgIHJlcXVpc2nDp8Ojby5cbiAgICovXG4gIEBJbnB1dCgncC1wYXJhbXMtc2VydmljZScpIHBhcmFtc1NlcnZpY2U/OiBvYmplY3Q7XG5cbiAgaXRlbXNWaWV3OiBBcnJheTxQb0JyZWFkY3J1bWJJdGVtPiA9IFtdO1xuXG4gIHByb3RlY3RlZCBjbGlja291dExpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICBwcm90ZWN0ZWQgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBfaXRlbXM6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+ID0gW107XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBMaXN0YSBkZSBpdGVucyBkbyBfYnJlYWRjcnVtYl8uXG4gICAqXG4gICAqICoqRXhlbXBsbzoqKlxuICAgKiBgYGBcbiAgICogeyBsYWJlbDogJ1BvIFBvcnRhbCcsIGxpbms6ICdwb3J0YWwnIH1cbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtaXRlbXMnKSBzZXQgaXRlbXMoaXRlbXM6IEFycmF5PFBvQnJlYWRjcnVtYkl0ZW0+KSB7XG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcbiAgICB0aGlzLml0ZW1zVmlldyA9IFtdLmNvbmNhdChpdGVtcyk7XG4gIH1cblxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xuICB9XG59XG4iXX0=