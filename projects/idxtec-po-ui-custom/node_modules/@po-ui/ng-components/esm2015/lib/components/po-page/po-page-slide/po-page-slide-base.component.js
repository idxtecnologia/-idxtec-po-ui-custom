import { __decorate } from "tslib";
import { Directive, Input } from '@angular/core';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * O componente `po-page-slide` é utilizado para incluir conteúdos secundários
 * adicionando controles e navegações adicionais, mas mantendo o usuário na
 * página principal.
 *
 * Este componente é ativado a partir do método `#open()` e pode ser  encerrado
 * através do botão que encontra-se no cabeçalho do mesmo ou através do método
 * `#close()`.
 *
 * > Para o correto funcionamento do componente `po-page-slide`, deve ser
 * > importado o módulo `BrowserAnimationsModule` no módulo principal da sua
 * > aplicação.
 */
export class PoPageSlideBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Oculta o botão de encerramento da página.
         *
         * Esta opção só é possível se a propriedade `p-click-out` estiver habilitada.
         *
         * @default `false`
         */
        this.hideClose = false;
        /**
         * @optional
         *
         * @description
         *
         * Define se permite o encerramento da página ao clicar fora da mesma.
         *
         * @default `false`
         */
        this.clickOut = false;
        // Controla se a página está ou não oculta, por padrão é oculto.
        this.hidden = true;
        this._size = 'md';
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o tamanho da página.
     *
     * Valores válidos:
     *  - `sm` (pequeno)
     *  - `md` (médio)
     *  - `lg` (grande)
     *  - `xl` (extra-grande)
     *  - `auto` (automático)
     *
     * > Todas as opções de tamanho possuem uma largura máxima de **768px**.
     *
     * @default `md`
     */
    set size(value) {
        const sizes = ['sm', 'md', 'lg', 'xl', 'auto'];
        this._size = sizes.indexOf(value) > -1 ? value : 'md';
    }
    get size() {
        return this._size;
    }
    /**
     * Ativa a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public openPage() {
     *   this.pageSlide.open();
     * }
     * ```
     */
    open() {
        // Evita com que a página seja aberta sem que seja possível fechá-la.
        if (this.hideClose && !this.clickOut) {
            this.hideClose = false;
        }
        this.hidden = false;
    }
    /**
     * Encerra a visualização da página.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo
     * ser utilizado o `ViewChild` da seguinte forma:
     *
     * ```typescript
     * import { PoPageSlideComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoPageSlideComponent, { static: true }) pageSlide: PoPageSlideComponent;
     *
     * public closePage() {
     *   this.pageSlide.close();
     * }
     * ```
     */
    close() {
        this.hidden = true;
    }
}
PoPageSlideBaseComponent.decorators = [
    { type: Directive }
];
PoPageSlideBaseComponent.propDecorators = {
    title: [{ type: Input, args: ['p-title',] }],
    subtitle: [{ type: Input, args: ['p-subtitle',] }],
    hideClose: [{ type: Input, args: ['p-hide-close',] }],
    clickOut: [{ type: Input, args: ['p-click-out',] }],
    size: [{ type: Input, args: ['p-size',] }]
};
__decorate([
    InputBoolean()
], PoPageSlideBaseComponent.prototype, "hideClose", void 0);
__decorate([
    InputBoolean()
], PoPageSlideBaseComponent.prototype, "clickOut", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1zbGlkZS1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1wYWdlL3BvLXBhZ2Utc2xpZGUvcG8tcGFnZS1zbGlkZS1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRW5EOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRUgsTUFBTSxPQUFPLHdCQUF3QjtJQURyQztRQWdCRTs7Ozs7Ozs7OztXQVVHO1FBQ29DLGNBQVMsR0FBYSxLQUFLLENBQUM7UUFFbkU7Ozs7Ozs7O1dBUUc7UUFDbUMsYUFBUSxHQUFhLEtBQUssQ0FBQztRQUVqRSxnRUFBZ0U7UUFDekQsV0FBTSxHQUFHLElBQUksQ0FBQztRQUViLFVBQUssR0FBRyxJQUFJLENBQUM7SUE2RXZCLENBQUM7SUEzRUM7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHO0lBQ0gsSUFBcUIsSUFBSSxDQUFDLEtBQWE7UUFDckMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7T0FpQkc7SUFDSSxJQUFJO1FBQ1QscUVBQXFFO1FBQ3JFLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7U0FDeEI7UUFFRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHO0lBQ0ksS0FBSztRQUNWLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7OztZQXZIRixTQUFTOzs7b0JBT1AsS0FBSyxTQUFDLFNBQVM7dUJBT2YsS0FBSyxTQUFDLFlBQVk7d0JBYWxCLEtBQUssU0FBQyxjQUFjO3VCQVdwQixLQUFLLFNBQUMsYUFBYTttQkF5Qm5CLEtBQUssU0FBQyxRQUFROztBQXBDd0I7SUFBZixZQUFZLEVBQUU7MkRBQTZCO0FBVzdCO0lBQWYsWUFBWSxFQUFFOzBEQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vLi4vLi4vZGVjb3JhdG9ycyc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1wYWdlLXNsaWRlYCDDqSB1dGlsaXphZG8gcGFyYSBpbmNsdWlyIGNvbnRlw7pkb3Mgc2VjdW5kw6FyaW9zXG4gKiBhZGljaW9uYW5kbyBjb250cm9sZXMgZSBuYXZlZ2HDp8O1ZXMgYWRpY2lvbmFpcywgbWFzIG1hbnRlbmRvIG8gdXN1w6FyaW8gbmFcbiAqIHDDoWdpbmEgcHJpbmNpcGFsLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSDDqSBhdGl2YWRvIGEgcGFydGlyIGRvIG3DqXRvZG8gYCNvcGVuKClgIGUgcG9kZSBzZXIgIGVuY2VycmFkb1xuICogYXRyYXbDqXMgZG8gYm90w6NvIHF1ZSBlbmNvbnRyYS1zZSBubyBjYWJlw6dhbGhvIGRvIG1lc21vIG91IGF0cmF2w6lzIGRvIG3DqXRvZG9cbiAqIGAjY2xvc2UoKWAuXG4gKlxuICogPiBQYXJhIG8gY29ycmV0byBmdW5jaW9uYW1lbnRvIGRvIGNvbXBvbmVudGUgYHBvLXBhZ2Utc2xpZGVgLCBkZXZlIHNlclxuICogPiBpbXBvcnRhZG8gbyBtw7NkdWxvIGBCcm93c2VyQW5pbWF0aW9uc01vZHVsZWAgbm8gbcOzZHVsbyBwcmluY2lwYWwgZGEgc3VhXG4gKiA+IGFwbGljYcOnw6NvLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb1BhZ2VTbGlkZUJhc2VDb21wb25lbnQge1xuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFTDrXR1bG8gZGEgcMOhZ2luYS5cbiAgICovXG4gIEBJbnB1dCgncC10aXRsZScpIHRpdGxlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTdWJ0w610dWxvIGRhIHDDoWdpbmEuXG4gICAqL1xuICBASW5wdXQoJ3Atc3VidGl0bGUnKSBzdWJ0aXRsZT86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPY3VsdGEgbyBib3TDo28gZGUgZW5jZXJyYW1lbnRvIGRhIHDDoWdpbmEuXG4gICAqXG4gICAqIEVzdGEgb3DDp8OjbyBzw7Mgw6kgcG9zc8OtdmVsIHNlIGEgcHJvcHJpZWRhZGUgYHAtY2xpY2stb3V0YCBlc3RpdmVyIGhhYmlsaXRhZGEuXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1oaWRlLWNsb3NlJykgQElucHV0Qm9vbGVhbigpIGhpZGVDbG9zZT86IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgc2UgcGVybWl0ZSBvIGVuY2VycmFtZW50byBkYSBww6FnaW5hIGFvIGNsaWNhciBmb3JhIGRhIG1lc21hLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtY2xpY2stb3V0JykgQElucHV0Qm9vbGVhbigpIGNsaWNrT3V0PzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8vIENvbnRyb2xhIHNlIGEgcMOhZ2luYSBlc3TDoSBvdSBuw6NvIG9jdWx0YSwgcG9yIHBhZHLDo28gw6kgb2N1bHRvLlxuICBwdWJsaWMgaGlkZGVuID0gdHJ1ZTtcblxuICBwcml2YXRlIF9zaXplID0gJ21kJztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgbyB0YW1hbmhvIGRhIHDDoWdpbmEuXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGBzbWAgKHBlcXVlbm8pXG4gICAqICAtIGBtZGAgKG3DqWRpbylcbiAgICogIC0gYGxnYCAoZ3JhbmRlKVxuICAgKiAgLSBgeGxgIChleHRyYS1ncmFuZGUpXG4gICAqICAtIGBhdXRvYCAoYXV0b23DoXRpY28pXG4gICAqXG4gICAqID4gVG9kYXMgYXMgb3DDp8O1ZXMgZGUgdGFtYW5obyBwb3NzdWVtIHVtYSBsYXJndXJhIG3DoXhpbWEgZGUgKio3NjhweCoqLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgbWRgXG4gICAqL1xuICBASW5wdXQoJ3Atc2l6ZScpIHNldCBzaXplKHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzaXplcyA9IFsnc20nLCAnbWQnLCAnbGcnLCAneGwnLCAnYXV0byddO1xuICAgIHRoaXMuX3NpemUgPSBzaXplcy5pbmRleE9mKHZhbHVlKSA+IC0xID8gdmFsdWUgOiAnbWQnO1xuICB9XG5cbiAgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICAvKipcbiAgICogQXRpdmEgYSB2aXN1YWxpemHDp8OjbyBkYSBww6FnaW5hLlxuICAgKlxuICAgKiBQYXJhIHV0aWxpesOhLWxhIMOpIG5lY2Vzc8OhcmlvIHRlciBhIGluc3TDom5jaWEgZG8gY29tcG9uZW50ZSBubyBET00sIHBvZGVuZG9cbiAgICogc2VyIHV0aWxpemFkbyBvIGBWaWV3Q2hpbGRgIGRhIHNlZ3VpbnRlIGZvcm1hOlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGltcG9ydCB7IFBvUGFnZVNsaWRlQ29tcG9uZW50IH0gZnJvbSAnQHBvL25nLWNvbXBvbmVudHMnO1xuICAgKlxuICAgKiAuLi5cbiAgICpcbiAgICogQFZpZXdDaGlsZChQb1BhZ2VTbGlkZUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcGFnZVNsaWRlOiBQb1BhZ2VTbGlkZUNvbXBvbmVudDtcbiAgICpcbiAgICogcHVibGljIG9wZW5QYWdlKCkge1xuICAgKiAgIHRoaXMucGFnZVNsaWRlLm9wZW4oKTtcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBvcGVuKCkge1xuICAgIC8vIEV2aXRhIGNvbSBxdWUgYSBww6FnaW5hIHNlamEgYWJlcnRhIHNlbSBxdWUgc2VqYSBwb3Nzw612ZWwgZmVjaMOhLWxhLlxuICAgIGlmICh0aGlzLmhpZGVDbG9zZSAmJiAhdGhpcy5jbGlja091dCkge1xuICAgICAgdGhpcy5oaWRlQ2xvc2UgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEVuY2VycmEgYSB2aXN1YWxpemHDp8OjbyBkYSBww6FnaW5hLlxuICAgKlxuICAgKiBQYXJhIHV0aWxpesOhLWxhIMOpIG5lY2Vzc8OhcmlvIHRlciBhIGluc3TDom5jaWEgZG8gY29tcG9uZW50ZSBubyBET00sIHBvZGVuZG9cbiAgICogc2VyIHV0aWxpemFkbyBvIGBWaWV3Q2hpbGRgIGRhIHNlZ3VpbnRlIGZvcm1hOlxuICAgKlxuICAgKiBgYGB0eXBlc2NyaXB0XG4gICAqIGltcG9ydCB7IFBvUGFnZVNsaWRlQ29tcG9uZW50IH0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuICAgKlxuICAgKiAuLi5cbiAgICpcbiAgICogQFZpZXdDaGlsZChQb1BhZ2VTbGlkZUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcGFnZVNsaWRlOiBQb1BhZ2VTbGlkZUNvbXBvbmVudDtcbiAgICpcbiAgICogcHVibGljIGNsb3NlUGFnZSgpIHtcbiAgICogICB0aGlzLnBhZ2VTbGlkZS5jbG9zZSgpO1xuICAgKiB9XG4gICAqIGBgYFxuICAgKi9cbiAgcHVibGljIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgfVxufVxuIl19