import { Component, Input, TemplateRef, ViewChild } from '@angular/core';
import { PoAccordionService } from '../services/po-accordion.service';
/**
 * @description
 *
 * Componente utilizado para renderizar os itens do `po-accordion`.
 *
 * O componente `po-accordion` já faz o controle de abertura e fechamento dos itens automaticamente,
 * mas caso houver a necessidade de abrir algum dos `po-accordion-item` via Typescript, pode ser feita da seguinte forma:
 *
 * ```
 * <po-accordion>
 *   <po-accordion-item p-label="PO Accordion 1" #item1>
 *      Accordion 1
 *   </po-accordion-item>
 *
 *   <po-accordion-item p-label="PO Accordion 2">
 *      Accordion 2
 *   </po-accordion-item>
 * </po-accordion>
 * ```
 *
 * e no typescript pode-se utilizar o `@ViewChild`:
 *
 * ```
 *  @ViewChild(PoAccordionItemComponent, { static: true }) item1: PoAccordionItemComponent;
 *
 *  ngAfterContentInit() {
 *    // ou utilizar o método collapse()
 *    this.item1.expand();
 *  }
 * ```
 */
export class PoAccordionItemComponent {
    constructor(accordionService) {
        this.accordionService = accordionService;
    }
    /**
     * Método para colapsar o `po-accordion-item`.
     */
    collapse() {
        this.expanded = false;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
    /**
     * Método para expandir o `po-accordion-item`.
     */
    expand() {
        this.expanded = true;
        this.accordionService.sendToParentAccordionItemClicked(this);
    }
}
PoAccordionItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-accordion-item',
                template: "<ng-template>\n  <ng-content></ng-content>\n</ng-template>\n"
            },] }
];
PoAccordionItemComponent.ctorParameters = () => [
    { type: PoAccordionService }
];
PoAccordionItemComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    templateRef: [{ type: ViewChild, args: [TemplateRef, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWFjY29yZGlvbi9wby1hY2NvcmRpb24taXRlbS9wby1hY2NvcmRpb24taXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV0RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOEJHO0FBS0gsTUFBTSxPQUFPLHdCQUF3QjtJQVFuQyxZQUFvQixnQkFBb0M7UUFBcEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFvQjtJQUFHLENBQUM7SUFFNUQ7O09BRUc7SUFDSCxRQUFRO1FBQ04sSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFFdEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdDQUFnQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUVyQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0NBQWdDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7O1lBOUJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qix3RUFBK0M7YUFDaEQ7OztZQXBDUSxrQkFBa0I7OztvQkF1Q3hCLEtBQUssU0FBQyxTQUFTOzBCQUVmLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0FjY29yZGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wby1hY2NvcmRpb24uc2VydmljZSc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSB1dGlsaXphZG8gcGFyYSByZW5kZXJpemFyIG9zIGl0ZW5zIGRvIGBwby1hY2NvcmRpb25gLlxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tYWNjb3JkaW9uYCBqw6EgZmF6IG8gY29udHJvbGUgZGUgYWJlcnR1cmEgZSBmZWNoYW1lbnRvIGRvcyBpdGVucyBhdXRvbWF0aWNhbWVudGUsXG4gKiBtYXMgY2FzbyBob3V2ZXIgYSBuZWNlc3NpZGFkZSBkZSBhYnJpciBhbGd1bSBkb3MgYHBvLWFjY29yZGlvbi1pdGVtYCB2aWEgVHlwZXNjcmlwdCwgcG9kZSBzZXIgZmVpdGEgZGEgc2VndWludGUgZm9ybWE6XG4gKlxuICogYGBgXG4gKiA8cG8tYWNjb3JkaW9uPlxuICogICA8cG8tYWNjb3JkaW9uLWl0ZW0gcC1sYWJlbD1cIlBPIEFjY29yZGlvbiAxXCIgI2l0ZW0xPlxuICogICAgICBBY2NvcmRpb24gMVxuICogICA8L3BvLWFjY29yZGlvbi1pdGVtPlxuICpcbiAqICAgPHBvLWFjY29yZGlvbi1pdGVtIHAtbGFiZWw9XCJQTyBBY2NvcmRpb24gMlwiPlxuICogICAgICBBY2NvcmRpb24gMlxuICogICA8L3BvLWFjY29yZGlvbi1pdGVtPlxuICogPC9wby1hY2NvcmRpb24+XG4gKiBgYGBcbiAqXG4gKiBlIG5vIHR5cGVzY3JpcHQgcG9kZS1zZSB1dGlsaXphciBvIGBAVmlld0NoaWxkYDpcbiAqXG4gKiBgYGBcbiAqICBAVmlld0NoaWxkKFBvQWNjb3JkaW9uSXRlbUNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgaXRlbTE6IFBvQWNjb3JkaW9uSXRlbUNvbXBvbmVudDtcbiAqXG4gKiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICogICAgLy8gb3UgdXRpbGl6YXIgbyBtw6l0b2RvIGNvbGxhcHNlKClcbiAqICAgIHRoaXMuaXRlbTEuZXhwYW5kKCk7XG4gKiAgfVxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWFjY29yZGlvbi1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICdwby1hY2NvcmRpb24taXRlbS5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9BY2NvcmRpb25JdGVtQ29tcG9uZW50IHtcbiAgLyoqIFTDrXR1bG8gZG8gaXRlbS4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICBAVmlld0NoaWxkKFRlbXBsYXRlUmVmLCB7IHN0YXRpYzogdHJ1ZSB9KSB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55PjtcblxuICBleHBhbmRlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjY29yZGlvblNlcnZpY2U6IFBvQWNjb3JkaW9uU2VydmljZSkge31cblxuICAvKipcbiAgICogTcOpdG9kbyBwYXJhIGNvbGFwc2FyIG8gYHBvLWFjY29yZGlvbi1pdGVtYC5cbiAgICovXG4gIGNvbGxhcHNlKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuYWNjb3JkaW9uU2VydmljZS5zZW5kVG9QYXJlbnRBY2NvcmRpb25JdGVtQ2xpY2tlZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNw6l0b2RvIHBhcmEgZXhwYW5kaXIgbyBgcG8tYWNjb3JkaW9uLWl0ZW1gLlxuICAgKi9cbiAgZXhwYW5kKCkge1xuICAgIHRoaXMuZXhwYW5kZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5hY2NvcmRpb25TZXJ2aWNlLnNlbmRUb1BhcmVudEFjY29yZGlvbkl0ZW1DbGlja2VkKHRoaXMpO1xuICB9XG59XG4iXX0=