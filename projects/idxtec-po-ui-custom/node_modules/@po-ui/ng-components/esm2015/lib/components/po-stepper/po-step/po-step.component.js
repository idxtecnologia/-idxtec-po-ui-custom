import { Component, ElementRef, Input } from '@angular/core';
import { uuid } from '../../../utils/util';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
/**
 * @description
 *
 * O componente `po-step` é utilizado para envolver e renderizar o conteúdo de um passo (*step*) do `po-stepper`, por exemplo:
 *
 * ```
 * <po-stepper>
 *
 *    <po-step p-label="Endereço">
 *
 *        <!-- Conteúdo referente ao endereço -->
 *
 *    </po-step>
 *
 *    <po-step p-label="Pagamento">
 *
 *        <!-- Conteúdo referente ao pagamento -->
 *
 *    </po-step>
 *
 *  </po-stepper>
 * ```
 *
 * A renderização do conteúdo envolvido na tela e o controle dos status são feitos automaticamente. No qual, o primeiro
 * `po-step` encontrado será colocado como ativo, o próximo fica com o status *default* e os demais ficam
 * desabilitados (*disabled*).
 *
 * Ao clicar no `po-step` que está com o status *default*, o que está ativo ficará com o
 * status de concluído (*done*) e o próximo que estava desabilitado ficará com o status *default* e o restante permanecerá
 * com o status desabilitado.
 *
 * > Ao utilizar o `po-step`, o componente `po-stepper` funcionará de forma sequencial, ou seja, não será possível
 * pular para outro `po-step` que esteja com o status igual a desabilitado (*disabled*).
 *
 * Acesse a [documentação do `po-stepper`](/documentation/po-stepper) para ter mais informações sobre o seu funcionamento
 * e exemplos de uso.
 */
export class PoStepComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // ID do step
        this.id = uuid();
        this._status = PoStepperStatus.Disabled;
    }
    // Estado de exibição do `po-step`.
    set status(status) {
        this._status = status;
        this.setDisplayOnActiveOrError();
    }
    get status() {
        return this._status;
    }
    ngAfterContentInit() {
        this.setDisplayOnActiveOrError();
    }
    setDisplayOnActiveOrError() {
        this.elementRef.nativeElement.style.display =
            this.status === PoStepperStatus.Active || this.status === PoStepperStatus.Error ? '' : 'none';
    }
}
PoStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-step',
                template: "<ng-content></ng-content>\n"
            },] }
];
PoStepComponent.ctorParameters = () => [
    { type: ElementRef }
];
PoStepComponent.propDecorators = {
    canActiveNextStep: [{ type: Input, args: ['p-can-active-next-step',] }],
    label: [{ type: Input, args: ['p-label',] }],
    status: [{ type: Input, args: ['p-status',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tc3RlcHBlci9wby1zdGVwL3BvLXN0ZXAuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0UsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0NHO0FBS0gsTUFBTSxPQUFPLGVBQWU7SUErQzFCLFlBQW9CLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFoQjFDLGFBQWE7UUFDYixPQUFFLEdBQVksSUFBSSxFQUFFLENBQUM7UUFFYixZQUFPLEdBQXFCLGVBQWUsQ0FBQyxRQUFRLENBQUM7SUFhaEIsQ0FBQztJQVg5QyxtQ0FBbUM7SUFDbkMsSUFBdUIsTUFBTSxDQUFDLE1BQXVCO1FBQ25ELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBRXRCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUlELGtCQUFrQjtRQUNoQixJQUFJLENBQUMseUJBQXlCLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRVMseUJBQXlCO1FBQ2pDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPO1lBQ3pDLElBQUksQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0lBQ2xHLENBQUM7OztZQTVERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLFNBQVM7Z0JBQ25CLHVDQUFxQzthQUN0Qzs7O1lBL0NxQyxVQUFVOzs7Z0NBd0U3QyxLQUFLLFNBQUMsd0JBQXdCO29CQUs5QixLQUFLLFNBQUMsU0FBUztxQkFRZixLQUFLLFNBQUMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgdXVpZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1N0ZXBwZXJTdGF0dXMgfSBmcm9tICcuLi9lbnVtcy9wby1zdGVwcGVyLXN0YXR1cy5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgYHBvLXN0ZXBgIMOpIHV0aWxpemFkbyBwYXJhIGVudm9sdmVyIGUgcmVuZGVyaXphciBvIGNvbnRlw7pkbyBkZSB1bSBwYXNzbyAoKnN0ZXAqKSBkbyBgcG8tc3RlcHBlcmAsIHBvciBleGVtcGxvOlxuICpcbiAqIGBgYFxuICogPHBvLXN0ZXBwZXI+XG4gKlxuICogICAgPHBvLXN0ZXAgcC1sYWJlbD1cIkVuZGVyZcOnb1wiPlxuICpcbiAqICAgICAgICA8IS0tIENvbnRlw7pkbyByZWZlcmVudGUgYW8gZW5kZXJlw6dvIC0tPlxuICpcbiAqICAgIDwvcG8tc3RlcD5cbiAqXG4gKiAgICA8cG8tc3RlcCBwLWxhYmVsPVwiUGFnYW1lbnRvXCI+XG4gKlxuICogICAgICAgIDwhLS0gQ29udGXDumRvIHJlZmVyZW50ZSBhbyBwYWdhbWVudG8gLS0+XG4gKlxuICogICAgPC9wby1zdGVwPlxuICpcbiAqICA8L3BvLXN0ZXBwZXI+XG4gKiBgYGBcbiAqXG4gKiBBIHJlbmRlcml6YcOnw6NvIGRvIGNvbnRlw7pkbyBlbnZvbHZpZG8gbmEgdGVsYSBlIG8gY29udHJvbGUgZG9zIHN0YXR1cyBzw6NvIGZlaXRvcyBhdXRvbWF0aWNhbWVudGUuIE5vIHF1YWwsIG8gcHJpbWVpcm9cbiAqIGBwby1zdGVwYCBlbmNvbnRyYWRvIHNlcsOhIGNvbG9jYWRvIGNvbW8gYXRpdm8sIG8gcHLDs3hpbW8gZmljYSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgb3MgZGVtYWlzIGZpY2FtXG4gKiBkZXNhYmlsaXRhZG9zICgqZGlzYWJsZWQqKS5cbiAqXG4gKiBBbyBjbGljYXIgbm8gYHBvLXN0ZXBgIHF1ZSBlc3TDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqLCBvIHF1ZSBlc3TDoSBhdGl2byBmaWNhcsOhIGNvbSBvXG4gKiBzdGF0dXMgZGUgY29uY2x1w61kbyAoKmRvbmUqKSBlIG8gcHLDs3hpbW8gcXVlIGVzdGF2YSBkZXNhYmlsaXRhZG8gZmljYXLDoSBjb20gbyBzdGF0dXMgKmRlZmF1bHQqIGUgbyByZXN0YW50ZSBwZXJtYW5lY2Vyw6FcbiAqIGNvbSBvIHN0YXR1cyBkZXNhYmlsaXRhZG8uXG4gKlxuICogPiBBbyB1dGlsaXphciBvIGBwby1zdGVwYCwgbyBjb21wb25lbnRlIGBwby1zdGVwcGVyYCBmdW5jaW9uYXLDoSBkZSBmb3JtYSBzZXF1ZW5jaWFsLCBvdSBzZWphLCBuw6NvIHNlcsOhIHBvc3PDrXZlbFxuICogcHVsYXIgcGFyYSBvdXRybyBgcG8tc3RlcGAgcXVlIGVzdGVqYSBjb20gbyBzdGF0dXMgaWd1YWwgYSBkZXNhYmlsaXRhZG8gKCpkaXNhYmxlZCopLlxuICpcbiAqIEFjZXNzZSBhIFtkb2N1bWVudGHDp8OjbyBkbyBgcG8tc3RlcHBlcmBdKC9kb2N1bWVudGF0aW9uL3BvLXN0ZXBwZXIpIHBhcmEgdGVyIG1haXMgaW5mb3JtYcOnw7VlcyBzb2JyZSBvIHNldSBmdW5jaW9uYW1lbnRvXG4gKiBlIGV4ZW1wbG9zIGRlIHVzby5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tc3RlcCcsXG4gIHRlbXBsYXRlVXJsOiAncG8tc3RlcC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9TdGVwQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEZ1bsOnw6NvIGNoYW1hZGEgcXVhbmRvIG8gcHLDs3hpbW8gKnN0ZXAqIGZvciBjbGljYWRvIG91IHF1YW5kbyBvIG3DqXRvZG8gYFBvU3RlcHBlckNvbXBvbmVudC5uZXh0KClgIGZvciBjaGFtYWRvLlxuICAgKiBBbyByZXRvcm5hciBgdHJ1ZWAgZGVmaW5lIHF1ZSBlc3NlICpzdGVwKiBmaWNhcsOhIGF0aXZvIGUgbyBhdHVhbCBjb21vIGNvbmNsdcOtZG8gKCpkb25lKikuXG4gICAqIFRhbWLDqW0gYWNlaXRhIGZ1bsOnw7VlcyBxdWUgcmV0b3JuZW0gYE9ic2VydmFibGU8Ym9vbGVhbj5gLiBBbyByZXRvcm5hciB1bSBgT2JzZXJ2YWJsZTxib29sZWFuPmAsXG4gICAqIGdhcmFudGEgcXVlIGVzc2UgYE9ic2VydmFibGVgIHNlcsOhIGNvbXBsZXRhZG8sIGNhc28gaG91dmVyIGFsZ3VtIGVycm8gZHVyYW50ZSBvIHByb2Nlc3NvIG7Do28gc2Vyw6EgcG9zc8OtdmVsIHByb3NzZWd1aXJcbiAgICogYW8gcHLDs3hpbW8gKnN0ZXAqLlxuICAgKlxuICAgKiBBbyBzZXIgZGlzcGFyYWRhLCBhIG1lc21hIHJlY2ViZXLDoSBwb3IgcGFyw6JtZXRybyBvIGBQb1N0ZXBDb21wb25lbnRgIGF0dWFsLlxuICAgKlxuICAgKiBPIGNvbnRleHRvIGRhIGZ1bsOnw6NvIHF1ZSBzZXLDoSBjaGFtYWRhLCBzZXLDoSBvIG1lc21vIHF1ZSBvIGRvIGBQb1N0ZXBDb21wb25lbnRgLCBlbnTDo28gcGFyYSBwb2RlciBhbHRlcmFyXG4gICAqIHBhcmEgbyBjb250ZXh0byBkbyBjb21wb25lbnRlIHF1ZSBvIGVzdMOhIHV0aWxpemFuZG8sIHBvZGUgc2VyIHV0aWxpemFkbyBhIHByb3ByaWVkYWRlIGBiaW5kYCBkbyBKYXZhc2NyaXB0LlxuICAgKiBQb3IgZXhlbXBsbywgcGFyYSBhIGZ1bsOnw6NvIGB2YWxpZGF0ZWA6XG4gICAqXG4gICAqIGBgYFxuICAgKiA8cG8tc3RlcCBwLWxhYmVsPVwiU3RlcCAxXCIgW3AtY2FuLWFjdGl2ZS1uZXh0LXN0ZXBdPVwidmFsaWRhdGUuYmluZCh0aGlzKVwiPlxuICAgKiAuLi5cbiAgICogPC9wby1zdGVwPlxuICAgKiBgYGBcbiAgICovXG4gIEBJbnB1dCgncC1jYW4tYWN0aXZlLW5leHQtc3RlcCcpIGNhbkFjdGl2ZU5leHRTdGVwOlxuICAgIHwgKChjdXJyZW50U3RlcCkgPT4gYm9vbGVhbilcbiAgICB8ICgoY3VycmVudFN0ZXApID0+IE9ic2VydmFibGU8Ym9vbGVhbj4pO1xuXG4gIC8qKiBUw610dWxvIHF1ZSBzZXLDoSBleGliaWRvIGRlc2NyZXZlbmRvIG8gcGFzc28gKCpzdGVwKikuICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsOiBzdHJpbmc7XG5cbiAgLy8gSUQgZG8gc3RlcFxuICBpZD86IHN0cmluZyA9IHV1aWQoKTtcblxuICBwcml2YXRlIF9zdGF0dXM/OiBQb1N0ZXBwZXJTdGF0dXMgPSBQb1N0ZXBwZXJTdGF0dXMuRGlzYWJsZWQ7XG5cbiAgLy8gRXN0YWRvIGRlIGV4aWJpw6fDo28gZG8gYHBvLXN0ZXBgLlxuICBASW5wdXQoJ3Atc3RhdHVzJykgc2V0IHN0YXR1cyhzdGF0dXM6IFBvU3RlcHBlclN0YXR1cykge1xuICAgIHRoaXMuX3N0YXR1cyA9IHN0YXR1cztcblxuICAgIHRoaXMuc2V0RGlzcGxheU9uQWN0aXZlT3JFcnJvcigpO1xuICB9XG5cbiAgZ2V0IHN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnNldERpc3BsYXlPbkFjdGl2ZU9yRXJyb3IoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXREaXNwbGF5T25BY3RpdmVPckVycm9yKCkge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPVxuICAgICAgdGhpcy5zdGF0dXMgPT09IFBvU3RlcHBlclN0YXR1cy5BY3RpdmUgfHwgdGhpcy5zdGF0dXMgPT09IFBvU3RlcHBlclN0YXR1cy5FcnJvciA/ICcnIDogJ25vbmUnO1xuICB9XG59XG4iXX0=