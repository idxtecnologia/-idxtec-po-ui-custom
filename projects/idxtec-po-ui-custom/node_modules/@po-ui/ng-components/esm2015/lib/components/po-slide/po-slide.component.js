import { Component, ContentChild, HostListener, ViewChild, ViewChildren } from '@angular/core';
import { animate, AnimationBuilder, keyframes, style } from '@angular/animations';
import { Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { PoSlideBaseComponent } from './po-slide-base.component';
import { PoSlideContentTemplateDirective } from './directives/po-slide-content-template.directive';
import { PoSlideItemComponent } from './po-slide-item/po-slide-item.component';
const poSlideDefaultHeight = 336;
const poSlideIntervalMin = 1000;
const poSlideMinHeight = 192;
const poSlideTiming = '250ms ease';
/**
 * @docsExtends PoSlideBaseComponent
 *
 * @example
 * <example name="po-slide-basic" title="PO Slide Basic">
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.html"> </file>
 *   <file name="sample-po-slide-basic/sample-po-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-labs" title="PO Slide Labs">
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.html"> </file>
 *   <file name="sample-po-slide-labs/sample-po-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-useful-articles" title="PO Slide - Useful articles">
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.html"> </file>
 *   <file name="sample-po-slide-useful-articles/sample-po-slide-useful-articles.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-landscapes" title="PO Slide - Landscapes">
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.html"> </file>
 *   <file name="sample-po-slide-landscapes/sample-po-slide-landscapes.component.ts"> </file>
 * </example>
 *
 * <example name="po-slide-external-controls" title="PO Slide - External Controls">
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.html"> </file>
 *  <file name="sample-po-slide-external-controls/sample-po-slide-external-controls.component.ts"> </file>
 * </example>
 */
export class PoSlideComponent extends PoSlideBaseComponent {
    constructor(builder) {
        super();
        this.builder = builder;
        this.currentSlideIndex = 0;
        this.slideItems = [];
        this.isLoaded = false;
        this.resize$ = new Subject();
    }
    get hasElements() {
        return !!this.slide.nativeElement.offsetWidth && !!this.itemsElements && !!this.itemsElements.length;
    }
    get isImageSlide() {
        return !this.slideContentTemplate;
    }
    get offset() {
        return this.currentSlideIndex * this.slideItemWidth;
    }
    get hasSlides() {
        return !!this.slides && !!this.slides.length;
    }
    onResize() {
        this.resize$.next();
    }
    ngOnInit() {
        this.resizeSubscription = this.resize$.pipe(debounceTime(150)).subscribe(() => {
            this.setSlideItemWidth();
            this.goToItem(this.currentSlideIndex);
        });
    }
    ngDoCheck() {
        if (!this.isLoaded && this.hasElements) {
            this.setSlideItemWidth();
            this.isLoaded = true;
            if (this.hasSlides) {
                this.startSlide();
            }
        }
    }
    ngOnChanges(changes) {
        if (changes.height) {
            this.setSlideHeight(this.height);
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.resizeSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    /**
     * Método que retorna o index do slide atual
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *  myFunction() {
     *    let currentIndex = this.slideComponent.getCurrentSlideIndex();
     * }
     *
     * ```
     */
    getCurrentSlideIndex() {
        return this.currentSlideIndex;
    }
    goToItem(index) {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = index;
        this.animate(this.offset);
    }
    nextControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.next();
    }
    /**
     * Método para chamar o próximo slide.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.next();
     * }
     * ```
     */
    next() {
        if (this.currentSlideIndex + 1 === this.slideItems.length) {
            this.currentSlideIndex = 0;
            this.animate(0);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex + 1) % this.slideItems.length;
        this.animate(this.offset);
    }
    /**
     * Método para chamar o slide anterior.
     *
     * ```
     * @ViewChild('slideComponent', { static: true }) slideComponent: PoSlideComponent;
     *
     * myFunction() {
     *  this.slideComponent.previous();
     * }
     * ```
     */
    previous() {
        if (this.currentSlideIndex === 0) {
            this.currentSlideIndex = this.slideItems.length - 1;
            this.animate(this.offset);
            return;
        }
        this.currentSlideIndex = (this.currentSlideIndex - 1 + this.slideItems.length) % this.slideItems.length;
        this.animate(this.offset);
    }
    previousControl() {
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.previous();
    }
    setSlideHeight(height) {
        this.setHeight(height);
    }
    cancelInterval() {
        clearInterval(this.setInterval);
    }
    setSlideItems(slides) {
        if (this.hasSlides) {
            this.slideContentTemplate ? this.createArrayForTemplate(slides) : this.createArrayFromSlides(slides);
        }
        else {
            this.slideItems = [];
            this.cancelInterval();
        }
    }
    startSlide() {
        this.setSlideHeight(this.height);
        if (this.interval > poSlideIntervalMin) {
            this.startInterval();
        }
        this.currentSlideIndex = 0;
    }
    startInterval() {
        if (this.setInterval) {
            this.cancelInterval();
        }
        this.setInterval =
            this.hasSlides && this.hasElements
                ? setInterval(() => {
                    this.next();
                }, this.interval)
                : undefined;
    }
    animate(offset) {
        if (this.hasElements) {
            const animation = this.buildTransitionAnimation(offset);
            this.player = animation.create(this.slide.nativeElement);
            this.player.play();
        }
    }
    buildTransitionAnimation(offset) {
        return this.builder.build([animate(poSlideTiming, keyframes([style({ transform: `translateX(-${offset}px)` })]))]);
    }
    createArrayForTemplate(slides) {
        this.slideItems = [...slides];
    }
    createArrayFromSlides(slides) {
        const isStringArray = slides.every(item => typeof item === 'string');
        if (isStringArray) {
            slides.forEach(element => this.slideItems.push({ image: `${element}` }));
        }
        else {
            this.slideItems = [...slides];
        }
    }
    setDefaultHeight(height) {
        if ((height && height <= poSlideMinHeight) || (!height && this.isImageSlide)) {
            this.slide.nativeElement.style.height = `${poSlideDefaultHeight}px`;
            this.imageHeight = poSlideDefaultHeight;
        }
        else {
            this.imageHeight = undefined;
        }
    }
    setHeight(height) {
        if (height && height > poSlideMinHeight) {
            this.slide.nativeElement.style.height = `${height}px`;
            this.imageHeight = height;
        }
        else {
            this.setDefaultHeight(height);
        }
    }
    setSlideItemWidth() {
        if (this.hasElements) {
            this.slideItemWidth = this.itemsElements.first.itemElement.nativeElement.getBoundingClientRect().width;
        }
    }
}
PoSlideComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-slide',
                template: "<div class=\"po-slide-wrapper\">\n  <div class=\"po-slide-outer\">\n    <div class=\"po-slide-inner\" #slide>\n      <ng-container *ngFor=\"let item of slideItems; let index = index\">\n        <po-slide-item\n          [p-action]=\"item.action\"\n          [p-data]=\"item\"\n          [p-image]=\"item.image\"\n          [p-image-height]=\"imageHeight\"\n          [p-template]=\"slideContentTemplate\"\n          [p-alt]=\"item.alt\"\n          [p-link]=\"item.link\"\n        >\n        </po-slide-item>\n      </ng-container>\n    </div>\n\n    <po-slide-control\n      *ngIf=\"!hideArrows && hasSlides && slides.length > 1\"\n      p-control=\"previous\"\n      (p-click)=\"previousControl()\"\n    >\n    </po-slide-control>\n\n    <po-slide-control *ngIf=\"!hideArrows && hasSlides && slides.length > 1\" p-control=\"next\" (p-click)=\"nextControl()\">\n    </po-slide-control>\n  </div>\n\n  <po-slide-circles\n    *ngIf=\"hasSlides && slides.length > 1\"\n    [p-current-slide-index]=\"currentSlideIndex\"\n    [p-items]=\"slideItems\"\n    (p-click)=\"goToItem($event)\"\n  >\n  </po-slide-circles>\n</div>\n"
            },] }
];
PoSlideComponent.ctorParameters = () => [
    { type: AnimationBuilder }
];
PoSlideComponent.propDecorators = {
    slideContentTemplate: [{ type: ContentChild, args: [PoSlideContentTemplateDirective, { static: true },] }],
    slide: [{ type: ViewChild, args: ['slide', { static: true },] }],
    itemsElements: [{ type: ViewChildren, args: [PoSlideItemComponent,] }],
    onResize: [{ type: HostListener, args: ['window:resize',] }]
};
//# sourceMappingURL=data:application/json;base64,