import { Component, Input } from '@angular/core';
import { PoStepperStatus } from '../enums/po-stepper-status.enum';
const poMediumStepSize = 32;
const poLargeStepSize = 48;
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir os círculos dos *steps*.
 */
export class PoStepperCircleComponent {
    get isActive() {
        return this.status === PoStepperStatus.Active;
    }
    get isDefault() {
        return this.status === PoStepperStatus.Default;
    }
    get isDisabled() {
        return this.status === PoStepperStatus.Disabled;
    }
    get isDone() {
        return this.status === PoStepperStatus.Done;
    }
    get isError() {
        return this.status === PoStepperStatus.Error;
    }
    get isLargeStep() {
        return this.size >= poLargeStepSize;
    }
    get isMediumStep() {
        return this.size >= poMediumStepSize && !this.isLargeStep;
    }
}
PoStepperCircleComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-stepper-circle',
                template: "<div class=\"po-stepper-circle\" [style.height.px]=\"size\" [style.width.px]=\"size\" [tabindex]=\"isDisabled ? -1 : 0\">\n  <span\n    *ngIf=\"!isActive\"\n    class=\"po-stepper-circle-content\"\n    [class.po-icon]=\"icons || isDone\"\n    [class.po-icon-exclamation]=\"icons && isError\"\n    [class.po-icon-info]=\"icons && (isActive || isDefault || isDisabled)\"\n    [class.po-icon-ok]=\"isDone\"\n    [class.po-stepper-circle-content-lg]=\"isLargeStep\"\n    [class.po-stepper-circle-content-md]=\"isMediumStep\"\n  >\n    {{ !icons && !isDone ? content : '' }}\n  </span>\n\n  <div *ngIf=\"isActive || isError\" class=\"po-stepper-circle-active\"></div>\n</div>\n"
            },] }
];
PoStepperCircleComponent.propDecorators = {
    content: [{ type: Input, args: ['p-content',] }],
    icons: [{ type: Input, args: ['p-icons',] }],
    size: [{ type: Input, args: ['p-size',] }],
    status: [{ type: Input, args: ['p-status',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc3RlcHBlci1jaXJjbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXN0ZXBwZXIvcG8tc3RlcHBlci1jaXJjbGUvcG8tc3RlcHBlci1jaXJjbGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVsRSxNQUFNLGdCQUFnQixHQUFHLEVBQUUsQ0FBQztBQUM1QixNQUFNLGVBQWUsR0FBRyxFQUFFLENBQUM7QUFFM0I7Ozs7OztHQU1HO0FBS0gsTUFBTSxPQUFPLHdCQUF3QjtJQWFuQyxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLE1BQU0sQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxPQUFPLENBQUM7SUFDakQsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsUUFBUSxDQUFDO0lBQ2xELENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxNQUFNLEtBQUssZUFBZSxDQUFDLElBQUksQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsTUFBTSxLQUFLLGVBQWUsQ0FBQyxLQUFLLENBQUM7SUFDL0MsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxlQUFlLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBSSxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7SUFDNUQsQ0FBQzs7O1lBM0NGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qiw0cUJBQWlEO2FBQ2xEOzs7c0JBR0UsS0FBSyxTQUFDLFdBQVc7b0JBR2pCLEtBQUssU0FBQyxTQUFTO21CQUdmLEtBQUssU0FBQyxRQUFRO3FCQUdkLEtBQUssU0FBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb1N0ZXBwZXJTdGF0dXMgfSBmcm9tICcuLi9lbnVtcy9wby1zdGVwcGVyLXN0YXR1cy5lbnVtJztcblxuY29uc3QgcG9NZWRpdW1TdGVwU2l6ZSA9IDMyO1xuY29uc3QgcG9MYXJnZVN0ZXBTaXplID0gNDg7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIGV4aWJpciBvcyBjw61yY3Vsb3MgZG9zICpzdGVwcyouXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXN0ZXBwZXItY2lyY2xlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXN0ZXBwZXItY2lyY2xlLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1N0ZXBwZXJDaXJjbGVDb21wb25lbnQge1xuICAvLyBDb250ZcO6ZG8gcXVlIGlyw6EgYXBhcmVjZXIgbm8gY8OtcmN1bG8gZG8gKnN0ZXAqLlxuICBASW5wdXQoJ3AtY29udGVudCcpIGNvbnRlbnQ6IGFueTtcblxuICAvLyBEZWZpbmUgc2Ugc2Vyw6NvIGV4aWJpZG9zIMOtY29uZXMgbm8gbHVnYXIgZGUgbsO6bWVyb3Mgbm9zIHN0ZXBzLlxuICBASW5wdXQoJ3AtaWNvbnMnKSBpY29uczogYm9vbGVhbjtcblxuICAvLyBUYW1hbmhvIGRvICpzdGVwLWNpcmNsZSouXG4gIEBJbnB1dCgncC1zaXplJykgc2l6ZTogbnVtYmVyO1xuXG4gIC8vIFN0YXR1cyBkbyAqc3RlcCouXG4gIEBJbnB1dCgncC1zdGF0dXMnKSBzdGF0dXM6IHN0cmluZztcblxuICBnZXQgaXNBY3RpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzID09PSBQb1N0ZXBwZXJTdGF0dXMuQWN0aXZlO1xuICB9XG5cbiAgZ2V0IGlzRGVmYXVsdCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IFBvU3RlcHBlclN0YXR1cy5EZWZhdWx0O1xuICB9XG5cbiAgZ2V0IGlzRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzID09PSBQb1N0ZXBwZXJTdGF0dXMuRGlzYWJsZWQ7XG4gIH1cblxuICBnZXQgaXNEb25lKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXR1cyA9PT0gUG9TdGVwcGVyU3RhdHVzLkRvbmU7XG4gIH1cblxuICBnZXQgaXNFcnJvcigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IFBvU3RlcHBlclN0YXR1cy5FcnJvcjtcbiAgfVxuXG4gIGdldCBpc0xhcmdlU3RlcCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID49IHBvTGFyZ2VTdGVwU2l6ZTtcbiAgfVxuXG4gIGdldCBpc01lZGl1bVN0ZXAoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc2l6ZSA+PSBwb01lZGl1bVN0ZXBTaXplICYmICF0aGlzLmlzTGFyZ2VTdGVwO1xuICB9XG59XG4iXX0=