import { Injectable } from '@angular/core';
const poCalendarServiceFirstWeekDayDefault = 0;
export class PoCalendarService {
    monthDates(year, month, dayFormatter = null, weekFormatter = null) {
        if (typeof month !== 'number' || month < 0 || month > 11) {
            throw Error('month must be a number (Jan is 0)');
        }
        const weeks = [];
        let week = [];
        let i = 0;
        let date = new Date(year, month, 1);
        if (year >= 0 && year < 100) {
            date.setFullYear(year);
        }
        date = this.weekStartDate(date);
        do {
            for (i = 0; i < 7; i++) {
                week.push(dayFormatter ? dayFormatter(date) : date);
                date = new Date(date.getTime());
                date.setDate(date.getDate() + 1);
            }
            weeks.push(weekFormatter ? weekFormatter(week) : week);
            week = [];
        } while (date.getMonth() <= month && date.getFullYear() === year);
        return weeks;
    }
    monthDays(year, month) {
        const getDayOrZero = function (date) {
            return date.getMonth() === month ? date : 0;
        };
        return this.monthDates(year, month, getDayOrZero);
    }
    weekStartDate(date) {
        const startDate = new Date(date.getTime());
        while (startDate.getDay() !== poCalendarServiceFirstWeekDayDefault) {
            startDate.setDate(startDate.getDate() - 1);
        }
        return startDate;
    }
}
PoCalendarService.decorators = [
    { type: Injectable }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jYWxlbmRhci9zZXJ2aWNlcy9wby1jYWxlbmRhci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsTUFBTSxvQ0FBb0MsR0FBVyxDQUFDLENBQUM7QUFHdkQsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixVQUFVLENBQUMsSUFBUyxFQUFFLEtBQVUsRUFBRSxlQUFvQixJQUFJLEVBQUUsZ0JBQXFCLElBQUk7UUFDbkYsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxFQUFFO1lBQ3hELE1BQU0sS0FBSyxDQUFDLG1DQUFtQyxDQUFDLENBQUM7U0FDbEQ7UUFFRCxNQUFNLEtBQUssR0FBZSxFQUFFLENBQUM7UUFDN0IsSUFBSSxJQUFJLEdBQWUsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFcEMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksR0FBRyxHQUFHLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4QjtRQUVELElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWhDLEdBQUc7WUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BELElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDbEM7WUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN2RCxJQUFJLEdBQUcsRUFBRSxDQUFDO1NBQ1gsUUFBUSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEUsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVMsRUFBRSxLQUFVO1FBQzdCLE1BQU0sWUFBWSxHQUFHLFVBQVUsSUFBUztZQUN0QyxPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQztRQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRCxhQUFhLENBQUMsSUFBUztRQUNyQixNQUFNLFNBQVMsR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUMzQyxPQUFPLFNBQVMsQ0FBQyxNQUFNLEVBQUUsS0FBSyxvQ0FBb0MsRUFBRTtZQUNsRSxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUM1QztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7OztZQTNDRixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCBwb0NhbGVuZGFyU2VydmljZUZpcnN0V2Vla0RheURlZmF1bHQ6IG51bWJlciA9IDA7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0NhbGVuZGFyU2VydmljZSB7XG4gIG1vbnRoRGF0ZXMoeWVhcjogYW55LCBtb250aDogYW55LCBkYXlGb3JtYXR0ZXI6IGFueSA9IG51bGwsIHdlZWtGb3JtYXR0ZXI6IGFueSA9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIG1vbnRoICE9PSAnbnVtYmVyJyB8fCBtb250aCA8IDAgfHwgbW9udGggPiAxMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ21vbnRoIG11c3QgYmUgYSBudW1iZXIgKEphbiBpcyAwKScpO1xuICAgIH1cblxuICAgIGNvbnN0IHdlZWtzOiBBcnJheTxhbnk+ID0gW107XG4gICAgbGV0IHdlZWs6IEFycmF5PGFueT4gPSBbXTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSh5ZWFyLCBtb250aCwgMSk7XG5cbiAgICBpZiAoeWVhciA+PSAwICYmIHllYXIgPCAxMDApIHtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhcik7XG4gICAgfVxuXG4gICAgZGF0ZSA9IHRoaXMud2Vla1N0YXJ0RGF0ZShkYXRlKTtcblxuICAgIGRvIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgd2Vlay5wdXNoKGRheUZvcm1hdHRlciA/IGRheUZvcm1hdHRlcihkYXRlKSA6IGRhdGUpO1xuICAgICAgICBkYXRlID0gbmV3IERhdGUoZGF0ZS5nZXRUaW1lKCkpO1xuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyAxKTtcbiAgICAgIH1cbiAgICAgIHdlZWtzLnB1c2god2Vla0Zvcm1hdHRlciA/IHdlZWtGb3JtYXR0ZXIod2VlaykgOiB3ZWVrKTtcbiAgICAgIHdlZWsgPSBbXTtcbiAgICB9IHdoaWxlIChkYXRlLmdldE1vbnRoKCkgPD0gbW9udGggJiYgZGF0ZS5nZXRGdWxsWWVhcigpID09PSB5ZWFyKTtcbiAgICByZXR1cm4gd2Vla3M7XG4gIH1cblxuICBtb250aERheXMoeWVhcjogYW55LCBtb250aDogYW55KSB7XG4gICAgY29uc3QgZ2V0RGF5T3JaZXJvID0gZnVuY3Rpb24gKGRhdGU6IGFueSkge1xuICAgICAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKSA9PT0gbW9udGggPyBkYXRlIDogMDtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLm1vbnRoRGF0ZXMoeWVhciwgbW9udGgsIGdldERheU9yWmVybyk7XG4gIH1cblxuICB3ZWVrU3RhcnREYXRlKGRhdGU6IGFueSkge1xuICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpKTtcbiAgICB3aGlsZSAoc3RhcnREYXRlLmdldERheSgpICE9PSBwb0NhbGVuZGFyU2VydmljZUZpcnN0V2Vla0RheURlZmF1bHQpIHtcbiAgICAgIHN0YXJ0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgLSAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0RGF0ZTtcbiAgfVxufVxuIl19