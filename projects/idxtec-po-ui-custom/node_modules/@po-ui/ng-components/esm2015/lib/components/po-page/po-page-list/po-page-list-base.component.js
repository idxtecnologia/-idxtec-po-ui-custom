import { Input, Directive, ViewChild } from '@angular/core';
import { poLocaleDefault } from './../../../services/po-language/po-language.constant';
import { PoLanguageService } from './../../../services/po-language/po-language.service';
import { PoPageContentComponent } from '../po-page-content/po-page-content.component';
export const poPageListLiteralsDefault = {
    en: {
        otherActions: 'Other actions'
    },
    es: {
        otherActions: 'Otras acciones'
    },
    pt: {
        otherActions: 'Outras ações'
    },
    ru: {
        otherActions: 'Другие действия'
    }
};
/**
 * @description
 *
 * O componente `po-page-list` é utilizado como o container principal para as telas de listagem de dados,
 * podendo ser apresentado como lista ou tabela.
 *
 * Este componente possibilita realizar filtro dos dados, no qual permite que seja atribuido uma função que será executada no momento
 * da filtragem. Este comportamento pode ser acionado tanto ao *click* do ícone [po-icon-search](/guides/icons)
 * quanto ao pressionar da tecla *ENTER* quando o foco estiver no campo de pesquisa.
 *
 * Para facilitar a manipulação e visualização dos filtros aplicados, é possível também utilizar o componente
 * [`po-disclaimer-group`](/documentation/po-disclaimer-group).
 */
export class PoPageListBaseComponent {
    constructor(languageService) {
        this.visibleActions = [];
        this._actions = [];
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`.
     */
    set actions(actions) {
        this._actions = Array.isArray(actions) ? actions : [];
        this.visibleActions = this.actions.filter(action => action.visible !== false);
        this.setDropdownActions();
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto que implementa as propriedades da interface `PoDisclaimerGroup`.
     */
    set disclaimerGroup(value) {
        if (!value) {
            value = {};
        }
        this._disclaimerGroup = value;
    }
    get disclaimerGroup() {
        return this._disclaimerGroup;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-list`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Mais ações'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageListLiterals = {
     *    otherActions: 'Ações da página'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-list
     *   [p-literals]="customLiterals">
     * </po-page-list>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageListLiteralsDefault[poLocaleDefault]), poPageListLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageListLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poPageListLiteralsDefault[this.language];
    }
    /** Título da página. */
    set title(title) {
        this._title = title;
        setTimeout(() => this.poPageContent.recalculateHeaderSize());
    }
    get title() {
        return this._title;
    }
}
PoPageListBaseComponent.decorators = [
    { type: Directive }
];
PoPageListBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoPageListBaseComponent.propDecorators = {
    poPageContent: [{ type: ViewChild, args: [PoPageContentComponent, { static: true },] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    filter: [{ type: Input, args: ['p-filter',] }],
    actions: [{ type: Input, args: ['p-actions',] }],
    disclaimerGroup: [{ type: Input, args: ['p-disclaimer-group',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    title: [{ type: Input, args: ['p-title',] }]
};
//# sourceMappingURL=data:application/json;base64,