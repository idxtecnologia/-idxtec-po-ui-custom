import { Input, Directive } from '@angular/core';
import { convertToBoolean } from './../../utils/util';
/**
 * @description
 *
 * O componente `po-dropdown` pode ser utilizado como um agrupador de ações e / ou opções.
 *
 * > Caso não haja configuração de rotas em sua aplicação, se faz necessário importar o `RouterModule`
 * no módulo principal para o correto funcionamento deste componente:
 *
 * ```
 * import { RouterModule } from '@angular/router';
 *
 * @NgModule({
 *   imports: [
 *     ...
 *     RouterModule.forRoot([]),
 *     PoModule
 *   ],
 *   declarations: [
 *     AppComponent
 *   ],
 *   exports: [],
 *   providers: [],
 *   bootstrap: [
 *     AppComponent
 *   ]
 * })
 * export class AppModule { }
 * ```
 * > Para maiores dúvidas referente à configuração de rotas, acesse em nosso portal /Guias /Começando
 * [/Configurando as rotas do po-menu](/guides/getting-started).
 */
export class PoDropdownBaseComponent {
    constructor() {
        this.icon = 'po-icon-arrow-down';
        this.open = false;
        this._disabled = false;
    }
    /** Lista de ações que serão exibidas no componente. */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Desabilita o campo.
     *
     * @default `false`
     */
    set disabled(value) {
        this._disabled = convertToBoolean(value);
    }
    get disabled() {
        return this._disabled;
    }
}
PoDropdownBaseComponent.decorators = [
    { type: Directive }
];
PoDropdownBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    actions: [{ type: Input, args: ['p-actions',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZHJvcGRvd24tYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZHJvcGRvd24vcG8tZHJvcGRvd24tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJdEQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQThCRztBQUdILE1BQU0sT0FBTyx1QkFBdUI7SUFEcEM7UUFLRSxTQUFJLEdBQVcsb0JBQW9CLENBQUM7UUFDcEMsU0FBSSxHQUFZLEtBQUssQ0FBQztRQUdkLGNBQVMsR0FBWSxLQUFLLENBQUM7SUEyQnJDLENBQUM7SUF6QkMsdURBQXVEO0lBQ3ZELElBQXdCLE9BQU8sQ0FBQyxLQUE4QjtRQUM1RCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ3BELENBQUM7SUFFRCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBeUIsUUFBUSxDQUFDLEtBQWM7UUFDOUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3hCLENBQUM7OztZQW5DRixTQUFTOzs7b0JBR1AsS0FBSyxTQUFDLFNBQVM7c0JBU2YsS0FBSyxTQUFDLFdBQVc7dUJBaUJqQixLQUFLLFNBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvRHJvcGRvd25BY3Rpb24gfSBmcm9tICcuL3BvLWRyb3Bkb3duLWFjdGlvbi5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIE8gY29tcG9uZW50ZSBgcG8tZHJvcGRvd25gIHBvZGUgc2VyIHV0aWxpemFkbyBjb21vIHVtIGFncnVwYWRvciBkZSBhw6fDtWVzIGUgLyBvdSBvcMOnw7Vlcy5cbiAqXG4gKiA+IENhc28gbsOjbyBoYWphIGNvbmZpZ3VyYcOnw6NvIGRlIHJvdGFzIGVtIHN1YSBhcGxpY2HDp8Ojbywgc2UgZmF6IG5lY2Vzc8OhcmlvIGltcG9ydGFyIG8gYFJvdXRlck1vZHVsZWBcbiAqIG5vIG3Ds2R1bG8gcHJpbmNpcGFsIHBhcmEgbyBjb3JyZXRvIGZ1bmNpb25hbWVudG8gZGVzdGUgY29tcG9uZW50ZTpcbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG4gKlxuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC4uLlxuICogICAgIFJvdXRlck1vZHVsZS5mb3JSb290KFtdKSxcbiAqICAgICBQb01vZHVsZVxuICogICBdLFxuICogICBkZWNsYXJhdGlvbnM6IFtcbiAqICAgICBBcHBDb21wb25lbnRcbiAqICAgXSxcbiAqICAgZXhwb3J0czogW10sXG4gKiAgIHByb3ZpZGVyczogW10sXG4gKiAgIGJvb3RzdHJhcDogW1xuICogICAgIEFwcENvbXBvbmVudFxuICogICBdXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7IH1cbiAqIGBgYFxuICogPiBQYXJhIG1haW9yZXMgZMO6dmlkYXMgcmVmZXJlbnRlIMOgIGNvbmZpZ3VyYcOnw6NvIGRlIHJvdGFzLCBhY2Vzc2UgZW0gbm9zc28gcG9ydGFsIC9HdWlhcyAvQ29tZcOnYW5kb1xuICogWy9Db25maWd1cmFuZG8gYXMgcm90YXMgZG8gcG8tbWVudV0oL2d1aWRlcy9nZXR0aW5nLXN0YXJ0ZWQpLlxuICovXG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvRHJvcGRvd25CYXNlQ29tcG9uZW50IHtcbiAgLyoqIEFkaWNpb25hIHVtIHLDs3R1bG8gYW8gYGRyb3Bkb3duYC4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICBpY29uOiBzdHJpbmcgPSAncG8taWNvbi1hcnJvdy1kb3duJztcbiAgb3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX2FjdGlvbnM6IEFycmF5PFBvRHJvcGRvd25BY3Rpb24+O1xuICBwcml2YXRlIF9kaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBMaXN0YSBkZSBhw6fDtWVzIHF1ZSBzZXLDo28gZXhpYmlkYXMgbm8gY29tcG9uZW50ZS4gKi9cbiAgQElucHV0KCdwLWFjdGlvbnMnKSBzZXQgYWN0aW9ucyh2YWx1ZTogQXJyYXk8UG9Ecm9wZG93bkFjdGlvbj4pIHtcbiAgICB0aGlzLl9hY3Rpb25zID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICB9XG5cbiAgZ2V0IGFjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FjdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZXNhYmlsaXRhIG8gY2FtcG8uXG4gICAqXG4gICAqIEBkZWZhdWx0IGBmYWxzZWBcbiAgICovXG4gIEBJbnB1dCgncC1kaXNhYmxlZCcpIHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG59XG4iXX0=