import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { PoDateService } from '../../services/po-date';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { poLocales } from '../../services/po-language/po-language.constant';
import { PoCalendarMode } from './po-calendar-mode.enum';
/**
 * @description
 *
 * O `po-calendar` é um componente para seleção de datas. Ele permite uma fácil navegação clicando nas setas
 * de direcionamento e nos *labels* do ano ou mês.
 *
 * Este componente pode receber os seguintes formatos de data:
 *
 * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
 * ```
 * this.date = '2017-11-28T00:00:00-02:00';
 * ```
 *
 * - **Data (E8601DAw.): yyyy-mm-dd**
 * ```
 * this.date = '2017-11-28';
 * ```
 *
 * - **JavaScript Date Object:**
 * ```
 * this.date = new Date(2017, 10, 28);
 * ```
 *
 * > Independentemente do formato utilizado, o componente trata o valor do *model* internamente com o
 * formato **Data (E8601DAw.): yyyy-mm-dd**.
 *
 * Importante:
 *
 * - Caso seja definida uma data fora do range da data mínima e data máxima via *ngModel* o componente mostrará
 * a data desabilitada porém o *model* não será alterado.
 * - Caso seja definida uma data inválida a mesma não será atribuída ao calendário porém o *model* manterá a data inválida.
 */
export class PoCalendarBaseComponent {
    constructor(poDate, languageService) {
        this.poDate = poDate;
        this.languageService = languageService;
        /** Evento disparado ao selecionar um dia do calendário. */
        this.change = new EventEmitter();
        this.onTouched = null;
        this.propagateChange = null;
        this.today = new Date();
        this._locale = this.languageService.getShortLanguage();
        this.shortLanguage = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Idioma do calendário.
     *
     * > O locale padrão sera recuperado com base no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set locale(locale) {
        this._locale = poLocales.includes(locale) ? locale : this.shortLanguage;
    }
    get locale() {
        return this._locale;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data máxima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set maxDate(maxDate) {
        this._maxDate = this.poDate.getDateForDateRange(maxDate, false);
    }
    get maxDate() {
        return this._maxDate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a data mínima possível de ser selecionada.
     *
     * Pode receber os seguintes formatos de data:
     *
     * - **Data e hora combinados (E8601DZw): yyyy-mm-ddThh:mm:ss+|-hh:mm**
     * ```
     * this.date = '2017-11-28T00:00:00-02:00';
     * ```
     *
     * - **Data (E8601DAw.): yyyy-mm-dd**
     * ```
     * this.date = '2017-11-28';
     * ```
     *
     * - **JavaScript Date Object:**
     * ```
     * this.date = new Date(2017, 10, 28);
     * ```
     */
    set minDate(minDate) {
        this._minDate = this.poDate.getDateForDateRange(minDate, true);
    }
    get minDate() {
        return this._minDate;
    }
    /**
     * Propriedade que permite informar o modo de exibição do calendar.
     *
     * Implementa o enum `PoCalendarMode`.
     */
    set mode(value) {
        this._mode = value;
        this.setActivateDate();
    }
    get mode() {
        return this._mode;
    }
    get isRange() {
        return this.mode === PoCalendarMode.Range;
    }
    setActivateDate(date) {
        const activateDate = date ? date : this.verifyActivateDate();
        if (this.isRange) {
            const checkedStart = typeof activateDate === 'string' ? this.poDate.convertIsoToDate(activateDate) : new Date(activateDate);
            const checkedEnd = new Date(new Date(checkedStart).setMonth(checkedStart.getMonth() + 1));
            this.activateDate = { start: checkedStart, end: checkedEnd };
        }
        else {
            this.activateDate = new Date(activateDate);
        }
    }
    verifyActivateDate() {
        let today = this.today;
        if (this.minDate && this.minDate > this.today) {
            today = this.minDate;
        }
        else if (this.maxDate && this.maxDate < this.today) {
            today = this.maxDate;
        }
        return today;
    }
}
PoCalendarBaseComponent.decorators = [
    { type: Directive }
];
PoCalendarBaseComponent.ctorParameters = () => [
    { type: PoDateService },
    { type: PoLanguageService }
];
PoCalendarBaseComponent.propDecorators = {
    change: [{ type: Output, args: ['p-change',] }],
    locale: [{ type: Input, args: ['p-locale',] }],
    maxDate: [{ type: Input, args: ['p-max-date',] }],
    minDate: [{ type: Input, args: ['p-min-date',] }],
    mode: [{ type: Input, args: ['p-mode',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tY2FsZW5kYXIvcG8tY2FsZW5kYXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDbkYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBRTVFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUV6RDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQStCRztBQUVILE1BQU0sT0FBTyx1QkFBdUI7SUFrSGxDLFlBQW1CLE1BQXFCLEVBQVUsZUFBa0M7UUFBakUsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFtQjtRQWpIcEYsMkRBQTJEO1FBQ3ZDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBMkIsQ0FBQztRQUsvRCxjQUFTLEdBQVEsSUFBSSxDQUFDO1FBQ3RCLG9CQUFlLEdBQVEsSUFBSSxDQUFDO1FBQzVCLFVBQUssR0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBRzNCLFlBQU8sR0FBVyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUF1R2hFLElBQUksQ0FBQyxhQUFhLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUQsQ0FBQztJQW5HRDs7Ozs7Ozs7T0FRRztJQUNILElBQXVCLE1BQU0sQ0FBQyxNQUFjO1FBQzFDLElBQUks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S0FBSyxTQUFDLFlBQVk7c0JBK0JsQixLQUFLLFNBQUMsWUFBWTttQkFZbEIsS0FBSyxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcG8tZGF0ZSc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgcG9Mb2NhbGVzIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvcG8tbGFuZ3VhZ2UvcG8tbGFuZ3VhZ2UuY29uc3RhbnQnO1xuXG5pbXBvcnQgeyBQb0NhbGVuZGFyTW9kZSB9IGZyb20gJy4vcG8tY2FsZW5kYXItbW9kZS5lbnVtJztcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGBwby1jYWxlbmRhcmAgw6kgdW0gY29tcG9uZW50ZSBwYXJhIHNlbGXDp8OjbyBkZSBkYXRhcy4gRWxlIHBlcm1pdGUgdW1hIGbDoWNpbCBuYXZlZ2HDp8OjbyBjbGljYW5kbyBuYXMgc2V0YXNcbiAqIGRlIGRpcmVjaW9uYW1lbnRvIGUgbm9zICpsYWJlbHMqIGRvIGFubyBvdSBtw6pzLlxuICpcbiAqIEVzdGUgY29tcG9uZW50ZSBwb2RlIHJlY2ViZXIgb3Mgc2VndWludGVzIGZvcm1hdG9zIGRlIGRhdGE6XG4gKlxuICogLSAqKkRhdGEgZSBob3JhIGNvbWJpbmFkb3MgKEU4NjAxRFp3KTogeXl5eS1tbS1kZFRoaDptbTpzcyt8LWhoOm1tKipcbiAqIGBgYFxuICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjhUMDA6MDA6MDAtMDI6MDAnO1xuICogYGBgXG4gKlxuICogLSAqKkRhdGEgKEU4NjAxREF3Lik6IHl5eXktbW0tZGQqKlxuICogYGBgXG4gKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOCc7XG4gKiBgYGBcbiAqXG4gKiAtICoqSmF2YVNjcmlwdCBEYXRlIE9iamVjdDoqKlxuICogYGBgXG4gKiB0aGlzLmRhdGUgPSBuZXcgRGF0ZSgyMDE3LCAxMCwgMjgpO1xuICogYGBgXG4gKlxuICogPiBJbmRlcGVuZGVudGVtZW50ZSBkbyBmb3JtYXRvIHV0aWxpemFkbywgbyBjb21wb25lbnRlIHRyYXRhIG8gdmFsb3IgZG8gKm1vZGVsKiBpbnRlcm5hbWVudGUgY29tIG9cbiAqIGZvcm1hdG8gKipEYXRhIChFODYwMURBdy4pOiB5eXl5LW1tLWRkKiouXG4gKlxuICogSW1wb3J0YW50ZTpcbiAqXG4gKiAtIENhc28gc2VqYSBkZWZpbmlkYSB1bWEgZGF0YSBmb3JhIGRvIHJhbmdlIGRhIGRhdGEgbcOtbmltYSBlIGRhdGEgbcOheGltYSB2aWEgKm5nTW9kZWwqIG8gY29tcG9uZW50ZSBtb3N0cmFyw6FcbiAqIGEgZGF0YSBkZXNhYmlsaXRhZGEgcG9yw6ltIG8gKm1vZGVsKiBuw6NvIHNlcsOhIGFsdGVyYWRvLlxuICogLSBDYXNvIHNlamEgZGVmaW5pZGEgdW1hIGRhdGEgaW52w6FsaWRhIGEgbWVzbWEgbsOjbyBzZXLDoSBhdHJpYnXDrWRhIGFvIGNhbGVuZMOhcmlvIHBvcsOpbSBvICptb2RlbCogbWFudGVyw6EgYSBkYXRhIGludsOhbGlkYS5cbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9DYWxlbmRhckJhc2VDb21wb25lbnQge1xuICAvKiogRXZlbnRvIGRpc3BhcmFkbyBhbyBzZWxlY2lvbmFyIHVtIGRpYSBkbyBjYWxlbmTDoXJpby4gKi9cbiAgQE91dHB1dCgncC1jaGFuZ2UnKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IHsgc3RhcnQ7IGVuZCB9PigpO1xuXG4gIGFjdGl2YXRlRGF0ZTtcbiAgdmFsdWU7XG5cbiAgcHJvdGVjdGVkIG9uVG91Y2hlZDogYW55ID0gbnVsbDtcbiAgcHJvdGVjdGVkIHByb3BhZ2F0ZUNoYW5nZTogYW55ID0gbnVsbDtcbiAgcHJvdGVjdGVkIHRvZGF5OiBEYXRlID0gbmV3IERhdGUoKTtcblxuICBwcml2YXRlIHNob3J0TGFuZ3VhZ2U6IHN0cmluZztcbiAgcHJpdmF0ZSBfbG9jYWxlOiBzdHJpbmcgPSB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gIHByaXZhdGUgX21heERhdGU6IERhdGU7XG4gIHByaXZhdGUgX21pbkRhdGU6IERhdGU7XG4gIHByaXZhdGUgX21vZGU6IFBvQ2FsZW5kYXJNb2RlO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIElkaW9tYSBkbyBjYWxlbmTDoXJpby5cbiAgICpcbiAgICogPiBPIGxvY2FsZSBwYWRyw6NvIHNlcmEgcmVjdXBlcmFkbyBjb20gYmFzZSBubyBbYFBvSTE4blNlcnZpY2VgXSgvZG9jdW1lbnRhdGlvbi9wby1pMThuKSBvdSAqYnJvd3NlciouXG4gICAqL1xuICBASW5wdXQoJ3AtbG9jYWxlJykgc2V0IGxvY2FsZShsb2NhbGU6IHN0cmluZykge1xuICAgIHRoaXMuX2xvY2FsZSA9IHBvTG9jYWxlcy5pbmNsdWRlcyhsb2NhbGUpID8gbG9jYWxlIDogdGhpcy5zaG9ydExhbmd1YWdlO1xuICB9XG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGRhdGEgbcOheGltYSBwb3Nzw612ZWwgZGUgc2VyIHNlbGVjaW9uYWRhLlxuICAgKlxuICAgKiBQb2RlIHJlY2ViZXIgb3Mgc2VndWludGVzIGZvcm1hdG9zIGRlIGRhdGE6XG4gICAqXG4gICAqIC0gKipEYXRhIGUgaG9yYSBjb21iaW5hZG9zIChFODYwMURadyk6IHl5eXktbW0tZGRUaGg6bW06c3MrfC1oaDptbSoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOFQwMDowMDowMC0wMjowMCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqRGF0YSAoRTg2MDFEQXcuKTogeXl5eS1tbS1kZCoqXG4gICAqIGBgYFxuICAgKiB0aGlzLmRhdGUgPSAnMjAxNy0xMS0yOCc7XG4gICAqIGBgYFxuICAgKlxuICAgKiAtICoqSmF2YVNjcmlwdCBEYXRlIE9iamVjdDoqKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gbmV3IERhdGUoMjAxNywgMTAsIDI4KTtcbiAgICogYGBgXG4gICAqL1xuICBASW5wdXQoJ3AtbWF4LWRhdGUnKSBzZXQgbWF4RGF0ZShtYXhEYXRlOiBhbnkpIHtcbiAgICB0aGlzLl9tYXhEYXRlID0gdGhpcy5wb0RhdGUuZ2V0RGF0ZUZvckRhdGVSYW5nZShtYXhEYXRlLCBmYWxzZSk7XG4gIH1cbiAgZ2V0IG1heERhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21heERhdGU7XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZpbmUgYSBkYXRhIG3DrW5pbWEgcG9zc8OtdmVsIGRlIHNlciBzZWxlY2lvbmFkYS5cbiAgICpcbiAgICogUG9kZSByZWNlYmVyIG9zIHNlZ3VpbnRlcyBmb3JtYXRvcyBkZSBkYXRhOlxuICAgKlxuICAgKiAtICoqRGF0YSBlIGhvcmEgY29tYmluYWRvcyAoRTg2MDFEWncpOiB5eXl5LW1tLWRkVGhoOm1tOnNzK3wtaGg6bW0qKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjhUMDA6MDA6MDAtMDI6MDAnO1xuICAgKiBgYGBcbiAgICpcbiAgICogLSAqKkRhdGEgKEU4NjAxREF3Lik6IHl5eXktbW0tZGQqKlxuICAgKiBgYGBcbiAgICogdGhpcy5kYXRlID0gJzIwMTctMTEtMjgnO1xuICAgKiBgYGBcbiAgICpcbiAgICogLSAqKkphdmFTY3JpcHQgRGF0ZSBPYmplY3Q6KipcbiAgICogYGBgXG4gICAqIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKDIwMTcsIDEwLCAyOCk7XG4gICAqIGBgYFxuICAgKi9cbiAgQElucHV0KCdwLW1pbi1kYXRlJykgc2V0IG1pbkRhdGUobWluRGF0ZTogYW55KSB7XG4gICAgdGhpcy5fbWluRGF0ZSA9IHRoaXMucG9EYXRlLmdldERhdGVGb3JEYXRlUmFuZ2UobWluRGF0ZSwgdHJ1ZSk7XG4gIH1cbiAgZ2V0IG1pbkRhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21pbkRhdGU7XG4gIH1cblxuICAvKipcbiAgICogUHJvcHJpZWRhZGUgcXVlIHBlcm1pdGUgaW5mb3JtYXIgbyBtb2RvIGRlIGV4aWJpw6fDo28gZG8gY2FsZW5kYXIuXG4gICAqXG4gICAqIEltcGxlbWVudGEgbyBlbnVtIGBQb0NhbGVuZGFyTW9kZWAuXG4gICAqL1xuICBASW5wdXQoJ3AtbW9kZScpIHNldCBtb2RlKHZhbHVlOiBQb0NhbGVuZGFyTW9kZSkge1xuICAgIHRoaXMuX21vZGUgPSB2YWx1ZTtcblxuICAgIHRoaXMuc2V0QWN0aXZhdGVEYXRlKCk7XG4gIH1cblxuICBnZXQgbW9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbW9kZTtcbiAgfVxuXG4gIGdldCBpc1JhbmdlKCkge1xuICAgIHJldHVybiB0aGlzLm1vZGUgPT09IFBvQ2FsZW5kYXJNb2RlLlJhbmdlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHVibGljIHBvRGF0ZTogUG9EYXRlU2VydmljZSwgcHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7XG4gICAgdGhpcy5zaG9ydExhbmd1YWdlID0gbGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBzZXRBY3RpdmF0ZURhdGUoZGF0ZT86IERhdGUgfCBzdHJpbmcpIHtcbiAgICBjb25zdCBhY3RpdmF0ZURhdGUgPSBkYXRlID8gZGF0ZSA6IHRoaXMudmVyaWZ5QWN0aXZhdGVEYXRlKCk7XG5cbiAgICBpZiAodGhpcy5pc1JhbmdlKSB7XG4gICAgICBjb25zdCBjaGVja2VkU3RhcnQgPVxuICAgICAgICB0eXBlb2YgYWN0aXZhdGVEYXRlID09PSAnc3RyaW5nJyA/IHRoaXMucG9EYXRlLmNvbnZlcnRJc29Ub0RhdGUoYWN0aXZhdGVEYXRlKSA6IG5ldyBEYXRlKGFjdGl2YXRlRGF0ZSk7XG4gICAgICBjb25zdCBjaGVja2VkRW5kID0gbmV3IERhdGUobmV3IERhdGUoY2hlY2tlZFN0YXJ0KS5zZXRNb250aChjaGVja2VkU3RhcnQuZ2V0TW9udGgoKSArIDEpKTtcbiAgICAgIHRoaXMuYWN0aXZhdGVEYXRlID0geyBzdGFydDogY2hlY2tlZFN0YXJ0LCBlbmQ6IGNoZWNrZWRFbmQgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hY3RpdmF0ZURhdGUgPSBuZXcgRGF0ZShhY3RpdmF0ZURhdGUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdmVyaWZ5QWN0aXZhdGVEYXRlKCk6IERhdGUge1xuICAgIGxldCB0b2RheSA9IHRoaXMudG9kYXk7XG4gICAgaWYgKHRoaXMubWluRGF0ZSAmJiB0aGlzLm1pbkRhdGUgPiB0aGlzLnRvZGF5KSB7XG4gICAgICB0b2RheSA9IHRoaXMubWluRGF0ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMubWF4RGF0ZSAmJiB0aGlzLm1heERhdGUgPCB0aGlzLnRvZGF5KSB7XG4gICAgICB0b2RheSA9IHRoaXMubWF4RGF0ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRvZGF5O1xuICB9XG59XG4iXX0=