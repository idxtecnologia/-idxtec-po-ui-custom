import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
import { requiredFailed } from '../validators';
import { InputBoolean } from '../../../decorators';
import { PoRichTextService } from './po-rich-text.service';
/**
 * @description
 *
 * O componente `po-rich-text` é um editor de textos enriquecidos.
 *
 * Para edição de texto simples sem formatação recomenda-se o uso do componente [**po-textarea**](/documentation/po-textarea).
 *
 * > No navegador Internet Explorer não é possível alterar a cor do texto.
 */
export class PoRichTextBaseComponent {
    constructor(richTextService) {
        this.richTextService = richTextService;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @description
         *
         * Mensagem que será apresentada quando a propriedade required estiver habilitada e o campo for limpo após algo ser digitado.
         */
        this.errorMessage = '';
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao deixar o campo e que recebe como parâmetro o valor alterado.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao modificar valor do model e que recebe como parâmetro o valor alterado.
         */
        this.changeModel = new EventEmitter();
        this.invalid = false;
        this.onChangeModel = null;
        // eslint-disable-next-line
        this.onTouched = null;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura da área de edição de texto.
     *
     * > Altura mínima do componente é `94` e a altura máxima é `262`.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Mensagem que aparecerá enquanto o campo não estiver preenchido.
     *
     * @default ''
     */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(value) {
        this._readonly = convertToBoolean(value);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * @default `false`
     */
    set required(value) {
        this._required = convertToBoolean(value);
        this.validateModel(this.value);
    }
    get required() {
        return this._required;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangeModel = func;
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(fn) {
        this.validatorChange = fn;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, false, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
    }
    writeValue(value) {
        this.value = value;
        this.richTextService.emitModel(value);
    }
    // Executa a função onChange
    updateModel(value) {
        // Quando o rich-text não possui um formulário, então esta função não é registrada
        if (this.onChangeModel) {
            this.onChangeModel(value);
        }
    }
    validateModel(value) {
        if (this.validatorChange) {
            this.validatorChange(value);
        }
    }
}
PoRichTextBaseComponent.decorators = [
    { type: Directive }
];
PoRichTextBaseComponent.ctorParameters = () => [
    { type: PoRichTextService }
];
PoRichTextBaseComponent.propDecorators = {
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    errorMessage: [{ type: Input, args: ['p-error-message',] }],
    help: [{ type: Input, args: ['p-help',] }],
    label: [{ type: Input, args: ['p-label',] }],
    name: [{ type: Input, args: ['name',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    change: [{ type: Output, args: ['p-change',] }],
    changeModel: [{ type: Output, args: ['p-change-model',] }],
    height: [{ type: Input, args: ['p-height',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    required: [{ type: Input, args: ['p-required',] }]
};
__decorate([
    InputBoolean()
], PoRichTextBaseComponent.prototype, "autoFocus", void 0);
//# sourceMappingURL=data:application/json;base64,