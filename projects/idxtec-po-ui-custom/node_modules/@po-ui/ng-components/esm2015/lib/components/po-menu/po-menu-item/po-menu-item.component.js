import { Component, Input, ViewChild } from '@angular/core';
import { convertToInt, convertToBoolean } from '../../../utils/util';
import { PoMenuItemsService } from '../services/po-menu-items.service';
// valor para que caibam 3 linhas de `label`
const poMenuItemSubItemSize = 98;
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que implementa cada item do po-menu.
 */
export class PoMenuItemComponent {
    constructor(menuItemsService) {
        this.menuItemsService = menuItemsService;
        this.maxHeight = 0;
        this._isSelected = false;
        this._isSubItem = false;
    }
    // Valor do badge.
    set badgeValue(badgeValue) {
        this._badgeValue = convertToInt(badgeValue);
    }
    get badgeValue() {
        return this._badgeValue;
    }
    // Indica se o item está selecionado.
    set isSelected(value) {
        this._isSelected = convertToBoolean(value);
        this.isSelectedSubItem = this.isSelected && this.isSubItem;
    }
    get isSelected() {
        return this._isSelected;
    }
    // Indica se o item é um sub item
    set isSubItem(value) {
        this._isSubItem = convertToBoolean(value);
    }
    get isSubItem() {
        return this._isSubItem;
    }
    // Lista de sub-items.
    set subItems(subitems) {
        this._subItems = subitems;
        if (this.isOpened) {
            this.calcMenuSubItemsMaxHeight();
        }
    }
    get subItems() {
        return this._subItems;
    }
    get canShowBadge() {
        return this.type !== 'subItems' && (this.badgeValue || this.badgeValue === 0) && this.badgeValue >= 0;
    }
    ngOnDestroy() {
        this.itemSubscription.unsubscribe();
    }
    ngOnInit() {
        // subscribe to menu component messages
        this.itemSubscription = this.menuItemsService.receiveFromParentMenuClicked().subscribe(menu => {
            this.processMenuItem(menu);
        });
    }
    clickMenuItem(event) {
        if (!(event.ctrlKey || event.metaKey)) {
            event.preventDefault();
            // Emmit to parent
            this.menuItemsService.sendToParentMenuClicked({
                link: this.link,
                action: this.action,
                id: this.id,
                icon: this.icon,
                label: this.label,
                level: this.level,
                subItems: this.subItems,
                isSelected: this.isSelected,
                isOpened: this.isOpened,
                shortLabel: this.shortLabel,
                type: this.type
            });
        }
    }
    accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute) {
        if (this.id === menuOpened['id']) {
            this.maxHeight = this.subItems.length * poMenuItemSubItemSize;
        }
        if (hasSubItemOpened) {
            this.maxHeight = menuOpened['isOpened']
                ? this.maxHeight + menuOpened.subItems.length * poMenuItemSubItemSize
                : this.maxHeight - menuOpened.subItems.length * poMenuItemSubItemSize;
            if (activatedByRoute) {
                this.maxHeight = this.getMinimumHeight(0, this, menuActive);
            }
        }
    }
    activateMenu(menu) {
        this.isSelected = menu && this.id === menu.id;
    }
    calcMenuSubItemsMaxHeight() {
        setTimeout(() => {
            const subItems = Array.from(this.menuSubItems.nativeElement.querySelectorAll('.po-menu-item'));
            subItems.forEach((menuItem) => (this.maxHeight += menuItem.offsetHeight));
        });
    }
    getMinimumHeight(minimumHeight, menuItem, menuActive) {
        minimumHeight += poMenuItemSubItemSize;
        if (menuItem.subItems && this.hasSubItem(menuItem.subItems, menuActive['id'])) {
            for (let index = 0; index < menuItem.subItems.length; index++) {
                minimumHeight = this.getMinimumHeight(minimumHeight, menuItem.subItems[index], menuActive);
            }
        }
        return minimumHeight;
    }
    groupedMenu(menuActive, menuOpened, activatedByRoute = false) {
        const hasSubItemOpened = menuOpened && this.id !== menuOpened['id'] ? this.hasSubItem(this.subItems, menuOpened['id']) : false;
        this.isOpened = this.isMenuOpened(menuOpened, hasSubItemOpened);
        this.isSelected = menuActive && !this.isOpened ? this.hasSubItem(this.subItems, menuActive['id']) : false;
        if (!this.isOpened) {
            this.maxHeight = 0;
            return;
        }
        this.accordionAnimation(menuActive, menuOpened, hasSubItemOpened, activatedByRoute);
    }
    hasSubItem(subItems, id) {
        if (subItems) {
            return subItems.some(item => (item['id'] === id ? true : this.hasSubItem(item.subItems, id)));
        }
    }
    isMenuOpened(menuOpened, hasSubItemOpened) {
        if (menuOpened) {
            return this.id === menuOpened['id'] ? menuOpened['isOpened'] : hasSubItemOpened;
        }
        return false;
    }
    processMenuItem(menu) {
        if (this.type === 'internalLink') {
            this.activateMenu(menu.active);
            return;
        }
        if (this.type === 'subItems') {
            this.groupedMenu(menu.active, menu.grouped, menu.activatedByRoute);
        }
    }
}
PoMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-menu-item',
                template: "<!-- menu com link interno -->\n<a *ngIf=\"type === 'internalLink'\" class=\"po-menu-item-link\" [routerLink]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com link externo -->\n<a *ngIf=\"type === 'externalLink'\" class=\"po-menu-item-link\" [href]=\"link\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu sem link -->\n<a *ngIf=\"type === 'noLink'\" class=\"po-menu-item-link\" href=\"javascript:;\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n</a>\n<!-- menu com sub itens -->\n<div *ngIf=\"type === 'subItems'\" class=\"po-menu-item-link po-clickable\">\n  <ng-container *ngTemplateOutlet=\"menuItemTemplate\"></ng-container>\n  <div #menuSubItems class=\"po-menu-sub-items\" [hidden]=\"collapsedMenu\" [style.maxHeight.px]=\"maxHeight\">\n    <div *ngFor=\"let subItem of subItems\">\n      <po-menu-item\n        p-is-sub-item\n        [p-action]=\"subItem.action\"\n        [p-badge-alert]=\"subItem.badgeAlert\"\n        [p-badge-color]=\"subItem.badge ? subItem.badge.color : undefined\"\n        [p-badge-value]=\"subItem.badge ? subItem.badge.value : undefined\"\n        [p-id]=\"subItem.id\"\n        [p-label]=\"subItem.label\"\n        [p-level]=\"subItem.level\"\n        [p-link]=\"subItem.link\"\n        [p-sub-items]=\"subItem.subItems\"\n        [p-type]=\"subItem.type\"\n      >\n      </po-menu-item>\n    </div>\n  </div>\n</div>\n\n<ng-template #menuItemTemplate>\n  <div\n    class=\"po-menu-item\"\n    [class.po-menu-icon-container]=\"level === 1 && icon\"\n    [class.po-menu-item-selected]=\"isSelected\"\n    [class.po-menu-item-level-two]=\"level === 2\"\n    [class.po-menu-item-level-three]=\"level === 3\"\n    [class.po-menu-item-level-four]=\"level === 4\"\n    [class.po-menu-item-grouper-up]=\"type === 'subItems' && isOpened\"\n    [class.po-menu-item-grouper-down]=\"type === 'subItems' && !isOpened\"\n    [class.po-menu-sub-item-selected]=\"isSelectedSubItem\"\n    (click)=\"clickMenuItem($event)\"\n  >\n    <po-badge\n      *ngIf=\"canShowBadge\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-align' : 'po-menu-badge-align-collapsed'\"\n      [p-color]=\"badgeColor\"\n      [p-value]=\"badgeValue\"\n    >\n    </po-badge>\n    <po-icon *ngIf=\"level === 1 && icon\" class=\"po-menu-icon-item\" [p-icon]=\"icon\"></po-icon>\n    <div\n      *ngIf=\"badgeAlert\"\n      class=\"po-color-07\"\n      [ngClass]=\"!collapsedMenu ? 'po-menu-badge-alert' : 'po-menu-badge-alert-collapsed'\"\n    ></div>\n    <span\n      *ngIf=\"type === 'subItems' && !collapsedMenu\"\n      class=\"po-icon po-menu-group-icon\"\n      [class.po-icon-arrow-up]=\"isOpened\"\n      [class.po-icon-arrow-down]=\"!isOpened\"\n    >\n    </span>\n    <div [class.po-menu-icon-label]=\"level === 1 && icon\">\n      {{ label }}\n    </div>\n    <div *ngIf=\"collapsedMenu\" class=\"po-menu-short-label\">{{ shortLabel }}</div>\n  </div>\n</ng-template>\n"
            },] }
];
PoMenuItemComponent.ctorParameters = () => [
    { type: PoMenuItemsService }
];
PoMenuItemComponent.propDecorators = {
    action: [{ type: Input, args: ['p-action',] }],
    badgeAlert: [{ type: Input, args: ['p-badge-alert',] }],
    badgeColor: [{ type: Input, args: ['p-badge-color',] }],
    collapsedMenu: [{ type: Input, args: ['p-collapsed-menu',] }],
    icon: [{ type: Input, args: ['p-icon',] }],
    id: [{ type: Input, args: ['p-id',] }],
    isOpened: [{ type: Input, args: ['p-is-opened',] }],
    label: [{ type: Input, args: ['p-label',] }],
    level: [{ type: Input, args: ['p-level',] }],
    link: [{ type: Input, args: ['p-link',] }],
    shortLabel: [{ type: Input, args: ['p-short-label',] }],
    type: [{ type: Input, args: ['p-type',] }],
    menuSubItems: [{ type: ViewChild, args: ['menuSubItems',] }],
    badgeValue: [{ type: Input, args: ['p-badge-value',] }],
    isSelected: [{ type: Input, args: ['p-is-selected',] }],
    isSubItem: [{ type: Input, args: ['p-is-sub-item',] }],
    subItems: [{ type: Input, args: ['p-sub-items',] }]
};
//# sourceMappingURL=data:application/json;base64,