import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectorRef, Component, ContentChild, IterableDiffers, ViewChild } from '@angular/core';
import { isTypeof } from '../../utils/util';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { PoListViewBaseComponent } from './po-list-view-base.component';
import { PoListViewContentTemplateDirective } from './po-list-view-content-template/po-list-view-content-template.directive';
import { PoListViewDetailTemplateDirective } from './po-list-view-detail-template/po-list-view-detail-template.directive';
/**
 * @docsExtends PoListViewBaseComponent
 *
 * @example
 *
 * <example name="po-list-view-basic" title="PO List View Basic">
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.html"> </file>
 *  <file name="sample-po-list-view-basic/sample-po-list-view-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-labs" title="PO List View Labs">
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.html"> </file>
 *  <file name="sample-po-list-view-labs/sample-po-list-view-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-list-view-hiring-processes" title="PO List View - Hiring Processes">
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.html"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-list-view-hiring-processes/sample-po-list-view-hiring-processes.service.ts"> </file>
 * </example>
 */
export class PoListViewComponent extends PoListViewBaseComponent {
    constructor(changeDetector, differs, languageService) {
        super(languageService);
        this.changeDetector = changeDetector;
        this.differ = differs.find([]).create(null);
    }
    get hasContentTemplate() {
        return !!this.listViewContentTemplate;
    }
    get hasDetailTemplate() {
        return !!this.listViewDetailTemplate;
    }
    get displayShowMoreButton() {
        return this.items && this.items.length > 0 && this.showMore.observers.length > 0;
    }
    get showButtonsActions() {
        return this.visibleActions && this.visibleActions.length > 0 && this.visibleActions.length <= 2;
    }
    get showPopupActions() {
        return this.visibleActions && this.visibleActions.length > 2;
    }
    get titleHasAction() {
        return this.titleAction.observers.length > 0;
    }
    get visibleActions() {
        return this.actions && this.actions.filter(action => action.visible !== false);
    }
    ngAfterContentInit() {
        this.initShowDetail();
    }
    ngDoCheck() {
        this.checkItemsChange();
    }
    checkTitleType(item) {
        if (this.propertyLink && item[this.propertyLink]) {
            return item[this.propertyLink].startsWith('http') ? 'externalLink' : 'internalLink';
        }
        return 'noLink';
    }
    getItemTitle(item) {
        return this.hasContentTemplate && this.listViewContentTemplate.title
            ? this.listViewContentTemplate.title(item)
            : item[this.propertyTitle];
    }
    hasItems() {
        return this.items && this.items.length > 0;
    }
    returnBooleanValue(listViewAction, item) {
        return isTypeof(listViewAction.disabled, 'function')
            ? listViewAction.disabled(item)
            : listViewAction.disabled;
    }
    trackBy(index) {
        return index;
    }
    togglePopup(item, targetRef) {
        this.popupTarget = targetRef;
        this.changeDetector.detectChanges();
        this.poPopupComponent.toggle(item);
    }
    checkItemsChange() {
        const changesItems = this.differ.diff(this.items);
        if (changesItems && this.selectAll) {
            this.selectAll = null;
        }
        if (changesItems && this.items && this.items.length && this.select && !this.hideSelectAll) {
            this.showHeader = true;
        }
    }
    initShowDetail() {
        if (this.items && this.items.length > 0 && this.hasDetailTemplate && this.listViewDetailTemplate.showDetail) {
            this.items.forEach(item => (item.$showDetail = this.listViewDetailTemplate.showDetail(item)));
        }
    }
}
PoListViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-list-view',
                template: "<div\n  [class.po-list-view-main-container-header]=\"showHeader\"\n  [class.po-list-view-main-container]=\"!showHeader\"\n  [style.height.px]=\"height\"\n>\n  <div *ngIf=\"showHeader\" class=\"po-list-view-main-header\">\n    <div class=\"po-checkbox-group-item\">\n      <div class=\"po-list-view-main-select\">\n        <input\n          class=\"po-input po-checkbox-group-input\"\n          type=\"checkbox\"\n          [class.po-checkbox-group-input-checked]=\"selectAll\"\n          [class.po-checkbox-group-input-indeterminate]=\"selectAll === null\"\n        />\n        <label\n          class=\"po-checkbox-group-label po-list-view-selectable-label po-clickable\"\n          (click)=\"selectAllListItems()\"\n        >\n          {{ literals.selectAll }}\n        </label>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"po-list-view-main-content\">\n    <div class=\"po-list-view\" *ngIf=\"!hasItems()\">\n      <div class=\"po-list-view-container-no-data po-text-center\">\n        <span> {{ literals.noData }} </span>\n      </div>\n    </div>\n\n    <ng-container *ngFor=\"let item of items; let index = index; trackBy: trackBy\">\n      <div class=\"po-list-view\">\n        <div class=\"po-list-view-container\">\n          <div class=\"po-list-view-header\">\n            <div class=\"po-list-view-title\" [ngSwitch]=\"checkTitleType(item)\">\n              <div *ngIf=\"select\" class=\"po-list-view-select\">\n                <input\n                  class=\"po-input po-checkbox-group-input\"\n                  type=\"checkbox\"\n                  [class.po-checkbox-group-input-checked]=\"item.$selected\"\n                />\n                <label\n                  class=\"po-checkbox-group-label po-list-view-selectable-label po-clickable\"\n                  (click)=\"selectListItem(item)\"\n                ></label>\n              </div>\n              <a\n                *ngSwitchCase=\"'externalLink'\"\n                class=\"po-list-view-title-link\"\n                target=\"_blank\"\n                [href]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <a\n                *ngSwitchCase=\"'internalLink'\"\n                class=\"po-list-view-title-link\"\n                [routerLink]=\"item[propertyLink]\"\n                (click)=\"runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </a>\n              <span\n                *ngSwitchCase=\"'noLink'\"\n                class=\"po-list-view-title-no-link\"\n                [class.po-list-view-title-link]=\"titleHasAction\"\n                (click)=\"titleHasAction && runTitleAction(item)\"\n              >\n                {{ getItemTitle(item) }}\n              </span>\n            </div>\n\n            <div *ngIf=\"showButtonsActions\" class=\"po-list-view-actions\">\n              <po-button\n                *ngFor=\"let action of visibleActions\"\n                p-small=\"true\"\n                [p-disabled]=\"returnBooleanValue(action, item)\"\n                [p-icon]=\"action.icon\"\n                [p-label]=\"action.label\"\n                [p-type]=\"action.type\"\n                (p-click)=\"onClickAction(action, item)\"\n              >\n              </po-button>\n            </div>\n\n            <div *ngIf=\"showPopupActions\" class=\"po-list-view-more-actions\">\n              <span\n                #popupTarget\n                class=\"po-icon po-icon-more po-list-view-more-icon po-clickable\"\n                (click)=\"togglePopup(item, popupTarget)\"\n              >\n              </span>\n            </div>\n          </div>\n\n          <div *ngIf=\"hasContentTemplate\" class=\"po-list-view-content\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewContentTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n\n          <div @showHideDetail *ngIf=\"hasDetailTemplate && item.$showDetail\" class=\"po-list-view-detail\">\n            <ng-template\n              [ngTemplateOutlet]=\"listViewDetailTemplate.templateRef\"\n              [ngTemplateOutletContext]=\"{ $implicit: item, index: index }\"\n            >\n            </ng-template>\n          </div>\n        </div>\n\n        <div *ngIf=\"hasDetailTemplate\" class=\"po-list-view-detail-button\">\n          <span class=\"po-clickable\" (click)=\"item.$showDetail = !item.$showDetail\">\n            {{ item.$showDetail ? literals.hideDetails : literals.showDetails }}\n          </span>\n        </div>\n      </div>\n    </ng-container>\n  </div>\n</div>\n\n<div *ngIf=\"displayShowMoreButton\" class=\"po-mb-2 po-text-center\">\n  <po-button [p-disabled]=\"showMoreDisabled\" [p-label]=\"literals.loadMoreData\" (p-click)=\"onShowMore()\"> </po-button>\n</div>\n\n<po-popup #popup [p-actions]=\"actions\" [p-target]=\"popupTarget\"> </po-popup>\n",
                animations: [
                    trigger('showHideDetail', [
                        state('*', style({ 'overflow-y': 'visible' })),
                        state('void', style({ 'overflow-y': 'hidden' })),
                        transition('* => void', [style({ height: '*', 'overflow-y': 'hidden' }), animate(100, style({ height: 0 }))]),
                        transition('void => *', [style({ height: '0' }), animate(100, style({ height: '*' }))])
                    ])
                ]
            },] }
];
PoListViewComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: IterableDiffers },
    { type: PoLanguageService }
];
PoListViewComponent.propDecorators = {
    listViewContentTemplate: [{ type: ContentChild, args: [PoListViewContentTemplateDirective, { static: true },] }],
    listViewDetailTemplate: [{ type: ContentChild, args: [PoListViewDetailTemplateDirective, { static: true },] }],
    poPopupComponent: [{ type: ViewChild, args: ['popup', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1saXN0LXZpZXcvcG8tbGlzdC12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pGLE9BQU8sRUFFTCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFFWixlQUFlLEVBQ2YsU0FBUyxFQUNWLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUluRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSx5RUFBeUUsQ0FBQztBQUM3SCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSx1RUFBdUUsQ0FBQztBQUUxSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FvQkc7QUFhSCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsdUJBQXVCO0lBVTlELFlBQW9CLGNBQWlDLEVBQUUsT0FBd0IsRUFBRSxlQUFrQztRQUNqSCxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7UUFETCxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFFbkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsSUFBSSxrQkFBa0I7UUFDcEIsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDO0lB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QUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDN0csVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUN4RixDQUFDO2lCQUNIO2FBQ0Y7OztZQWpEQyxpQkFBaUI7WUFJakIsZUFBZTtZQUtSLGlCQUFpQjs7O3NDQTBDdkIsWUFBWSxTQUFDLGtDQUFrQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtxQ0FFakUsWUFBWSxTQUFDLGlDQUFpQyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTsrQkFHaEUsU0FBUyxTQUFDLE9BQU8sRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIENvbnRlbnRDaGlsZCxcbiAgRG9DaGVjayxcbiAgSXRlcmFibGVEaWZmZXJzLFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9Qb3B1cENvbXBvbmVudCB9IGZyb20gJy4uL3BvLXBvcHVwL3BvLXBvcHVwLmNvbXBvbmVudCc7XG5cbmltcG9ydCB7IFBvTGlzdFZpZXdBY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbGlzdC12aWV3LWFjdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9MaXN0Vmlld0Jhc2VDb21wb25lbnQgfSBmcm9tICcuL3BvLWxpc3Qtdmlldy1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0xpc3RWaWV3Q29udGVudFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9wby1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS9wby1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSAnLi9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlL3BvLWxpc3Qtdmlldy1kZXRhaWwtdGVtcGxhdGUuZGlyZWN0aXZlJztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9MaXN0Vmlld0Jhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1saXN0LXZpZXctYmFzaWNcIiB0aXRsZT1cIlBPIExpc3QgVmlldyBCYXNpY1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWJhc2ljL3NhbXBsZS1wby1saXN0LXZpZXctYmFzaWMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWJhc2ljL3NhbXBsZS1wby1saXN0LXZpZXctYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tbGlzdC12aWV3LWxhYnNcIiB0aXRsZT1cIlBPIExpc3QgVmlldyBMYWJzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1saXN0LXZpZXctbGFicy9zYW1wbGUtcG8tbGlzdC12aWV3LWxhYnMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWxhYnMvc2FtcGxlLXBvLWxpc3Qtdmlldy1sYWJzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzXCIgdGl0bGU9XCJQTyBMaXN0IFZpZXcgLSBIaXJpbmcgUHJvY2Vzc2VzXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy9zYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMvc2FtcGxlLXBvLWxpc3Qtdmlldy1oaXJpbmctcHJvY2Vzc2VzLmNvbXBvbmVudC50c1wiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1saXN0LXZpZXctaGlyaW5nLXByb2Nlc3Nlcy9zYW1wbGUtcG8tbGlzdC12aWV3LWhpcmluZy1wcm9jZXNzZXMuc2VydmljZS50c1wiPiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWxpc3QtdmlldycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1saXN0LXZpZXcuY29tcG9uZW50Lmh0bWwnLFxuICBhbmltYXRpb25zOiBbXG4gICAgdHJpZ2dlcignc2hvd0hpZGVEZXRhaWwnLCBbXG4gICAgICBzdGF0ZSgnKicsIHN0eWxlKHsgJ292ZXJmbG93LXknOiAndmlzaWJsZScgfSkpLFxuICAgICAgc3RhdGUoJ3ZvaWQnLCBzdHlsZSh7ICdvdmVyZmxvdy15JzogJ2hpZGRlbicgfSkpLFxuICAgICAgdHJhbnNpdGlvbignKiA9PiB2b2lkJywgW3N0eWxlKHsgaGVpZ2h0OiAnKicsICdvdmVyZmxvdy15JzogJ2hpZGRlbicgfSksIGFuaW1hdGUoMTAwLCBzdHlsZSh7IGhlaWdodDogMCB9KSldKSxcbiAgICAgIHRyYW5zaXRpb24oJ3ZvaWQgPT4gKicsIFtzdHlsZSh7IGhlaWdodDogJzAnIH0pLCBhbmltYXRlKDEwMCwgc3R5bGUoeyBoZWlnaHQ6ICcqJyB9KSldKVxuICAgIF0pXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUG9MaXN0Vmlld0NvbXBvbmVudCBleHRlbmRzIFBvTGlzdFZpZXdCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgRG9DaGVjayB7XG4gIEBDb250ZW50Q2hpbGQoUG9MaXN0Vmlld0NvbnRlbnRUZW1wbGF0ZURpcmVjdGl2ZSwgeyBzdGF0aWM6IHRydWUgfSlcbiAgbGlzdFZpZXdDb250ZW50VGVtcGxhdGU6IFBvTGlzdFZpZXdDb250ZW50VGVtcGxhdGVEaXJlY3RpdmU7XG4gIEBDb250ZW50Q2hpbGQoUG9MaXN0Vmlld0RldGFpbFRlbXBsYXRlRGlyZWN0aXZlLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICBsaXN0Vmlld0RldGFpbFRlbXBsYXRlOiBQb0xpc3RWaWV3RGV0YWlsVGVtcGxhdGVEaXJlY3RpdmU7XG5cbiAgQFZpZXdDaGlsZCgncG9wdXAnLCB7IHN0YXRpYzogdHJ1ZSB9KSBwb1BvcHVwQ29tcG9uZW50OiBQb1BvcHVwQ29tcG9uZW50O1xuXG4gIHByaXZhdGUgZGlmZmVyO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLCBkaWZmZXJzOiBJdGVyYWJsZURpZmZlcnMsIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcbiAgICBzdXBlcihsYW5ndWFnZVNlcnZpY2UpO1xuICAgIHRoaXMuZGlmZmVyID0gZGlmZmVycy5maW5kKFtdKS5jcmVhdGUobnVsbCk7XG4gIH1cblxuICBnZXQgaGFzQ29udGVudFRlbXBsYXRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhIXRoaXMubGlzdFZpZXdDb250ZW50VGVtcGxhdGU7XG4gIH1cblxuICBnZXQgaGFzRGV0YWlsVGVtcGxhdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5saXN0Vmlld0RldGFpbFRlbXBsYXRlO1xuICB9XG5cbiAgZ2V0IGRpc3BsYXlTaG93TW9yZUJ1dHRvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDAgJiYgdGhpcy5zaG93TW9yZS5vYnNlcnZlcnMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIGdldCBzaG93QnV0dG9uc0FjdGlvbnMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudmlzaWJsZUFjdGlvbnMgJiYgdGhpcy52aXNpYmxlQWN0aW9ucy5sZW5ndGggPiAwICYmIHRoaXMudmlzaWJsZUFjdGlvbnMubGVuZ3RoIDw9IDI7XG4gIH1cblxuICBnZXQgc2hvd1BvcHVwQWN0aW9ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52aXNpYmxlQWN0aW9ucyAmJiB0aGlzLnZpc2libGVBY3Rpb25zLmxlbmd0aCA+IDI7XG4gIH1cblxuICBnZXQgdGl0bGVIYXNBY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGl0bGVBY3Rpb24ub2JzZXJ2ZXJzLmxlbmd0aCA+IDA7XG4gIH1cblxuICBnZXQgdmlzaWJsZUFjdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aW9ucyAmJiB0aGlzLmFjdGlvbnMuZmlsdGVyKGFjdGlvbiA9PiBhY3Rpb24udmlzaWJsZSAhPT0gZmFsc2UpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuaW5pdFNob3dEZXRhaWwoKTtcbiAgfVxuXG4gIG5nRG9DaGVjaygpIHtcbiAgICB0aGlzLmNoZWNrSXRlbXNDaGFuZ2UoKTtcbiAgfVxuXG4gIGNoZWNrVGl0bGVUeXBlKGl0ZW06IGFueSkge1xuICAgIGlmICh0aGlzLnByb3BlcnR5TGluayAmJiBpdGVtW3RoaXMucHJvcGVydHlMaW5rXSkge1xuICAgICAgcmV0dXJuIGl0ZW1bdGhpcy5wcm9wZXJ0eUxpbmtdLnN0YXJ0c1dpdGgoJ2h0dHAnKSA/ICdleHRlcm5hbExpbmsnIDogJ2ludGVybmFsTGluayc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdub0xpbmsnO1xuICB9XG5cbiAgZ2V0SXRlbVRpdGxlKGl0ZW0pIHtcbiAgICByZXR1cm4gdGhpcy5oYXNDb250ZW50VGVtcGxhdGUgJiYgdGhpcy5saXN0Vmlld0NvbnRlbnRUZW1wbGF0ZS50aXRsZVxuICAgICAgPyB0aGlzLmxpc3RWaWV3Q29udGVudFRlbXBsYXRlLnRpdGxlKGl0ZW0pXG4gICAgICA6IGl0ZW1bdGhpcy5wcm9wZXJ0eVRpdGxlXTtcbiAgfVxuXG4gIGhhc0l0ZW1zKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoID4gMDtcbiAgfVxuXG4gIHJldHVybkJvb2xlYW5WYWx1ZShsaXN0Vmlld0FjdGlvbjogUG9MaXN0Vmlld0FjdGlvbiwgaXRlbTogYW55KSB7XG4gICAgcmV0dXJuIGlzVHlwZW9mKGxpc3RWaWV3QWN0aW9uLmRpc2FibGVkLCAnZnVuY3Rpb24nKVxuICAgICAgPyAoPGFueT5saXN0Vmlld0FjdGlvbikuZGlzYWJsZWQoaXRlbSlcbiAgICAgIDogbGlzdFZpZXdBY3Rpb24uZGlzYWJsZWQ7XG4gIH1cblxuICB0cmFja0J5KGluZGV4KSB7XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgdG9nZ2xlUG9wdXAoaXRlbSwgdGFyZ2V0UmVmOiBIVE1MRWxlbWVudCkge1xuICAgIHRoaXMucG9wdXBUYXJnZXQgPSB0YXJnZXRSZWY7XG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG5cbiAgICB0aGlzLnBvUG9wdXBDb21wb25lbnQudG9nZ2xlKGl0ZW0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0l0ZW1zQ2hhbmdlKCkge1xuICAgIGNvbnN0IGNoYW5nZXNJdGVtcyA9IHRoaXMuZGlmZmVyLmRpZmYodGhpcy5pdGVtcyk7XG5cbiAgICBpZiAoY2hhbmdlc0l0ZW1zICYmIHRoaXMuc2VsZWN0QWxsKSB7XG4gICAgICB0aGlzLnNlbGVjdEFsbCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXNJdGVtcyAmJiB0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoICYmIHRoaXMuc2VsZWN0ICYmICF0aGlzLmhpZGVTZWxlY3RBbGwpIHtcbiAgICAgIHRoaXMuc2hvd0hlYWRlciA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0U2hvd0RldGFpbCgpIHtcbiAgICBpZiAodGhpcy5pdGVtcyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA+IDAgJiYgdGhpcy5oYXNEZXRhaWxUZW1wbGF0ZSAmJiB0aGlzLmxpc3RWaWV3RGV0YWlsVGVtcGxhdGUuc2hvd0RldGFpbCkge1xuICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gKGl0ZW0uJHNob3dEZXRhaWwgPSB0aGlzLmxpc3RWaWV3RGV0YWlsVGVtcGxhdGUuc2hvd0RldGFpbChpdGVtKSkpO1xuICAgIH1cbiAgfVxufVxuIl19