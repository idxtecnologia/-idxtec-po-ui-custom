import { ViewChild, Directive } from '@angular/core';
import { Subject } from 'rxjs';
import { PoChartType } from '../enums/po-chart-type.enum';
const Padding = 24;
/* eslint-disable @angular-eslint/directive-class-suffix */
export class PoChartDynamicTypeComponent {
    constructor() {
        this.innerRadius = 0;
        this.onSerieClick = new Subject();
        this.onSerieHover = new Subject();
        // eslint-disable-next-line
        this._series = [];
    }
    get isChartGaugeType() {
        return this.type === PoChartType.Gauge;
    }
    calculateSVGContainerDimensions(chartWrapperElement, chartHeaderElement, chartLegendElement) {
        const svgContainerHeightCalc = this.height - chartHeaderElement - chartLegendElement - Padding * 2;
        this.svgHeight = svgContainerHeightCalc <= 0 ? 0 : svgContainerHeightCalc;
        this.centerX = chartWrapperElement / 2;
    }
    calculateTotalValue() {
        this.totalValue =
            this.type === PoChartType.Gauge
                ? 100
                : this.series.reduce((previousValue, serie) => previousValue + (serie.data ? serie.data : serie.value), 0);
    }
    set series(value) {
        this._series = this.getSeriesWithValue(value);
    }
    get series() {
        return this._series;
    }
    getSeriesWithValue(value) {
        return value;
    }
}
PoChartDynamicTypeComponent.decorators = [
    { type: Directive }
];
PoChartDynamicTypeComponent.propDecorators = {
    chartBody: [{ type: ViewChild, args: ['chartBody', { static: true },] }],
    svgContainer: [{ type: ViewChild, args: ['svgContainer', { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZHluYW1pYy10eXBlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1keW5hbWljLXR5cGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0IsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTFELE1BQU0sT0FBTyxHQUFXLEVBQUUsQ0FBQztBQUUzQiwyREFBMkQ7QUFFM0QsTUFBTSxPQUFnQiwyQkFBMkI7SUFEakQ7UUFlRSxnQkFBVyxHQUFXLENBQUMsQ0FBQztRQUN4QixpQkFBWSxHQUErQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3pELGlCQUFZLEdBQStCLElBQUksT0FBTyxFQUFFLENBQUM7UUFXekQsMkJBQTJCO1FBQ2pCLFlBQU8sR0FBNkIsRUFBRSxDQUFDO0lBK0JuRCxDQUFDO0lBN0JDLElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsS0FBSyxDQUFDO0lBQ3pDLENBQUM7SUFFRCwrQkFBK0IsQ0FBQyxtQkFBMkIsRUFBRSxrQkFBMEIsRUFBRSxrQkFBMEI7UUFDakgsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLGtCQUFrQixHQUFHLGtCQUFrQixHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUM7UUFFbkcsSUFBSSxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUM7UUFDMUUsSUFBSSxDQUFDLE9BQU8sR0FBRyxtQkFBbUIsR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELG1CQUFtQjtRQUNqQixJQUFJLENBQUMsVUFBVTtZQUNiLElBQUksQ0FBQyxJQUFJLEtBQUssV0FBVyxDQUFDLEtBQUs7Z0JBQzdCLENBQUMsQ0FBQyxHQUFHO2dCQUNMLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLGFBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqSCxDQUFDO0lBRUQsSUFBSSxNQUFNLENBQUMsS0FBaUI7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRVMsa0JBQWtCLENBQUMsS0FBSztRQUNoQyxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7OztZQTNERixTQUFTOzs7d0JBRVAsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7MkJBRXZDLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBQb0NoYXJ0R2F1Z2VTZXJpZSB9IGZyb20gJy4vcG8tY2hhcnQtZ2F1Z2UvcG8tY2hhcnQtZ2F1Z2Utc2VyaWVzLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0NoYXJ0VHlwZSB9IGZyb20gJy4uL2VudW1zL3BvLWNoYXJ0LXR5cGUuZW51bSc7XG5cbmNvbnN0IFBhZGRpbmc6IG51bWJlciA9IDI0O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLWNsYXNzLXN1ZmZpeCAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUG9DaGFydER5bmFtaWNUeXBlQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgnY2hhcnRCb2R5JywgeyBzdGF0aWM6IHRydWUgfSkgY2hhcnRCb2R5OiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGQoJ3N2Z0NvbnRhaW5lcicsIHsgc3RhdGljOiB0cnVlIH0pIHN2Z0NvbnRhaW5lcjogRWxlbWVudFJlZjtcblxuICBjZW50ZXJYOiBudW1iZXI7XG4gIGNoYXJ0RWxlbWVudENhdGVnb3J5OiBhbnk7XG4gIGNoYXJ0RWxlbWVudERlc2NyaXB0aW9uOiBhbnk7XG4gIGNoYXJ0RWxlbWVudFZhbHVlOiBhbnk7XG4gIGNoYXJ0SGVhZGVyOiBudW1iZXI7XG4gIGNoYXJ0TGVnZW5kOiBudW1iZXI7XG4gIGNoYXJ0V3JhcHBlcjogbnVtYmVyO1xuICBjb2xvcnM6IEFycmF5PHN0cmluZz47XG4gIGhlaWdodDogbnVtYmVyO1xuICBpbm5lclJhZGl1czogbnVtYmVyID0gMDtcbiAgb25TZXJpZUNsaWNrOiBTdWJqZWN0PFBvQ2hhcnRHYXVnZVNlcmllPiA9IG5ldyBTdWJqZWN0KCk7XG4gIG9uU2VyaWVIb3ZlcjogU3ViamVjdDxQb0NoYXJ0R2F1Z2VTZXJpZT4gPSBuZXcgU3ViamVjdCgpO1xuICBzdmdFbGVtZW50OiBIVE1MT2JqZWN0RWxlbWVudDtcbiAgc3ZnSGVpZ2h0OiBudW1iZXI7XG4gIHRhcmdldDogSFRNTElucHV0RWxlbWVudCAmIEV2ZW50VGFyZ2V0O1xuICB0b29sdGlwRWxlbWVudDogSFRNTE9iamVjdEVsZW1lbnQ7XG4gIHRvb2x0aXBUZXh0OiBzdHJpbmc7XG4gIHRvdGFsVmFsdWU6IG51bWJlcjtcbiAgdHlwZTogUG9DaGFydFR5cGU7XG5cbiAgcHJvdGVjdGVkIHdpbmRvd1Jlc2l6ZUxpc3RlbmVyOiAoKSA9PiB2b2lkO1xuICBwcm90ZWN0ZWQgd2luZG93U2Nyb2xsTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBwcm90ZWN0ZWQgX3NlcmllczogQXJyYXk8UG9DaGFydEdhdWdlU2VyaWU+ID0gW107XG5cbiAgZ2V0IGlzQ2hhcnRHYXVnZVR5cGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gUG9DaGFydFR5cGUuR2F1Z2U7XG4gIH1cblxuICBjYWxjdWxhdGVTVkdDb250YWluZXJEaW1lbnNpb25zKGNoYXJ0V3JhcHBlckVsZW1lbnQ6IG51bWJlciwgY2hhcnRIZWFkZXJFbGVtZW50OiBudW1iZXIsIGNoYXJ0TGVnZW5kRWxlbWVudDogbnVtYmVyKSB7XG4gICAgY29uc3Qgc3ZnQ29udGFpbmVySGVpZ2h0Q2FsYyA9IHRoaXMuaGVpZ2h0IC0gY2hhcnRIZWFkZXJFbGVtZW50IC0gY2hhcnRMZWdlbmRFbGVtZW50IC0gUGFkZGluZyAqIDI7XG5cbiAgICB0aGlzLnN2Z0hlaWdodCA9IHN2Z0NvbnRhaW5lckhlaWdodENhbGMgPD0gMCA/IDAgOiBzdmdDb250YWluZXJIZWlnaHRDYWxjO1xuICAgIHRoaXMuY2VudGVyWCA9IGNoYXJ0V3JhcHBlckVsZW1lbnQgLyAyO1xuICB9XG5cbiAgY2FsY3VsYXRlVG90YWxWYWx1ZSgpIHtcbiAgICB0aGlzLnRvdGFsVmFsdWUgPVxuICAgICAgdGhpcy50eXBlID09PSBQb0NoYXJ0VHlwZS5HYXVnZVxuICAgICAgICA/IDEwMFxuICAgICAgICA6IHRoaXMuc2VyaWVzLnJlZHVjZSgocHJldmlvdXNWYWx1ZSwgc2VyaWUpID0+IHByZXZpb3VzVmFsdWUgKyAoc2VyaWUuZGF0YSA/IHNlcmllLmRhdGEgOiBzZXJpZS52YWx1ZSksIDApO1xuICB9XG5cbiAgc2V0IHNlcmllcyh2YWx1ZTogQXJyYXk8YW55Pikge1xuICAgIHRoaXMuX3NlcmllcyA9IHRoaXMuZ2V0U2VyaWVzV2l0aFZhbHVlKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBzZXJpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcmllcztcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRTZXJpZXNXaXRoVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiJdfQ==