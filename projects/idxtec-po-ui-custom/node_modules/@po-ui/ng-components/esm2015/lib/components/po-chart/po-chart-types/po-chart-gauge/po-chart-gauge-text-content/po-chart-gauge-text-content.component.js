import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Input, ViewChild } from '@angular/core';
import { convertNumberToDecimal } from '../../../../../utils/util';
import { poChartGaugeSerieWidth } from '../../po-chart-circular/po-chart-circular.constant';
export class PoChartGaugeTextContentComponent {
    constructor(changeDetection) {
        this.changeDetection = changeDetection;
    }
    set gaugeWidth(value) {
        this._gaugeWidth = value;
        this.checkTextDescriptionSize();
    }
    get gaugeWidth() {
        return this._gaugeWidth;
    }
    set serie(serie) {
        if (serie) {
            this.serieValueConverted = this.convertValueInPercentFormat(serie.value);
            this._serie = Object.assign({}, serie);
        }
        else {
            this._serie = undefined;
        }
    }
    get serie() {
        return this._serie;
    }
    get hasSerieDescription() {
        return this.serie && this.serie.description;
    }
    get hasSerieValue() {
        return this.serie && this.serie.value >= 0;
    }
    get maxDescriptionWidth() {
        // Diferença contemplando a largura do path base e padding interno.
        const subtractionArea = this.gaugeWidth * poChartGaugeSerieWidth * 2 * 2;
        const descriptionWidth = this.gaugeWidth - subtractionArea;
        return { 'max-width': `${descriptionWidth}px` };
    }
    ngAfterViewInit() {
        this.checkTextDescriptionSize();
    }
    checkTextDescriptionSize() {
        if (this.descriptionElement) {
            // tooltip necessário para contornar comportamento inesperado do tooltip.
            setTimeout(() => {
                this.tooltip = this.isEllipsisActive();
            });
            this.changeDetection.detectChanges();
        }
    }
    convertValueInPercentFormat(value) {
        const decimalValue = String(convertNumberToDecimal(value, 1)).replace('.', ',');
        return `${decimalValue}%`;
    }
    isEllipsisActive() {
        const isExceededWidth = this.descriptionElement.nativeElement.offsetWidth < this.descriptionElement.nativeElement.scrollWidth;
        return isExceededWidth ? this.serie.description : undefined;
    }
}
PoChartGaugeTextContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-chart-gauge-text-content',
                template: "<div *ngIf=\"hasSerieValue\" class=\"po-chart-gauge-text-content\" tabindex=\"0\" [ngStyle]=\"maxDescriptionWidth\">\n  <p class=\"po-chart-gauge-text-value\">{{ serieValueConverted }}</p>\n  <p *ngIf=\"hasSerieDescription\" #description class=\"po-chart-gauge-text-description\" [p-tooltip]=\"tooltip\">\n    {{ serie?.description }}\n  </p>\n</div>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoChartGaugeTextContentComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoChartGaugeTextContentComponent.propDecorators = {
    descriptionElement: [{ type: ViewChild, args: ['description', { read: ElementRef },] }],
    gaugeWidth: [{ type: Input, args: ['p-gauge-width',] }],
    serie: [{ type: Input, args: ['p-serie',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC10eXBlcy9wby1jaGFydC1nYXVnZS9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQvcG8tY2hhcnQtZ2F1Z2UtdGV4dC1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFDTCxTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFHbkUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFPNUYsTUFBTSxPQUFPLGdDQUFnQztJQWdDM0MsWUFBb0IsZUFBa0M7UUFBbEMsb0JBQWUsR0FBZixlQUFlLENBQW1CO0lBQUcsQ0FBQztJQXZCMUQsSUFBNEIsVUFBVSxDQUFDLEtBQWE7UUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7UUFFekIsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBc0IsS0FBSyxDQUFDLEtBQXdCO1FBQ2xELElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekUsSUFBSSxDQUFDLE1BQU0scUJBQVEsS0FBSyxDQUFFLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBSUQsSUFBSSxtQkFBbUI7UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQzlDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLG1CQUFtQjtRQUNyQixtRUFBbUU7UUFDbkUsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxzQkFBc0IsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxlQUFlLENBQUM7UUFFM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxHQUFHLGdCQUFnQixJQUFJLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7SUFFTyx3QkFBd0I7UUFDOUIsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0IseUVBQXlFO1lBQ3pFLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN6QyxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxlQUFlLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDdEM7SUFDSCxDQUFDO0lBRU8sMkJBQTJCLENBQUMsS0FBYTtRQUMvQyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNoRixPQUFPLEdBQUcsWUFBWSxHQUFHLENBQUM7SUFDNUIsQ0FBQztJQUVPLGdCQUFnQjtRQUN0QixNQUFNLGVBQWUsR0FDbkIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFFeEcsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDOUQsQ0FBQzs7O1lBL0VGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2Qyw0V0FBMkQ7Z0JBQzNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7WUFoQkMsaUJBQWlCOzs7aUNBa0JoQixTQUFTLFNBQUMsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRTt5QkFRN0MsS0FBSyxTQUFDLGVBQWU7b0JBVXJCLEtBQUssU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIElucHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnROdW1iZXJUb0RlY2ltYWwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlsJztcblxuaW1wb3J0IHsgUG9DaGFydEdhdWdlU2VyaWUgfSBmcm9tICcuLi9wby1jaGFydC1nYXVnZS1zZXJpZXMuaW50ZXJmYWNlJztcbmltcG9ydCB7IHBvQ2hhcnRHYXVnZVNlcmllV2lkdGggfSBmcm9tICcuLi8uLi9wby1jaGFydC1jaXJjdWxhci9wby1jaGFydC1jaXJjdWxhci5jb25zdGFudCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWNoYXJ0LWdhdWdlLXRleHQtY29udGVudCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1jaGFydC1nYXVnZS10ZXh0LWNvbnRlbnQuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBQb0NoYXJ0R2F1Z2VUZXh0Q29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBAVmlld0NoaWxkKCdkZXNjcmlwdGlvbicsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBkZXNjcmlwdGlvbkVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgc2VyaWVWYWx1ZUNvbnZlcnRlZDogc3RyaW5nO1xuICB0b29sdGlwOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSBfZ2F1Z2VXaWR0aDogbnVtYmVyO1xuICBwcml2YXRlIF9zZXJpZTogUG9DaGFydEdhdWdlU2VyaWU7XG5cbiAgQElucHV0KCdwLWdhdWdlLXdpZHRoJykgc2V0IGdhdWdlV2lkdGgodmFsdWU6IG51bWJlcikge1xuICAgIHRoaXMuX2dhdWdlV2lkdGggPSB2YWx1ZTtcblxuICAgIHRoaXMuY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCk7XG4gIH1cblxuICBnZXQgZ2F1Z2VXaWR0aCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2F1Z2VXaWR0aDtcbiAgfVxuXG4gIEBJbnB1dCgncC1zZXJpZScpIHNldCBzZXJpZShzZXJpZTogUG9DaGFydEdhdWdlU2VyaWUpIHtcbiAgICBpZiAoc2VyaWUpIHtcbiAgICAgIHRoaXMuc2VyaWVWYWx1ZUNvbnZlcnRlZCA9IHRoaXMuY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHNlcmllLnZhbHVlKTtcbiAgICAgIHRoaXMuX3NlcmllID0geyAuLi5zZXJpZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXJpZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cblxuICBnZXQgc2VyaWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlcmllO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gIGdldCBoYXNTZXJpZURlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnNlcmllICYmIHRoaXMuc2VyaWUuZGVzY3JpcHRpb247XG4gIH1cblxuICBnZXQgaGFzU2VyaWVWYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zZXJpZSAmJiB0aGlzLnNlcmllLnZhbHVlID49IDA7XG4gIH1cblxuICBnZXQgbWF4RGVzY3JpcHRpb25XaWR0aCgpIHtcbiAgICAvLyBEaWZlcmVuw6dhIGNvbnRlbXBsYW5kbyBhIGxhcmd1cmEgZG8gcGF0aCBiYXNlIGUgcGFkZGluZyBpbnRlcm5vLlxuICAgIGNvbnN0IHN1YnRyYWN0aW9uQXJlYSA9IHRoaXMuZ2F1Z2VXaWR0aCAqIHBvQ2hhcnRHYXVnZVNlcmllV2lkdGggKiAyICogMjtcbiAgICBjb25zdCBkZXNjcmlwdGlvbldpZHRoID0gdGhpcy5nYXVnZVdpZHRoIC0gc3VidHJhY3Rpb25BcmVhO1xuXG4gICAgcmV0dXJuIHsgJ21heC13aWR0aCc6IGAke2Rlc2NyaXB0aW9uV2lkdGh9cHhgIH07XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5jaGVja1RleHREZXNjcmlwdGlvblNpemUoKTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tUZXh0RGVzY3JpcHRpb25TaXplKCkge1xuICAgIGlmICh0aGlzLmRlc2NyaXB0aW9uRWxlbWVudCkge1xuICAgICAgLy8gdG9vbHRpcCBuZWNlc3PDoXJpbyBwYXJhIGNvbnRvcm5hciBjb21wb3J0YW1lbnRvIGluZXNwZXJhZG8gZG8gdG9vbHRpcC5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLmlzRWxsaXBzaXNBY3RpdmUoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rpb24uZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFZhbHVlSW5QZXJjZW50Rm9ybWF0KHZhbHVlOiBudW1iZXIpOiBzdHJpbmcge1xuICAgIGNvbnN0IGRlY2ltYWxWYWx1ZSA9IFN0cmluZyhjb252ZXJ0TnVtYmVyVG9EZWNpbWFsKHZhbHVlLCAxKSkucmVwbGFjZSgnLicsICcsJyk7XG4gICAgcmV0dXJuIGAke2RlY2ltYWxWYWx1ZX0lYDtcbiAgfVxuXG4gIHByaXZhdGUgaXNFbGxpcHNpc0FjdGl2ZSgpIHtcbiAgICBjb25zdCBpc0V4Y2VlZGVkV2lkdGggPVxuICAgICAgdGhpcy5kZXNjcmlwdGlvbkVsZW1lbnQubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCA8IHRoaXMuZGVzY3JpcHRpb25FbGVtZW50Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsV2lkdGg7XG5cbiAgICByZXR1cm4gaXNFeGNlZWRlZFdpZHRoID8gdGhpcy5zZXJpZS5kZXNjcmlwdGlvbiA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19