import { ChangeDetectorRef, Component, ElementRef, forwardRef, ViewChild, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoDatepickerRangeBaseComponent } from './po-datepicker-range-base.component';
import { PoDateService } from './../../../services/po-date/po-date.service';
import { PoMask } from '../po-input/po-mask';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
const arrowLeftKey = 37;
const arrowRightKey = 39;
const backspaceKey = 8;
const poDatepickerRangeDateLengthDefault = 10;
const poCalendarContentOffset = 8;
const poCalendarPositionDefault = 'bottom-left';
/* istanbul ignore next */
const providers = [
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoDatepickerRangeComponent),
        multi: true
    },
    PoControlPositionService
];
/**
 * @docsExtends PoDatepickerRangeBaseComponent
 *
 * @example
 *
 * <example name="po-datepicker-range-basic" title="PO Datepicker Range Basic">
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.html"> </file>
 *  <file name="sample-po-datepicker-range-basic/sample-po-datepicker-range-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-labs" title="PO Datepicker Range Labs">
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.html"> </file>
 *  <file name="sample-po-datepicker-range-labs/sample-po-datepicker-range-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations" title="PO Datepicker Range - Vacations Suggestion">
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.html"> </file>
 *  <file name="sample-po-datepicker-range-vacations/sample-po-datepicker-range-vacations.component.ts"> </file>
 * </example>
 *
 * <example name="po-datepicker-range-vacations-reactive-form" title="PO Datepicker Range - Vacations Reactive Form">
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.html">
 *  </file>
 *  <file name="sample-po-datepicker-range-vacations-reactive-form/sample-po-datepicker-range-vacations-reactive-form.component.ts">
 *  </file>
 * </example>
 */
export class PoDatepickerRangeComponent extends PoDatepickerRangeBaseComponent {
    constructor(changeDetector, controlPosition, renderer, cd, poDateService, poDatepickerRangeElement, poLanguageService) {
        super(poDateService, poLanguageService);
        this.changeDetector = changeDetector;
        this.controlPosition = controlPosition;
        this.renderer = renderer;
        this.cd = cd;
        this.isCalendarVisible = false;
        this.onScroll = () => {
            if (this.isCalendarVisible) {
                this.controlPosition.adjustPosition(poCalendarPositionDefault);
            }
        };
        this.poDatepickerRangeElement = poDatepickerRangeElement;
    }
    get autocomplete() {
        return this.noAutocomplete ? 'off' : 'on';
    }
    get enableCleaner() {
        return this.clean && (this.startDateInputValue || this.endDateInputValue) && !this.disabled && !this.readonly;
    }
    get endDateInputName() {
        return 'end-date';
    }
    get endDateInputValue() {
        return this.endDateInput.nativeElement.value;
    }
    get getErrorMessage() {
        return this.errorMessage !== '' && this.hasInvalidClass() ? this.errorMessage : '';
    }
    get isDateRangeInputUncompleted() {
        return (this.endDateInputValue.length < poDatepickerRangeDateLengthDefault &&
            this.startDateInputValue.length < poDatepickerRangeDateLengthDefault);
    }
    get isDirtyDateRangeInput() {
        return this.endDateInputValue.length > 0 || this.startDateInputValue.length > 0;
    }
    get startDateInputName() {
        return 'start-date';
    }
    get startDateInputValue() {
        return this.startDateInput.nativeElement.value;
    }
    static getKeyCode(event) {
        return event.keyCode || event.which;
    }
    static getTargetElement(event) {
        return event.target || event.srcElement;
    }
    static isValidKey(keyCode) {
        const isNumericKey = keyCode >= 48 && keyCode <= 57;
        const isNumericNumpadKey = keyCode >= 96 && keyCode <= 105;
        return isNumericKey || isNumericNumpadKey;
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    ngOnInit() {
        // Classe de máscara
        this.poMaskObject = this.buildMask();
    }
    ngOnChanges(changes) {
        if (changes.minDate || changes.maxDate) {
            this.validateModel(this.dateRange);
        }
    }
    ngOnDestroy() {
        this.removeListeners();
    }
    clear() {
        this.resetDateRangeInputValidation();
        this.dateRange = { start: '', end: '' };
        this.updateScreenByModel(this.dateRange);
        this.updateModel(this.dateRange);
    }
    eventOnClick($event) {
        this.poMaskObject.click($event);
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoDatepickerRangeComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoDatepickerRangeComponent, { static: true }) datepickerRange: PoDatepickerRangeComponent;
     *
     * focusDatepickerRange() {
     *   this.datepickerRange.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.startDateInput.nativeElement.focus();
        }
    }
    onBlur(event) {
        var _a;
        (_a = this.onTouchedModel) === null || _a === void 0 ? void 0 : _a.call(this);
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.updateModelByScreen(isStartDateTargetEvent);
        this.removeFocusFromDatePickerRangeField();
    }
    onCalendarChange({ start, end }) {
        const isStartDateTargetEvent = start && !end;
        this.updateScreenByModel({ start: start || '', end: end || '' });
        this.updateModelByScreen(isStartDateTargetEvent, start || '', end || '');
        if (start && end) {
            setTimeout(() => {
                this.isCalendarVisible = false;
                this.cd.markForCheck();
            }, 300);
        }
    }
    onFocus(event) {
        this.applyFocusOnDatePickerRangeField();
        this.poMaskObject.resetPositions(event);
    }
    onKeydown(event) {
        if (this.readonly) {
            return;
        }
        if (this.isSetFocusOnBackspace(event)) {
            event.preventDefault();
            this.setFocusOnBackspace();
        }
        else {
            this.poMaskObject.keydown(event);
        }
    }
    onKeyup(event) {
        if (this.readonly) {
            return;
        }
        const isStartDateTargetEvent = event.target.name === this.startDateInputName;
        this.setFocus(event);
        this.poMaskObject.keyup(event);
        this.updateModelWhenComplete(isStartDateTargetEvent, this.startDateInputValue, this.endDateInputValue);
    }
    resetDateRangeInputValidation() {
        this.isStartDateRangeInputValid = true;
        this.isDateRangeInputFormatValid = true;
    }
    toggleCalendar() {
        if (this.disabled || this.readonly) {
            return;
        }
        this.isCalendarVisible = !this.isCalendarVisible;
        this.changeDetector.detectChanges();
        if (this.isCalendarVisible) {
            this.setCalendarPosition();
            this.initializeListeners();
        }
        else {
            this.removeListeners();
        }
    }
    updateScreenByModel(model) {
        const dateRange = { start: model.start, end: model.end };
        const isStartDateValid = this.poDateService.isDateRangeValid(dateRange.end, dateRange.start);
        const isDateValid = date => !this.dateFormatFailed(date) && isStartDateValid;
        const endDateFormated = isDateValid(dateRange.end) ? this.formatModelToScreen(dateRange.end) : '';
        const startDateFormated = isDateValid(dateRange.start) ? this.formatModelToScreen(dateRange.start) : '';
        this.endDateInput.nativeElement.value = endDateFormated;
        this.startDateInput.nativeElement.value = startDateFormated;
        this.changeDetector.detectChanges();
    }
    applyFocusOnDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.add('po-datepicker-range-field-focused');
    }
    // Retorna um objeto do tipo PoMask com a mascara configurada.
    buildMask() {
        let mask = this.format.toUpperCase();
        mask = mask.replace(/DD/g, '99');
        mask = mask.replace(/MM/g, '99');
        mask = mask.replace(/YYYY/g, '9999');
        return new PoMask(mask, true);
    }
    formatDate(format, day = '', month = '', year = '') {
        let dateFormatted = format;
        day = day && day.includes('T') ? day.slice(0, 2) : day;
        dateFormatted = dateFormatted.replace('dd', ('0' + day).slice(-2));
        dateFormatted = dateFormatted.replace('mm', ('0' + month).slice(-2));
        dateFormatted = dateFormatted.replace('yyyy', String(year));
        return dateFormatted;
    }
    formatScreenToModel(value = '') {
        const [day, month, year] = value.split('/');
        return value ? this.formatDate('yyyy-mm-dd', day, month, year) : '';
    }
    formatModelToScreen(value = '') {
        const [year, month, day] = value.split('-');
        return value ? this.formatDate(this.format, day, month, year) : '';
    }
    getDateRangeFormatValidation(startDate, endDate, isStartDateTargetEvent) {
        this.setDateRangeInputValidation(startDate, endDate);
        return {
            isValid: this.isDateRangeInputFormatValid && this.isStartDateRangeInputValid && this.verifyValidDate(startDate, endDate),
            dateRangeModel: this.getValidatedModel(startDate, endDate, isStartDateTargetEvent)
        };
    }
    getValidatedModel(startDate, endDate, isStartDateTargetEvent) {
        const dateRangeModel = { start: '', end: '' };
        dateRangeModel.end =
            (isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(endDate) ? endDate : '';
        dateRangeModel.start =
            (!isStartDateTargetEvent || this.isStartDateRangeInputValid) && !this.dateFormatFailed(startDate)
                ? startDate
                : '';
        return dateRangeModel;
    }
    hasAttrCalendar(element) {
        var _a;
        const attrCalendar = 'attr-calendar';
        return (element === null || element === void 0 ? void 0 : element.hasAttribute(attrCalendar)) || ((_a = element === null || element === void 0 ? void 0 : element.parentElement) === null || _a === void 0 ? void 0 : _a.hasAttribute(attrCalendar));
    }
    hasInvalidClass() {
        return (this.poDatepickerRangeElement.nativeElement.classList.contains('ng-invalid') &&
            this.poDatepickerRangeElement.nativeElement.classList.contains('ng-dirty'));
    }
    initializeListeners() {
        this.clickListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnPicker(event);
        });
        this.eventResizeListener = this.renderer.listen('window', 'resize', () => {
            this.isCalendarVisible = false;
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    isEqualBeforeValue(startDate, endDate) {
        return this.isDateRangeInputFormatValid && endDate === this.dateRange.end && startDate === this.dateRange.start;
    }
    isSetFocusOnBackspace(event) {
        return (event.target.name === this.endDateInputName &&
            this.endDateInput.nativeElement.selectionStart === 0 &&
            this.endDateInput.nativeElement.selectionEnd === 0 &&
            event.keyCode === backspaceKey);
    }
    removeFocusFromDatePickerRangeField() {
        this.dateRangeField.nativeElement.classList.remove('po-datepicker-range-field-focused');
    }
    setDateRangeInputValidation(startDate, endDate) {
        this.isStartDateRangeInputValid = this.poDateService.isDateRangeValid(endDate, startDate);
        this.isDateRangeInputFormatValid = !this.dateFormatFailed(startDate) && !this.dateFormatFailed(endDate);
    }
    setFocus(event) {
        const inputElement = PoDatepickerRangeComponent.getTargetElement(event);
        const keyCode = PoDatepickerRangeComponent.getKeyCode(event);
        const inputName = inputElement['name'];
        this.setFocusOnArrowLeft(keyCode, inputName);
        this.setFocusOnArrowRight(keyCode, inputName, inputElement);
        this.setFocusOnStartDateCompleted(keyCode, inputName);
    }
    setFocusAndPosition(position, inputElement, selectionRange) {
        this.focusOnElement(inputElement);
        setTimeout(() => {
            inputElement.nativeElement.setSelectionRange(selectionRange, selectionRange);
            this.poMaskObject.initialPosition = position;
            this.poMaskObject.finalPosition = position;
        });
    }
    focusOnElement(inputElement) {
        inputElement.nativeElement.focus();
    }
    removeListeners() {
        if (this.clickListener) {
            this.clickListener();
        }
        if (this.eventResizeListener) {
            this.eventResizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
    }
    setCalendarPosition() {
        this.controlPosition.setElements(this.calendarPicker.nativeElement, poCalendarContentOffset, this.dateRangeField, ['bottom-left', 'bottom-right', 'top-left', 'top-right'], false, true);
        this.controlPosition.adjustPosition(poCalendarPositionDefault);
    }
    setFocusOnArrowLeft(keyCode, inputName) {
        const isCursorAtStartOfInput = this.endDateInput.nativeElement.selectionStart === 0;
        if (inputName === this.endDateInputName && isCursorAtStartOfInput && keyCode === arrowLeftKey) {
            const inputLength = this.startDateInput.nativeElement.value.length;
            this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
        }
    }
    setFocusOnArrowRight(keyCode, inputName, inputElement) {
        const isCursorAtEndOfInput = this.startDateInput.nativeElement.selectionStart === inputElement.value.length;
        if (inputName === this.startDateInputName && isCursorAtEndOfInput && keyCode === arrowRightKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    setFocusOnBackspace() {
        const inputLength = this.startDateInput.nativeElement.value.length;
        this.startDateInput.nativeElement.value = this.startDateInputValue.slice(0, -1);
        this.setFocusAndPosition(inputLength, this.startDateInput, inputLength);
    }
    setFocusOnStartDateCompleted(keyCode, inputName) {
        const isLastKeyPressed = this.startDateInput.nativeElement.selectionStart === poDatepickerRangeDateLengthDefault;
        const isNewDateCompleted = this.startDateInputValue.length === poDatepickerRangeDateLengthDefault && isLastKeyPressed;
        const isValidKey = PoDatepickerRangeComponent.isValidKey(keyCode);
        if (inputName === this.startDateInputName && isNewDateCompleted && isValidKey) {
            this.setFocusAndPosition(0, this.endDateInput, 0);
        }
    }
    updateModelWhenComplete(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = this.formatScreenToModel(endDate);
        const startDateFormatted = this.formatScreenToModel(startDate);
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(Object.assign({}, this.dateRange));
        }
    }
    updateModelByScreen(isStartDateTargetEvent, startDate, endDate) {
        const endDateFormatted = endDate || this.formatScreenToModel(this.endDateInputValue);
        const startDateFormatted = startDate || this.formatScreenToModel(this.startDateInputValue);
        if (this.isDateRangeInputUncompleted && this.isDirtyDateRangeInput) {
            this.updateModel(this.dateRange);
            return;
        }
        if (this.isEqualBeforeValue(startDateFormatted, endDateFormatted)) {
            this.resetDateRangeInputValidation();
            this.validateModel(this.dateRange);
            return;
        }
        const dateFormatValidation = this.getDateRangeFormatValidation(startDateFormatted, endDateFormatted, isStartDateTargetEvent);
        if (dateFormatValidation.isValid) {
            this.dateRange = { start: startDateFormatted, end: endDateFormatted };
            this.updateModel(this.dateRange);
            this.onChange.emit(Object.assign({}, this.dateRange));
        }
        if (!dateFormatValidation.isValid && this.verifyFormattedDates(startDateFormatted, endDateFormatted)) {
            this.dateRange = Object.assign({}, dateFormatValidation.dateRangeModel);
            this.updateModel(dateFormatValidation.dateRangeModel);
        }
    }
    verifyFormattedDates(start, end) {
        return !!start || !!end;
    }
    wasClickedOnPicker(event) {
        if (!this.isCalendarVisible) {
            return;
        }
        if (!this.calendarPicker.nativeElement.contains(event.target) &&
            !this.iconCalendar.nativeElement.contains(event.target) &&
            !this.hasAttrCalendar(event.target)) {
            this.isCalendarVisible = false;
        }
        this.cd.markForCheck();
    }
}
PoDatepickerRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-datepicker-range',
                template: "<po-field-container [p-help]=\"help\" [p-label]=\"label\" [p-optional]=\"!required && optional\">\n  <div #dateRangeField class=\"po-datepicker-range-field po-input\" [class.po-datepicker-range-field-disabled]=\"disabled\">\n    <div class=\"po-datepicker-range-start-date\">\n      <input\n        #startDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"startDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-separator\">-</div>\n\n    <div class=\"po-datepicker-range-end-date\">\n      <input\n        #endDateInput\n        class=\"po-datepicker-range-input\"\n        maxlength=\"10\"\n        type=\"text\"\n        [autocomplete]=\"autocomplete\"\n        [disabled]=\"disabled\"\n        [name]=\"endDateInputName\"\n        [readonly]=\"readonly\"\n        (blur)=\"onBlur($event)\"\n        (focus)=\"onFocus($event)\"\n        (keydown)=\"onKeydown($event)\"\n        (keyup)=\"onKeyup($event)\"\n        (click)=\"eventOnClick($event)\"\n      />\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <po-clean *ngIf=\"enableCleaner\" (p-change-event)=\"clear()\"></po-clean>\n    </div>\n\n    <div class=\"po-datepicker-range-icon\">\n      <span\n        #iconCalendar\n        class=\"po-icon po-field-icon po-icon-calendar\"\n        [class.po-clickable]=\"!disabled && !readonly\"\n        [class.po-field-icon-disabled]=\"disabled || readonly\"\n        (click)=\"toggleCalendar()\"\n      >\n      </span>\n    </div>\n  </div>\n\n  <po-field-container-bottom [p-error-pattern]=\"getErrorMessage\"></po-field-container-bottom>\n</po-field-container>\n\n<ng-container *ngIf=\"isCalendarVisible\">\n  <div #calendarPicker class=\"po-calendar-range-picker\">\n    <po-calendar\n      p-mode=\"range\"\n      [ngModel]=\"dateRange\"\n      [p-max-date]=\"maxDate\"\n      [p-min-date]=\"minDate\"\n      (ngModelChange)=\"onCalendarChange($event)\"\n    ></po-calendar>\n  </div>\n</ng-container>\n",
                providers,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoDatepickerRangeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: PoControlPositionService },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: PoDateService },
    { type: ElementRef },
    { type: PoLanguageService }
];
PoDatepickerRangeComponent.propDecorators = {
    dateRangeField: [{ type: ViewChild, args: ['dateRangeField', { read: ElementRef, static: true },] }],
    endDateInput: [{ type: ViewChild, args: ['endDateInput', { read: ElementRef, static: true },] }],
    startDateInput: [{ type: ViewChild, args: ['startDateInput', { read: ElementRef, static: true },] }],
    iconCalendar: [{ type: ViewChild, args: ['iconCalendar', { read: ElementRef, static: true },] }],
    calendarPicker: [{ type: ViewChild, args: ['calendarPicker', { read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,