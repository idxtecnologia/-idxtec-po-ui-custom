import { __rest } from "tslib";
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { isTypeof } from '../../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Serviço padrão utilizado para filtrar os dados do componente po-lookup.
 */
export class PoLookupFilterService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.headers = new HttpHeaders({
            'X-PO-No-Message': 'true'
        });
        this.multiple = false;
    }
    getFilteredItems(filteredItemsParams) {
        const { filterParams, advancedFilters } = filteredItemsParams, restFilteredItemsParams = __rest(filteredItemsParams, ["filterParams", "advancedFilters"]);
        const validatedFilterParams = this.validateParams(filterParams);
        const validatedAdvancedFilters = this.validateParams(advancedFilters);
        const params = Object.assign(Object.assign(Object.assign({}, restFilteredItemsParams), validatedFilterParams), validatedAdvancedFilters);
        return this.httpClient.get(this.url, { headers: this.headers, params });
    }
    getObjectByValue(value, filterParams) {
        const validatedFilterParams = this.validateParams(filterParams);
        let newURL;
        let encodedValue;
        if (this.multiple) {
            encodedValue = encodeURIComponent(Array.isArray(value) ? value.join(',') : value);
            newURL = `${this.url}?${this.fieldValue}=${encodedValue}`;
        }
        else {
            encodedValue = encodeURIComponent(value);
            newURL = `${this.url}/${encodedValue}`;
        }
        return this.httpClient
            .get(newURL, { headers: this.headers, params: validatedFilterParams })
            .pipe(map((response) => ('items' in response ? response.items : response)));
    }
    setConfig(url, fieldValue, multiple) {
        this.url = url;
        this.fieldValue = fieldValue;
        this.multiple = multiple;
    }
    validateParams(params) {
        return isTypeof(params, 'object') && !Array.isArray(params) ? params : undefined;
    }
}
PoLookupFilterService.decorators = [
    { type: Injectable }
];
PoLookupFilterService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLWZpbHRlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLWxvb2t1cC9zZXJ2aWNlcy9wby1sb29rdXAtZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBS2xEOzs7Ozs7R0FNRztBQUVILE1BQU0sT0FBTyxxQkFBcUI7SUFTaEMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVJqQyxZQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDO1lBQzlDLGlCQUFpQixFQUFFLE1BQU07U0FDMUIsQ0FBQyxDQUFDO1FBSUssYUFBUSxHQUFHLEtBQUssQ0FBQztJQUVvQixDQUFDO0lBRTlDLGdCQUFnQixDQUFDLG1CQUFnRDtRQUMvRCxNQUFNLEVBQUUsWUFBWSxFQUFFLGVBQWUsS0FBaUMsbUJBQW1CLEVBQS9DLHVCQUF1QixVQUFLLG1CQUFtQixFQUFuRixtQ0FBNkQsQ0FBc0IsQ0FBQztRQUUxRixNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDaEUsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXRFLE1BQU0sTUFBTSxpREFBUSx1QkFBdUIsR0FBSyxxQkFBcUIsR0FBSyx3QkFBd0IsQ0FBRSxDQUFDO1FBRXJHLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQVUsRUFBRSxZQUFrQjtRQUM3QyxNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFaEUsSUFBSSxNQUFNLENBQUM7UUFDWCxJQUFJLFlBQVksQ0FBQztRQUVqQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsWUFBWSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2xGLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxZQUFZLEVBQUUsQ0FBQztTQUMzRDthQUFNO1lBQ0wsWUFBWSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7U0FDeEM7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVO2FBQ25CLEdBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsQ0FBQzthQUNyRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBRUQsU0FBUyxDQUFDLEdBQVcsRUFBRSxVQUFrQixFQUFFLFFBQWlCO1FBQzFELElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7SUFDM0IsQ0FBQztJQUVPLGNBQWMsQ0FBQyxNQUFXO1FBQ2hDLE9BQU8sUUFBUSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ25GLENBQUM7OztZQWxERixVQUFVOzs7WUFsQkYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmltcG9ydCB7IFBvTG9va3VwRmlsdGVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1sb29rdXAtZmlsdGVyLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb0xvb2t1cEZpbHRlcmVkSXRlbXNQYXJhbXMgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3BvLWxvb2t1cC1maWx0ZXJlZC1pdGVtcy1wYXJhbXMuaW50ZXJmYWNlJztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXJ2acOnbyBwYWRyw6NvIHV0aWxpemFkbyBwYXJhIGZpbHRyYXIgb3MgZGFkb3MgZG8gY29tcG9uZW50ZSBwby1sb29rdXAuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBQb0xvb2t1cEZpbHRlclNlcnZpY2UgaW1wbGVtZW50cyBQb0xvb2t1cEZpbHRlciB7XG4gIHJlYWRvbmx5IGhlYWRlcnM6IEh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKHtcbiAgICAnWC1QTy1Oby1NZXNzYWdlJzogJ3RydWUnXG4gIH0pO1xuXG4gIHByaXZhdGUgdXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgZmllbGRWYWx1ZTtcbiAgcHJpdmF0ZSBtdWx0aXBsZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCkge31cblxuICBnZXRGaWx0ZXJlZEl0ZW1zKGZpbHRlcmVkSXRlbXNQYXJhbXM6IFBvTG9va3VwRmlsdGVyZWRJdGVtc1BhcmFtcyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgY29uc3QgeyBmaWx0ZXJQYXJhbXMsIGFkdmFuY2VkRmlsdGVycywgLi4ucmVzdEZpbHRlcmVkSXRlbXNQYXJhbXMgfSA9IGZpbHRlcmVkSXRlbXNQYXJhbXM7XG5cbiAgICBjb25zdCB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgPSB0aGlzLnZhbGlkYXRlUGFyYW1zKGZpbHRlclBhcmFtcyk7XG4gICAgY29uc3QgdmFsaWRhdGVkQWR2YW5jZWRGaWx0ZXJzID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhhZHZhbmNlZEZpbHRlcnMpO1xuXG4gICAgY29uc3QgcGFyYW1zID0geyAuLi5yZXN0RmlsdGVyZWRJdGVtc1BhcmFtcywgLi4udmFsaWRhdGVkRmlsdGVyUGFyYW1zLCAuLi52YWxpZGF0ZWRBZHZhbmNlZEZpbHRlcnMgfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0KHRoaXMudXJsLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgcGFyYW1zIH0pO1xuICB9XG5cbiAgZ2V0T2JqZWN0QnlWYWx1ZSh2YWx1ZTogYW55LCBmaWx0ZXJQYXJhbXM/OiBhbnkpOiBPYnNlcnZhYmxlPEFycmF5PGFueT4gfCB7IFtrZXk6IHN0cmluZ106IGFueSB9PiB7XG4gICAgY29uc3QgdmFsaWRhdGVkRmlsdGVyUGFyYW1zID0gdGhpcy52YWxpZGF0ZVBhcmFtcyhmaWx0ZXJQYXJhbXMpO1xuXG4gICAgbGV0IG5ld1VSTDtcbiAgICBsZXQgZW5jb2RlZFZhbHVlO1xuXG4gICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcbiAgICAgIGVuY29kZWRWYWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlKTtcbiAgICAgIG5ld1VSTCA9IGAke3RoaXMudXJsfT8ke3RoaXMuZmllbGRWYWx1ZX09JHtlbmNvZGVkVmFsdWV9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RlZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgIG5ld1VSTCA9IGAke3RoaXMudXJsfS8ke2VuY29kZWRWYWx1ZX1gO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnRcbiAgICAgIC5nZXQobmV3VVJMLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycywgcGFyYW1zOiB2YWxpZGF0ZWRGaWx0ZXJQYXJhbXMgfSlcbiAgICAgIC5waXBlKG1hcCgocmVzcG9uc2U6IGFueSkgPT4gKCdpdGVtcycgaW4gcmVzcG9uc2UgPyByZXNwb25zZS5pdGVtcyA6IHJlc3BvbnNlKSkpO1xuICB9XG5cbiAgc2V0Q29uZmlnKHVybDogc3RyaW5nLCBmaWVsZFZhbHVlOiBzdHJpbmcsIG11bHRpcGxlOiBib29sZWFuKSB7XG4gICAgdGhpcy51cmwgPSB1cmw7XG4gICAgdGhpcy5maWVsZFZhbHVlID0gZmllbGRWYWx1ZTtcbiAgICB0aGlzLm11bHRpcGxlID0gbXVsdGlwbGU7XG4gIH1cblxuICBwcml2YXRlIHZhbGlkYXRlUGFyYW1zKHBhcmFtczogYW55KSB7XG4gICAgcmV0dXJuIGlzVHlwZW9mKHBhcmFtcywgJ29iamVjdCcpICYmICFBcnJheS5pc0FycmF5KHBhcmFtcykgPyBwYXJhbXMgOiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==