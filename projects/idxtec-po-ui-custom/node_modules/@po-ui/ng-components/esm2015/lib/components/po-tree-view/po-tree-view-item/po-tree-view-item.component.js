import { animate, state, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { PoTreeViewService } from '../services/po-tree-view.service';
export class PoTreeViewItemComponent {
    constructor(treeViewService) {
        this.treeViewService = treeViewService;
    }
    get hasSubItems() {
        return !!(this.item.subItems && this.item.subItems.length);
    }
    onClick(event) {
        event.preventDefault();
        event.stopPropagation();
        this.item.expanded = !this.item.expanded;
        this.treeViewService.emitExpandedEvent(Object.assign({}, this.item));
    }
    onSelect(selectedItem) {
        this.treeViewService.emitSelectedEvent(Object.assign({}, selectedItem));
    }
    trackByFunction(index) {
        return index;
    }
}
PoTreeViewItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-tree-view-item',
                template: "<li class=\"po-tree-view-item\">\n  <po-tree-view-item-header\n    [p-item]=\"item\"\n    [p-selectable]=\"selectable\"\n    (p-expanded)=\"onClick($event)\"\n    (p-selected)=\"onSelect(item)\"\n  >\n  </po-tree-view-item-header>\n\n  <ul *ngIf=\"hasSubItems\" class=\"po-tree-view-item-group\" [@toggleBody]=\"item.expanded ? 'expanded' : 'collapsed'\">\n    <po-tree-view-item\n      *ngFor=\"let subItem of item.subItems; trackBy: trackByFunction\"\n      [p-item]=\"subItem\"\n      [p-selectable]=\"selectable\"\n    >\n    </po-tree-view-item>\n  </ul>\n</li>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('toggleBody', [
                        state('collapsed', style({
                            'overflow-y': 'hidden',
                            visibility: 'hidden',
                            opacity: 0,
                            height: '0'
                        })),
                        transition('expanded => collapsed', [
                            style({ height: '*' }),
                            animate(100, style({ opacity: 0 })),
                            animate(200, style({ height: 0 }))
                        ]),
                        transition('collapsed => expanded', [
                            style({ height: '0' }),
                            animate(100, style({ opacity: 1 })),
                            animate(200, style({ height: '*' }))
                        ])
                    ])
                ]
            },] }
];
PoTreeViewItemComponent.ctorParameters = () => [
    { type: PoTreeViewService }
];
PoTreeViewItemComponent.propDecorators = {
    item: [{ type: Input, args: ['p-item',] }],
    selectable: [{ type: Input, args: ['p-selectable',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdHJlZS12aWV3LWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLXRyZWUtdmlldy9wby10cmVlLXZpZXctaXRlbS9wby10cmVlLXZpZXctaXRlbS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUcxRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQThCckUsTUFBTSxPQUFPLHVCQUF1QjtJQVNsQyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7SUFBRyxDQUFDO0lBSjFELElBQUksV0FBVztRQUNiLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUlELE9BQU8sQ0FBQyxLQUFpQjtRQUN2QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXhCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7UUFFekMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsbUJBQU0sSUFBSSxDQUFDLElBQUksRUFBRyxDQUFDO0lBQzNELENBQUM7SUFFRCxRQUFRLENBQUMsWUFBNEI7UUFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxpQkFBaUIsbUJBQU0sWUFBWSxFQUFHLENBQUM7SUFDOUQsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFhO1FBQzNCLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQzs7O1lBdERGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3Qixva0JBQWlEO2dCQUNqRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtnQkFDL0MsVUFBVSxFQUFFO29CQUNWLE9BQU8sQ0FBQyxZQUFZLEVBQUU7d0JBQ3BCLEtBQUssQ0FDSCxXQUFXLEVBQ1gsS0FBSyxDQUFDOzRCQUNKLFlBQVksRUFBRSxRQUFROzRCQUN0QixVQUFVLEVBQUUsUUFBUTs0QkFDcEIsT0FBTyxFQUFFLENBQUM7NEJBQ1YsTUFBTSxFQUFFLEdBQUc7eUJBQ1osQ0FBQyxDQUNIO3dCQUNELFVBQVUsQ0FBQyx1QkFBdUIsRUFBRTs0QkFDbEMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDOzRCQUN0QixPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNuQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3lCQUNuQyxDQUFDO3dCQUNGLFVBQVUsQ0FBQyx1QkFBdUIsRUFBRTs0QkFDbEMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDOzRCQUN0QixPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQUNuQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO3lCQUNyQyxDQUFDO3FCQUNILENBQUM7aUJBQ0g7YUFDRjs7O1lBN0JRLGlCQUFpQjs7O21CQStCdkIsS0FBSyxTQUFDLFFBQVE7eUJBRWQsS0FBSyxTQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhbmltYXRlLCBzdGF0ZSwgc3R5bGUsIHRyYW5zaXRpb24sIHRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcbmltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvVHJlZVZpZXdJdGVtIH0gZnJvbSAnLi9wby10cmVlLXZpZXctaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9UcmVlVmlld1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9wby10cmVlLXZpZXcuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXRyZWUtdmlldy1pdGVtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXRyZWUtdmlldy1pdGVtLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGFuaW1hdGlvbnM6IFtcbiAgICB0cmlnZ2VyKCd0b2dnbGVCb2R5JywgW1xuICAgICAgc3RhdGUoXG4gICAgICAgICdjb2xsYXBzZWQnLFxuICAgICAgICBzdHlsZSh7XG4gICAgICAgICAgJ292ZXJmbG93LXknOiAnaGlkZGVuJyxcbiAgICAgICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJyxcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIGhlaWdodDogJzAnXG4gICAgICAgIH0pXG4gICAgICApLFxuICAgICAgdHJhbnNpdGlvbignZXhwYW5kZWQgPT4gY29sbGFwc2VkJywgW1xuICAgICAgICBzdHlsZSh7IGhlaWdodDogJyonIH0pLFxuICAgICAgICBhbmltYXRlKDEwMCwgc3R5bGUoeyBvcGFjaXR5OiAwIH0pKSxcbiAgICAgICAgYW5pbWF0ZSgyMDAsIHN0eWxlKHsgaGVpZ2h0OiAwIH0pKVxuICAgICAgXSksXG4gICAgICB0cmFuc2l0aW9uKCdjb2xsYXBzZWQgPT4gZXhwYW5kZWQnLCBbXG4gICAgICAgIHN0eWxlKHsgaGVpZ2h0OiAnMCcgfSksXG4gICAgICAgIGFuaW1hdGUoMTAwLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpLFxuICAgICAgICBhbmltYXRlKDIwMCwgc3R5bGUoeyBoZWlnaHQ6ICcqJyB9KSlcbiAgICAgIF0pXG4gICAgXSlcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBQb1RyZWVWaWV3SXRlbUNvbXBvbmVudCB7XG4gIEBJbnB1dCgncC1pdGVtJykgaXRlbTogUG9UcmVlVmlld0l0ZW07XG5cbiAgQElucHV0KCdwLXNlbGVjdGFibGUnKSBzZWxlY3RhYmxlOiBib29sZWFuO1xuXG4gIGdldCBoYXNTdWJJdGVtcygpIHtcbiAgICByZXR1cm4gISEodGhpcy5pdGVtLnN1Ykl0ZW1zICYmIHRoaXMuaXRlbS5zdWJJdGVtcy5sZW5ndGgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmVlVmlld1NlcnZpY2U6IFBvVHJlZVZpZXdTZXJ2aWNlKSB7fVxuXG4gIG9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgdGhpcy5pdGVtLmV4cGFuZGVkID0gIXRoaXMuaXRlbS5leHBhbmRlZDtcblxuICAgIHRoaXMudHJlZVZpZXdTZXJ2aWNlLmVtaXRFeHBhbmRlZEV2ZW50KHsgLi4udGhpcy5pdGVtIH0pO1xuICB9XG5cbiAgb25TZWxlY3Qoc2VsZWN0ZWRJdGVtOiBQb1RyZWVWaWV3SXRlbSkge1xuICAgIHRoaXMudHJlZVZpZXdTZXJ2aWNlLmVtaXRTZWxlY3RlZEV2ZW50KHsgLi4uc2VsZWN0ZWRJdGVtIH0pO1xuICB9XG5cbiAgdHJhY2tCeUZ1bmN0aW9uKGluZGV4OiBudW1iZXIpIHtcbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbn1cbiJdfQ==