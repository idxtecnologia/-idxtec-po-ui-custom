import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { isFirefox, isIE, isIEOrEdge, openExternalLink } from './../../../../utils/util';
import { PoKeyCodeEnum } from './../../../../enums/po-key-code.enum';
import { PoRichTextService } from '../po-rich-text.service';
const poRichTextBodyCommands = [
    'bold',
    'italic',
    'underline',
    'justifyleft',
    'justifycenter',
    'justifyright',
    'justifyfull',
    'insertUnorderedList',
    'Createlink'
];
export class PoRichTextBodyComponent {
    constructor(richTextService) {
        this.richTextService = richTextService;
        this.change = new EventEmitter();
        this.commands = new EventEmitter();
        this.selectedLink = new EventEmitter();
        this.shortcutCommand = new EventEmitter();
        this.value = new EventEmitter();
        this.blur = new EventEmitter();
        this.onAnchorClick = event => {
            const { target, ctrlKey, metaKey } = event;
            let url;
            let elementLink;
            if (ctrlKey || metaKey) {
                if (event.path) {
                    event.path.forEach(element => {
                        if (element.nodeName === 'A') {
                            url = element.href;
                            elementLink = element;
                        }
                    });
                }
                else {
                    url = target.attributes.href.value;
                    elementLink = target;
                }
                openExternalLink(url);
                elementLink.classList.remove('po-clickable');
            }
        };
    }
    ngOnInit() {
        this.bodyElement.nativeElement.designMode = 'on';
        this.modelSubscription = this.richTextService.getModel().subscribe(modelValue => {
            this.modelValue = modelValue;
            this.bodyElement.nativeElement.innerHTML = '';
            this.updateValueWithModelValue();
            this.addClickListenerOnAnchorElements();
        });
    }
    ngOnDestroy() {
        var _a;
        (_a = this.modelSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    executeCommand(command) {
        this.bodyElement.nativeElement.focus();
        if (typeof command === 'object') {
            if (command.command === 'InsertHTML') {
                const { command: linkCommand, value: { urlLink }, value: { urlLinkText } } = command;
                this.handleCommandLink(linkCommand, urlLink, urlLinkText);
            }
            else {
                document.execCommand(command.command, false, command.value);
            }
        }
        else {
            document.execCommand(command, false, null);
        }
        this.updateModel();
        this.value.emit(this.modelValue);
    }
    linkEditing(event) {
        this.isLinkEditing = !!event;
    }
    onBlur() {
        this.blur.emit();
        if (this.modelValue !== this.valueBeforeChange) {
            clearTimeout(this.timeoutChange);
            this.timeoutChange = setTimeout(() => {
                this.change.emit(this.modelValue);
            }, 200);
        }
    }
    focus() {
        this.bodyElement.nativeElement.focus();
    }
    onClick() {
        this.emitSelectionCommands();
    }
    onFocus() {
        this.valueBeforeChange = this.modelValue;
    }
    onKeyDown(event) {
        const keyK = event.keyCode === PoKeyCodeEnum.keyK;
        const isLinkShortcut = (keyK && event.ctrlKey) || (keyK && event.metaKey);
        if (isLinkShortcut) {
            event.preventDefault();
            this.shortcutCommand.emit();
        }
        this.toggleCursorOnLink(event, 'add');
    }
    onKeyUp(event) {
        this.toggleCursorOnLink(event, 'remove');
        this.removeBrElement();
        this.updateModel();
        this.emitSelectionCommands();
    }
    onPaste() {
        this.update();
        setTimeout(() => this.addClickListenerOnAnchorElements());
    }
    update() {
        setTimeout(() => this.updateModel());
        setTimeout(() => {
            this.removeBrElement();
            this.updateModel();
            this.emitSelectionCommands();
        });
    }
    addClickListenerOnAnchorElements() {
        this.bodyElement.nativeElement.querySelectorAll('a').forEach(element => {
            element.addEventListener('click', this.onAnchorClick);
        });
    }
    emitSelectionCommands() {
        const commands = poRichTextBodyCommands.filter(command => document.queryCommandState(command));
        const rgbColor = document.queryCommandValue('ForeColor');
        let hexColor;
        if (!isIE()) {
            hexColor = this.rgbToHex(rgbColor);
        }
        if (this.isCursorPositionedInALink()) {
            commands.push('Createlink');
        }
        this.selectedLink.emit(this.linkElement); // importante ficar fora do if para emitir mesmo undefined.
        this.commands.emit({ commands, hexColor });
    }
    getTextSelection() {
        const textSelection = document.getSelection();
        if (!textSelection) {
            return;
        }
        const focusNode = textSelection.focusNode ? textSelection.focusNode.parentElement : undefined;
        const anchorNode = textSelection.anchorNode ? textSelection.anchorNode.parentNode : undefined;
        const node = focusNode || anchorNode;
        let tagName;
        if (node) {
            tagName = node['tagName'] || node['nodeName'];
            return {
                node,
                tagName
            };
        }
    }
    handleCommandLink(linkCommand, urlLink, urlLinkText) {
        if (isIE()) {
            this.insertHtmlLinkElement(urlLink, urlLinkText);
        }
        else {
            // '&nbsp;' necessário para o cursor não ficar preso dentro do link no Firefox.
            const linkValue = isFirefox() && !this.isLinkEditing
                ? `&nbsp;${this.makeLinkTag(urlLink, urlLinkText)}&nbsp;`
                : this.makeLinkTag(urlLink, urlLinkText);
            document.execCommand(linkCommand, false, linkValue);
        }
        this.addClickListenerOnAnchorElements();
    }
    // tratamento específico para IE pois não suporta o comando 'insertHTML'.
    insertHtmlLinkElement(urlLink, urlLinkText) {
        const selection = document.getSelection();
        const selectionRange = selection.getRangeAt(0);
        const elementLink = document.createElement('a');
        const elementlinkText = document.createTextNode(urlLinkText);
        elementLink.appendChild(elementlinkText);
        elementLink.href = urlLink;
        elementLink.setAttribute('target', '_blank');
        elementLink.classList.add('po-rich-text-link');
        selectionRange.deleteContents();
        selectionRange.insertNode(elementLink);
    }
    isCursorPositionedInALink() {
        const textSelection = this.getTextSelection();
        this.linkElement = undefined;
        let isLink = false;
        if (textSelection && textSelection.node && textSelection.tagName === 'A') {
            this.linkElement = textSelection.node;
            isLink = true;
        }
        else if ((isFirefox() || isIEOrEdge()) && this.verifyCursorPositionInFirefoxIEEdge()) {
            isLink = true;
        }
        else {
            isLink = textSelection ? this.isParentNodeAnchor(textSelection) : false;
        }
        return isLink;
    }
    isParentNodeAnchor(textSelection) {
        let element = textSelection.node;
        let isLink = false;
        while (element && (element.tagName !== null || element.nodeName !== null)) {
            if (element.tagName === 'A' || element.nodeName === 'A') {
                this.linkElement = element;
                isLink = true;
                return isLink;
            }
            element = element.parentElement || element.parentNode;
        }
        this.linkElement = undefined;
        return isLink;
    }
    makeLinkTag(urlLink, urlLinkText) {
        return `<a class="po-rich-text-link" href="${urlLink}" target="_blank">${urlLinkText || urlLink}</a>`;
    }
    // Tratamento necessário para eliminar a tag <br> criada no firefox quando o body for limpo.
    removeBrElement() {
        const bodyElement = this.bodyElement.nativeElement;
        if (!bodyElement.innerText.trim() && bodyElement.childNodes.length === 1 && bodyElement.querySelector('br')) {
            bodyElement.querySelector('br').remove();
        }
    }
    rgbToHex(rgb) {
        // Tratamento necessário para converter o código rgb para hexadecimal.
        const sep = rgb.indexOf(',') > -1 ? ',' : ' ';
        rgb = rgb.substr(4).split(')')[0].split(sep);
        let r = (+rgb[0]).toString(16);
        let g = (+rgb[1]).toString(16);
        let b = (+rgb[2]).toString(16);
        if (r.length === 1) {
            r = '0' + r;
        }
        if (g.length === 1) {
            g = '0' + g;
        }
        if (b.length === 1) {
            b = '0' + b;
        }
        return '#' + r + g + b;
    }
    toggleCursorOnLink(event, action) {
        const selection = document.getSelection();
        const element = selection.focusNode ? selection.focusNode.parentNode : undefined;
        const isCtrl = event.key === 'Control';
        const isCommand = event.key === 'Meta';
        const isOnCtrlLink = this.isCursorPositionedInALink() && (isCtrl || isCommand);
        if (element) {
            if (isOnCtrlLink) {
                element['classList'][action]('po-clickable');
            }
            else {
                const isClickable = element['classList'] && element['classList'].contains('po-clickable');
                if (isClickable) {
                    element['classList'].remove('po-clickable');
                }
            }
            this.updateModel();
        }
    }
    updateModel() {
        this.modelValue = this.bodyElement.nativeElement.innerHTML;
        this.value.emit(this.modelValue);
    }
    updateValueWithModelValue() {
        if (this.modelValue) {
            this.bodyElement.nativeElement.insertAdjacentHTML('afterbegin', this.modelValue);
        }
    }
    verifyCursorPositionInFirefoxIEEdge() {
        const textSelection = document.getSelection();
        const nodeLink = textSelection.focusNode;
        let isLink = false;
        if (nodeLink && nodeLink.nodeName === 'A') {
            this.linkElement = nodeLink;
            isLink = true;
        }
        else {
            const range = textSelection.getRangeAt(0);
            const fragmentDocument = range.cloneContents();
            const element = fragmentDocument.childNodes[0] || fragmentDocument.firstElementChild;
            this.linkElement = element && element.nodeName === 'A' ? element : undefined;
            isLink = !!this.linkElement;
        }
        return isLink;
    }
}
PoRichTextBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-body',
                template: "<div\n  #bodyElement\n  class=\"po-rich-text-body\"\n  tabindex=\"0\"\n  [attr.contenteditable]=\"!readonly\"\n  [attr.data-placeholder]=\"placeholder\"\n  [style.height.px]=\"height\"\n  (blur)=\"onBlur()\"\n  (click)=\"onClick()\"\n  (cut)=\"update()\"\n  (focus)=\"onFocus()\"\n  (keydown)=\"onKeyDown($event)\"\n  (keyup)=\"onKeyUp($event)\"\n  (paste)=\"onPaste()\"\n></div>\n"
            },] }
];
PoRichTextBodyComponent.ctorParameters = () => [
    { type: PoRichTextService }
];
PoRichTextBodyComponent.propDecorators = {
    bodyElement: [{ type: ViewChild, args: ['bodyElement', { static: true },] }],
    height: [{ type: Input, args: ['p-height',] }],
    modelValue: [{ type: Input, args: ['p-model-value',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    change: [{ type: Output, args: ['p-change',] }],
    commands: [{ type: Output, args: ['p-commands',] }],
    selectedLink: [{ type: Output, args: ['p-selected-link',] }],
    shortcutCommand: [{ type: Output, args: ['p-shortcut-command',] }],
    value: [{ type: Output, args: ['p-value',] }],
    blur: [{ type: Output, args: ['p-blur',] }]
};
//# sourceMappingURL=data:application/json;base64,