import { ChangeDetectorRef, ElementRef, Directive } from '@angular/core';
import { PoInputGeneric } from '../po-input-generic/po-input-generic';
export class PoNumberBaseComponent extends PoInputGeneric {
    /* istanbul ignore next */
    constructor(elementRef, cd) {
        super(elementRef, cd);
        this.type = 'number';
        this.invalidInputValueOnBlur = false;
    }
    eventOnInput(e) {
        if (!this.mask) {
            let value = e.target.value;
            const valueMaxlength = this.validMaxLength(this.maxlength, value);
            this.invalidInputValueOnBlur = false;
            if (value !== valueMaxlength) {
                value = valueMaxlength;
                this.inputEl.nativeElement.value = value;
            }
            this.callOnChange(this.formatNumber(value));
        }
    }
    onBlur(event) {
        const target = event.target;
        this.invalidInputValueOnBlur = target.value === '' && !target.validity.valid;
        if (this.invalidInputValueOnBlur) {
            this.callOnChange('Valor Inválido');
        }
        this.eventOnBlur(event);
    }
    onKeyDown(event) {
        if (!this.isKeyAllowed(event)) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    validMaxLength(maxlength, value) {
        if (maxlength && value.length > maxlength) {
            const substringValue = value.toString().substring(0, maxlength);
            if (substringValue && this.isEndWithDot(substringValue)) {
                return substringValue.toString().substring(0, maxlength - 1);
            }
            return substringValue;
        }
        return value;
    }
    writeValueModel(value) {
        if (this.inputEl) {
            if (value || value === 0) {
                if (this.mask) {
                    this.inputEl.nativeElement.value = this.objMask.controlFormatting(String(value));
                    // Se o model for definido como formatado, então precisa atualizá-lo no primeiro acesso
                    if (this.objMask.formatModel) {
                        this.onChangePropagate(this.objMask.valueToModel);
                    }
                }
                else {
                    this.inputEl.nativeElement.value = value;
                }
            }
            else {
                // Se for o valor for undefined, deve limpar o campo
                this.inputEl.nativeElement.value = '';
            }
        }
        // Emite evento quando o model é atualizado, inclusive a primeira vez
        this.changeModel.emit(value);
    }
    isEndWithDot(value) {
        return value && value.lastIndexOf('.') === value.length - 1;
    }
    formatNumber(value) {
        return value ? Number(value) : null;
    }
    isKeyAllowed(event) {
        return this.isShortcut(event) || this.isControlKeys(event) || !this.isInvalidKey(event.key);
    }
    isInvalidKey(key) {
        const validatesKey = new RegExp(/[a-zA-Z:;=_´`^~"'?!@#$%¨&*()><{}çÇ\[\]/\\|]+/);
        return validatesKey.test(key);
    }
    isShortcut(event) {
        const key = event.keyCode;
        const ctrl = event.ctrlKey || event.metaKey;
        const keyA = key === 65;
        const keyC = key === 67;
        const keyX = key === 88;
        const keyV = key === 86;
        return (ctrl && keyC) || (ctrl && keyV) || (ctrl && keyA) || (ctrl && keyX);
    }
    isControlKeys(event) {
        const controlKeys = [
            'Backspace',
            'ArrowLeft',
            'ArrowRight',
            'ArrowUp',
            'ArrowDown',
            'Left',
            'Right',
            'Up',
            'Down',
            'Tab',
            'Delete'
        ];
        return controlKeys.indexOf(event.key) !== -1;
    }
}
PoNumberBaseComponent.decorators = [
    { type: Directive }
];
PoNumberBaseComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbnVtYmVyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWZpZWxkL3BvLW51bWJlci9wby1udW1iZXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBR3RFLE1BQU0sT0FBZ0IscUJBQXNCLFNBQVEsY0FBYztJQUtoRSwwQkFBMEI7SUFDMUIsWUFBWSxVQUFzQixFQUFFLEVBQXFCO1FBQ3ZELEtBQUssQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFOeEIsU0FBSSxHQUFHLFFBQVEsQ0FBQztRQUVOLDRCQUF1QixHQUFHLEtBQUssQ0FBQztJQUsxQyxDQUFDO0lBRUQsWUFBWSxDQUFDLENBQU07UUFDakIsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUMzQixNQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDbEUsSUFBSSxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztZQUVyQyxJQUFJLEtBQUssS0FBSyxjQUFjLEVBQUU7Z0JBQzVCLEtBQUssR0FBRyxjQUFjLENBQUM7Z0JBRXZCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7YUFDMUM7WUFFRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztTQUM3QztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsS0FBVTtRQUNmLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDNUIsSUFBSSxDQUFDLHVCQUF1QixHQUFHLE1BQU0sQ0FBQyxLQUFLLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFFN0UsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUU7WUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQUs7UUFDYixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM3QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxTQUFpQixFQUFFLEtBQWE7UUFDN0MsSUFBSSxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLEVBQUU7WUFDekMsTUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFaEUsSUFBSSxjQUFjLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsRUFBRTtnQkFDdkQsT0FBTyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDOUQ7WUFFRCxPQUFPLGNBQWMsQ0FBQztTQUN2QjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELGVBQWUsQ0FBQyxLQUFLO1FBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLEtBQUssSUFBSSxLQUFLLEtBQUssQ0FBQyxFQUFFO2dCQUN4QixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ2IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBRWpGLHVGQUF1RjtvQkFDdkYsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTt3QkFDNUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7cUJBQ25EO2lCQUNGO3FCQUFNO29CQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7aUJBQzFDO2FBQ0Y7aUJBQU07Z0JBQ0wsb0RBQW9EO2dCQUNwRCxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO2FBQ3ZDO1NBQ0Y7UUFFRCxxRUFBcUU7UUFFckUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVPLFlBQVksQ0FBQyxLQUFhO1FBQ2hDLE9BQU8sS0FBSyxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVPLFlBQVksQ0FBQyxLQUFLO1FBQ3hCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBRU8sWUFBWSxDQUFDLEtBQUs7UUFDeEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5RixDQUFDO0lBRU8sWUFBWSxDQUFDLEdBQUc7UUFDdEIsTUFBTSxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQUMsOENBQThDLENBQUMsQ0FBQztRQUNoRixPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVPLFVBQVUsQ0FBQyxLQUFLO1FBQ3RCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDMUIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxHQUFHLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFDeEIsTUFBTSxJQUFJLEdBQUcsR0FBRyxLQUFLLEVBQUUsQ0FBQztRQUN4QixNQUFNLElBQUksR0FBRyxHQUFHLEtBQUssRUFBRSxDQUFDO1FBQ3hCLE1BQU0sSUFBSSxHQUFHLEdBQUcsS0FBSyxFQUFFLENBQUM7UUFFeEIsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU8sYUFBYSxDQUFDLEtBQUs7UUFDekIsTUFBTSxXQUFXLEdBQUc7WUFDbEIsV0FBVztZQUNYLFdBQVc7WUFDWCxZQUFZO1lBQ1osU0FBUztZQUNULFdBQVc7WUFDWCxNQUFNO1lBQ04sT0FBTztZQUNQLElBQUk7WUFDSixNQUFNO1lBQ04sS0FBSztZQUNMLFFBQVE7U0FDVCxDQUFDO1FBRUYsT0FBTyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7WUEvSEYsU0FBUzs7O1lBSmtCLFVBQVU7WUFBN0IsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0lucHV0R2VuZXJpYyB9IGZyb20gJy4uL3BvLWlucHV0LWdlbmVyaWMvcG8taW5wdXQtZ2VuZXJpYyc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFBvTnVtYmVyQmFzZUNvbXBvbmVudCBleHRlbmRzIFBvSW5wdXRHZW5lcmljIHtcbiAgdHlwZSA9ICdudW1iZXInO1xuXG4gIHByb3RlY3RlZCBpbnZhbGlkSW5wdXRWYWx1ZU9uQmx1ciA9IGZhbHNlO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZikge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYsIGNkKTtcbiAgfVxuXG4gIGV2ZW50T25JbnB1dChlOiBhbnkpIHtcbiAgICBpZiAoIXRoaXMubWFzaykge1xuICAgICAgbGV0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgICBjb25zdCB2YWx1ZU1heGxlbmd0aCA9IHRoaXMudmFsaWRNYXhMZW5ndGgodGhpcy5tYXhsZW5ndGgsIHZhbHVlKTtcbiAgICAgIHRoaXMuaW52YWxpZElucHV0VmFsdWVPbkJsdXIgPSBmYWxzZTtcblxuICAgICAgaWYgKHZhbHVlICE9PSB2YWx1ZU1heGxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlTWF4bGVuZ3RoO1xuXG4gICAgICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FsbE9uQ2hhbmdlKHRoaXMuZm9ybWF0TnVtYmVyKHZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAgb25CbHVyKGV2ZW50OiBhbnkpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgdGhpcy5pbnZhbGlkSW5wdXRWYWx1ZU9uQmx1ciA9IHRhcmdldC52YWx1ZSA9PT0gJycgJiYgIXRhcmdldC52YWxpZGl0eS52YWxpZDtcblxuICAgIGlmICh0aGlzLmludmFsaWRJbnB1dFZhbHVlT25CbHVyKSB7XG4gICAgICB0aGlzLmNhbGxPbkNoYW5nZSgnVmFsb3IgSW52w6FsaWRvJyk7XG4gICAgfVxuXG4gICAgdGhpcy5ldmVudE9uQmx1cihldmVudCk7XG4gIH1cblxuICBvbktleURvd24oZXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuaXNLZXlBbGxvd2VkKGV2ZW50KSkge1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkTWF4TGVuZ3RoKG1heGxlbmd0aDogbnVtYmVyLCB2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKG1heGxlbmd0aCAmJiB2YWx1ZS5sZW5ndGggPiBtYXhsZW5ndGgpIHtcbiAgICAgIGNvbnN0IHN1YnN0cmluZ1ZhbHVlID0gdmFsdWUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgbWF4bGVuZ3RoKTtcblxuICAgICAgaWYgKHN1YnN0cmluZ1ZhbHVlICYmIHRoaXMuaXNFbmRXaXRoRG90KHN1YnN0cmluZ1ZhbHVlKSkge1xuICAgICAgICByZXR1cm4gc3Vic3RyaW5nVmFsdWUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgbWF4bGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdWJzdHJpbmdWYWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICB3cml0ZVZhbHVlTW9kZWwodmFsdWUpIHtcbiAgICBpZiAodGhpcy5pbnB1dEVsKSB7XG4gICAgICBpZiAodmFsdWUgfHwgdmFsdWUgPT09IDApIHtcbiAgICAgICAgaWYgKHRoaXMubWFzaykge1xuICAgICAgICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdGhpcy5vYmpNYXNrLmNvbnRyb2xGb3JtYXR0aW5nKFN0cmluZyh2YWx1ZSkpO1xuXG4gICAgICAgICAgLy8gU2UgbyBtb2RlbCBmb3IgZGVmaW5pZG8gY29tbyBmb3JtYXRhZG8sIGVudMOjbyBwcmVjaXNhIGF0dWFsaXrDoS1sbyBubyBwcmltZWlybyBhY2Vzc29cbiAgICAgICAgICBpZiAodGhpcy5vYmpNYXNrLmZvcm1hdE1vZGVsKSB7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlUHJvcGFnYXRlKHRoaXMub2JqTWFzay52YWx1ZVRvTW9kZWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlucHV0RWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZSBmb3IgbyB2YWxvciBmb3IgdW5kZWZpbmVkLCBkZXZlIGxpbXBhciBvIGNhbXBvXG4gICAgICAgIHRoaXMuaW5wdXRFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW1pdGUgZXZlbnRvIHF1YW5kbyBvIG1vZGVsIMOpIGF0dWFsaXphZG8sIGluY2x1c2l2ZSBhIHByaW1laXJhIHZlelxuXG4gICAgdGhpcy5jaGFuZ2VNb2RlbC5lbWl0KHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgaXNFbmRXaXRoRG90KHZhbHVlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdmFsdWUubGFzdEluZGV4T2YoJy4nKSA9PT0gdmFsdWUubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0TnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID8gTnVtYmVyKHZhbHVlKSA6IG51bGw7XG4gIH1cblxuICBwcml2YXRlIGlzS2V5QWxsb3dlZChldmVudCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmlzU2hvcnRjdXQoZXZlbnQpIHx8IHRoaXMuaXNDb250cm9sS2V5cyhldmVudCkgfHwgIXRoaXMuaXNJbnZhbGlkS2V5KGV2ZW50LmtleSk7XG4gIH1cblxuICBwcml2YXRlIGlzSW52YWxpZEtleShrZXkpIHtcbiAgICBjb25zdCB2YWxpZGF0ZXNLZXkgPSBuZXcgUmVnRXhwKC9bYS16QS1aOjs9X8K0YF5+XCInPyFAIyQlwqgmKigpPjx7fcOnw4dcXFtcXF0vXFxcXHxdKy8pO1xuICAgIHJldHVybiB2YWxpZGF0ZXNLZXkudGVzdChrZXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1Nob3J0Y3V0KGV2ZW50KTogYm9vbGVhbiB7XG4gICAgY29uc3Qga2V5ID0gZXZlbnQua2V5Q29kZTtcbiAgICBjb25zdCBjdHJsID0gZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5O1xuICAgIGNvbnN0IGtleUEgPSBrZXkgPT09IDY1O1xuICAgIGNvbnN0IGtleUMgPSBrZXkgPT09IDY3O1xuICAgIGNvbnN0IGtleVggPSBrZXkgPT09IDg4O1xuICAgIGNvbnN0IGtleVYgPSBrZXkgPT09IDg2O1xuXG4gICAgcmV0dXJuIChjdHJsICYmIGtleUMpIHx8IChjdHJsICYmIGtleVYpIHx8IChjdHJsICYmIGtleUEpIHx8IChjdHJsICYmIGtleVgpO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0NvbnRyb2xLZXlzKGV2ZW50KSB7XG4gICAgY29uc3QgY29udHJvbEtleXMgPSBbXG4gICAgICAnQmFja3NwYWNlJyxcbiAgICAgICdBcnJvd0xlZnQnLFxuICAgICAgJ0Fycm93UmlnaHQnLFxuICAgICAgJ0Fycm93VXAnLFxuICAgICAgJ0Fycm93RG93bicsXG4gICAgICAnTGVmdCcsXG4gICAgICAnUmlnaHQnLFxuICAgICAgJ1VwJyxcbiAgICAgICdEb3duJyxcbiAgICAgICdUYWInLFxuICAgICAgJ0RlbGV0ZSdcbiAgICBdO1xuXG4gICAgcmV0dXJuIGNvbnRyb2xLZXlzLmluZGV4T2YoZXZlbnQua2V5KSAhPT0gLTE7XG4gIH1cbn1cbiJdfQ==