import { Component, EventEmitter, Output, ViewChild } from '@angular/core';
import { isExternalLink, isIE } from '../../../../utils/util';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
export class PoRichTextLinkModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.linkEditing = new EventEmitter();
        this.selection = document.getSelection();
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.linkConfirmAction(),
            disabled: true,
            action: () => (this.isLinkEditing ? this.toEditLink() : this.toInsertLink(this.urlLink, this.urlLinkText))
        };
    }
    linkConfirmAction() {
        return this.isLinkEditing ? this.literals.editLink : this.literals.insertLink;
    }
    formModelValidate() {
        var _a;
        return (this.modalConfirmAction.disabled = (_a = this.modalLinkForm) === null || _a === void 0 ? void 0 : _a.invalid);
    }
    openModal(selectedLinkElement) {
        this.saveCursorPosition();
        this.prepareModalForLink(selectedLinkElement);
        this.modalConfirmAction.label = this.linkConfirmAction();
        this.modal.open();
    }
    selectedLink(linkElement) {
        this.isSelectedLink = !!linkElement;
        this.linkElement = linkElement;
    }
    checkIfIsEmpty(urlLink, urlLinkText) {
        return urlLinkText === undefined || urlLinkText.trim() === '' ? urlLink : urlLinkText;
    }
    cleanUpFields() {
        this.urlLink = undefined;
        this.urlLinkText = undefined;
        this.isLinkEditing = false;
        this.isSelectedLink = false;
        this.linkElement = undefined;
    }
    formReset(control) {
        control.markAsPristine();
        control.markAsUntouched();
        control.updateValueAndValidity();
    }
    prepareModalForLink(selectedLinkElement) {
        this.saveSelectionText();
        if (this.modalLinkForm) {
            this.formReset(this.modalLinkForm.control);
        }
        setTimeout(() => {
            this.formModelValidate();
        });
        this.selectedLink(selectedLinkElement);
        if (this.isSelectedLink) {
            this.isLinkEditing = true;
            this.setLinkEditableForModal();
        }
        this.linkEditing.emit(this.isLinkEditing);
    }
    restoreSelection() {
        if (this.savedSelection) {
            if (this.selection) {
                this.selection.removeAllRanges();
                this.selection.addRange(this.savedSelection);
            }
            return true;
        }
        else {
            return false;
        }
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
    saveSelectionText() {
        if (this.selection.anchorNode !== null) {
            this.savedSelection = this.selection.getRangeAt(0);
            this.urlLinkText = this.selection.toString();
        }
        else {
            return null;
        }
    }
    setLinkEditableForModal() {
        this.urlLinkText = this.linkElement.innerText;
        this.urlLink = this.linkElement.getAttribute('href');
    }
    toEditLink() {
        if (isIE()) {
            this.linkElement.parentNode.removeChild(this.linkElement);
        }
        else {
            this.linkElement.remove();
        }
        this.toInsertLink(this.urlLink, this.urlLinkText);
    }
    toInsertLink(urlLink, urlLinkText) {
        this.modal.close();
        this.restoreSelection();
        const urlLinkTextValue = this.checkIfIsEmpty(urlLink, urlLinkText);
        const urlAsExternalLink = isExternalLink(urlLink) ? urlLink : `http://${urlLink}`;
        const command = 'InsertHTML';
        const value = { urlLink: urlAsExternalLink, urlLinkText: urlLinkTextValue };
        this.command.emit({ command, value });
        this.cleanUpFields();
    }
}
PoRichTextLinkModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-link-modal',
                template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalConfirmAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"linkConfirmAction()\"\n>\n  <form #modalLinkForm=\"ngForm\">\n    <div class=\"po-row\">\n      <po-input\n        class=\"po-md-12 po-mb-2\"\n        name=\"urlLinkText\"\n        [(ngModel)]=\"urlLinkText\"\n        p-optional\n        [p-label]=\"literals.linkTextLabel\"\n        [p-placeholder]=\"literals.linkTextLabel\"\n      >\n      </po-input>\n\n      <po-url\n        class=\"po-md-12\"\n        name=\"urlLink\"\n        [(ngModel)]=\"urlLink\"\n        p-label=\"Link\"\n        p-required\n        [p-help]=\"literals.linkUrlTextHelper\"\n        [p-placeholder]=\"literals.linkUrlTextPlaceholder\"\n        (p-change-model)=\"formModelValidate()\"\n      >\n      </po-url>\n    </div>\n  </form>\n</po-modal>\n"
            },] }
];
PoRichTextLinkModalComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoRichTextLinkModalComponent.propDecorators = {
    modal: [{ type: ViewChild, args: ['modal', { static: true },] }],
    modalLinkForm: [{ type: ViewChild, args: ['modalLinkForm',] }],
    command: [{ type: Output, args: ['p-command',] }],
    linkEditing: [{ type: Output, args: ['p-link-editing',] }]
};
//# sourceMappingURL=data:application/json;base64,