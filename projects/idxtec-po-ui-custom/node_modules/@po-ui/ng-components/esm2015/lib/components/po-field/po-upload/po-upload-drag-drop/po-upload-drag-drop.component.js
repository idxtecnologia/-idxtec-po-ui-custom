import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { convertToInt } from '../../../../utils/util';
import { PoUploadDragDropAreaComponent } from './po-upload-drag-drop-area/po-upload-drag-drop-area.component';
const PoUploadDragDropHeightDefault = 320;
const PoUploadDragDropHeightMin = 160;
export class PoUploadDragDropComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.fileChange = new EventEmitter();
        this.selectFiles = new EventEmitter();
        this.isDragOver = false;
        this._dragDropHeight = PoUploadDragDropHeightDefault;
    }
    set dragDropHeight(value) {
        const dragDropHeight = convertToInt(value, PoUploadDragDropHeightDefault);
        this._dragDropHeight = dragDropHeight < PoUploadDragDropHeightMin ? PoUploadDragDropHeightMin : dragDropHeight;
    }
    get dragDropHeight() {
        return this._dragDropHeight;
    }
    focus() {
        this.dragDropAreaComponent.focus();
    }
    onAreaElement(element) {
        this.areaElement = element;
        // necessário para não ocorrer o erro HasBeenChecked
        this.changeDetector.detectChanges();
    }
    onDragLeave() {
        this.isDragOver = false;
    }
    onDragOver() {
        this.isDragOver = true;
    }
    onFileChange(files) {
        this.isDragOver = false;
        this.fileChange.emit(files);
    }
}
PoUploadDragDropComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-upload-drag-drop',
                template: "<po-upload-drag-drop-area-overlay\n  #dragDropOverlay\n  *ngIf=\"isDragOver\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-literals]=\"literals\"\n  [p-target]=\"dragDropAreaComponent.elementRef\"\n  (p-area-element)=\"onAreaElement($event)\"\n>\n</po-upload-drag-drop-area-overlay>\n\n<po-upload-drag-drop-area\n  p-upload-drag-drop\n  [p-area-element]=\"areaElement\"\n  [p-directory-compatible]=\"directoryCompatible\"\n  [p-disabled]=\"disabled\"\n  [p-height]=\"dragDropHeight\"\n  [p-literals]=\"literals\"\n  [p-overlay]=\"false\"\n  (p-drag-leave)=\"onDragLeave()\"\n  (p-drag-over)=\"onDragOver()\"\n  (p-file-change)=\"onFileChange($event)\"\n  (p-select-files)=\"selectFiles.emit()\"\n>\n</po-upload-drag-drop-area>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoUploadDragDropComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoUploadDragDropComponent.propDecorators = {
    dragDropOverlayElement: [{ type: ViewChild, args: ['dragDropOverlay', { read: ElementRef },] }],
    dragDropAreaComponent: [{ type: ViewChild, args: [PoUploadDragDropAreaComponent, { static: true },] }],
    directoryCompatible: [{ type: Input, args: ['p-directory-compatible',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    fileChange: [{ type: Output, args: ['p-file-change',] }],
    selectFiles: [{ type: Output, args: ['p-select-files',] }],
    dragDropHeight: [{ type: Input, args: ['p-drag-drop-height',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdXBsb2FkLWRyYWctZHJvcC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tZmllbGQvcG8tdXBsb2FkL3BvLXVwbG9hZC1kcmFnLWRyb3AvcG8tdXBsb2FkLWRyYWctZHJvcC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEVBQ1YsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXRELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBRzlHLE1BQU0sNkJBQTZCLEdBQUcsR0FBRyxDQUFDO0FBQzFDLE1BQU0seUJBQXlCLEdBQUcsR0FBRyxDQUFDO0FBT3RDLE1BQU0sT0FBTyx5QkFBeUI7SUE2QnBDLFlBQW9CLGNBQWlDO1FBQWpDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQW5CNUIsZUFBVSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBRXZELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFHbkYsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUVwQixvQkFBZSxHQUFZLDZCQUE2QixDQUFDO0lBWVQsQ0FBQztJQVZ6RCxJQUFpQyxjQUFjLENBQUMsS0FBYTtRQUMzRCxNQUFNLGNBQWMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLDZCQUE2QixDQUFDLENBQUM7UUFFMUUsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLEdBQUcseUJBQXlCLENBQUMsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUM7SUFDakgsQ0FBQztJQUVELElBQUksY0FBYztRQUNoQixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDOUIsQ0FBQztJQUlELEtBQUs7UUFDSCxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELGFBQWEsQ0FBQyxPQUFvQjtRQUNoQyxJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQztRQUUzQixvREFBb0Q7UUFDcEQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7SUFFRCxVQUFVO1FBQ1IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUVELFlBQVksQ0FBQyxLQUFLO1FBQ2hCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBRXhCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlCLENBQUM7OztZQTNERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsOHdCQUFtRDtnQkFDbkQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7OztZQXJCQyxpQkFBaUI7OztxQ0F1QmhCLFNBQVMsU0FBQyxpQkFBaUIsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7b0NBQ2pELFNBQVMsU0FBQyw2QkFBNkIsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7a0NBRXpELEtBQUssU0FBQyx3QkFBd0I7dUJBRTlCLEtBQUssU0FBQyxZQUFZO3VCQUVsQixLQUFLLFNBQUMsWUFBWTt5QkFFbEIsTUFBTSxTQUFDLGVBQWU7MEJBRXRCLE1BQU0sU0FBQyxnQkFBZ0I7NkJBT3ZCLEtBQUssU0FBQyxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBWaWV3Q2hpbGRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0ludCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1VwbG9hZERyYWdEcm9wQXJlYUNvbXBvbmVudCB9IGZyb20gJy4vcG8tdXBsb2FkLWRyYWctZHJvcC1hcmVhL3BvLXVwbG9hZC1kcmFnLWRyb3AtYXJlYS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9VcGxvYWRMaXRlcmFscyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcG8tdXBsb2FkLWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmNvbnN0IFBvVXBsb2FkRHJhZ0Ryb3BIZWlnaHREZWZhdWx0ID0gMzIwO1xuY29uc3QgUG9VcGxvYWREcmFnRHJvcEhlaWdodE1pbiA9IDE2MDtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdXBsb2FkLWRyYWctZHJvcCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby11cGxvYWQtZHJhZy1kcm9wLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUG9VcGxvYWREcmFnRHJvcENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoJ2RyYWdEcm9wT3ZlcmxheScsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBkcmFnRHJvcE92ZXJsYXlFbGVtZW50OiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKFBvVXBsb2FkRHJhZ0Ryb3BBcmVhQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSBkcmFnRHJvcEFyZWFDb21wb25lbnQ6IFBvVXBsb2FkRHJhZ0Ryb3BBcmVhQ29tcG9uZW50O1xuXG4gIEBJbnB1dCgncC1kaXJlY3RvcnktY29tcGF0aWJsZScpIGRpcmVjdG9yeUNvbXBhdGlibGU6IGJvb2xlYW47XG5cbiAgQElucHV0KCdwLWRpc2FibGVkJykgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgQElucHV0KCdwLWxpdGVyYWxzJykgbGl0ZXJhbHM6IFBvVXBsb2FkTGl0ZXJhbHM7XG5cbiAgQE91dHB1dCgncC1maWxlLWNoYW5nZScpIGZpbGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgncC1zZWxlY3QtZmlsZXMnKSBzZWxlY3RGaWxlczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBhcmVhRWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gIGlzRHJhZ092ZXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIF9kcmFnRHJvcEhlaWdodD86IG51bWJlciA9IFBvVXBsb2FkRHJhZ0Ryb3BIZWlnaHREZWZhdWx0O1xuXG4gIEBJbnB1dCgncC1kcmFnLWRyb3AtaGVpZ2h0Jykgc2V0IGRyYWdEcm9wSGVpZ2h0KHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCBkcmFnRHJvcEhlaWdodCA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgUG9VcGxvYWREcmFnRHJvcEhlaWdodERlZmF1bHQpO1xuXG4gICAgdGhpcy5fZHJhZ0Ryb3BIZWlnaHQgPSBkcmFnRHJvcEhlaWdodCA8IFBvVXBsb2FkRHJhZ0Ryb3BIZWlnaHRNaW4gPyBQb1VwbG9hZERyYWdEcm9wSGVpZ2h0TWluIDogZHJhZ0Ryb3BIZWlnaHQ7XG4gIH1cblxuICBnZXQgZHJhZ0Ryb3BIZWlnaHQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RyYWdEcm9wSGVpZ2h0O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHt9XG5cbiAgZm9jdXMoKSB7XG4gICAgdGhpcy5kcmFnRHJvcEFyZWFDb21wb25lbnQuZm9jdXMoKTtcbiAgfVxuXG4gIG9uQXJlYUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICB0aGlzLmFyZWFFbGVtZW50ID0gZWxlbWVudDtcblxuICAgIC8vIG5lY2Vzc8OhcmlvIHBhcmEgbsOjbyBvY29ycmVyIG8gZXJybyBIYXNCZWVuQ2hlY2tlZFxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgb25EcmFnTGVhdmUoKSB7XG4gICAgdGhpcy5pc0RyYWdPdmVyID0gZmFsc2U7XG4gIH1cblxuICBvbkRyYWdPdmVyKCkge1xuICAgIHRoaXMuaXNEcmFnT3ZlciA9IHRydWU7XG4gIH1cblxuICBvbkZpbGVDaGFuZ2UoZmlsZXMpIHtcbiAgICB0aGlzLmlzRHJhZ092ZXIgPSBmYWxzZTtcblxuICAgIHRoaXMuZmlsZUNoYW5nZS5lbWl0KGZpbGVzKTtcbiAgfVxufVxuIl19