import { Component, Input } from '@angular/core';
import { PoBreadcrumbFavoriteService } from './po-breadcrumb-favorite.service';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export const PoBreadcrumbLiterals = {
    en: {
        favorite: 'Favorite',
        unfavorite: 'Unfavorite'
    },
    es: {
        favorite: 'Favor',
        unfavorite: 'Desfavorecer'
    },
    pt: {
        favorite: 'Favoritar',
        unfavorite: 'Desfavoritar'
    },
    ru: {
        favorite: 'Любимый',
        unfavorite: 'Немилость'
    }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que renderiza o serviço de favoritar do po-breadcrumb.
 */
export class PoBreadcrumbFavoriteComponent {
    constructor(service, languageService) {
        this.service = service;
        this.languageService = languageService;
        this.favorite = false;
        const language = languageService.getShortLanguage();
        this.literals = Object.assign({}, PoBreadcrumbLiterals[language]);
    }
    ngOnInit() {
        this.service.configService(this.favoriteService, this.paramsService, this.itemActive);
        this.getStatusFavorite();
    }
    ngOnDestroy() {
        if (this.getSubscription) {
            this.getSubscription.unsubscribe();
        }
        if (this.setSubscription) {
            this.setSubscription.unsubscribe();
        }
    }
    toggleFavoriteAction() {
        this.favorite ? this.setStatusFavorite(false) : this.setStatusFavorite(true);
    }
    getStatusFavorite() {
        this.getSubscription = this.service.getFavorite().subscribe(result => (this.favorite = result.isFavorite));
    }
    setStatusFavorite(status) {
        this.setSubscription = this.service
            .sendStatusFavorite(status)
            .subscribe(result => (this.favorite = result.isFavorite));
    }
}
PoBreadcrumbFavoriteComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-breadcrumb-favorite',
                template: "<div class=\"po-breadcrumb-favorite po-clickable\" (click)=\"toggleFavoriteAction()\">\n  <span\n    class=\"po-icon po-icon-star po-breadcrumb-favorite-star po-clickable\"\n    [class.po-breadcrumb-favorite-star-active]=\"favorite\"\n  >\n  </span>\n\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"favorite\">{{ literals?.unfavorite }}</span>\n  <span class=\"po-hidden-sm po-breadcrumb-favorite-label\" *ngIf=\"!favorite\">{{ literals?.favorite }}</span>\n</div>\n",
                providers: [PoBreadcrumbFavoriteService]
            },] }
];
PoBreadcrumbFavoriteComponent.ctorParameters = () => [
    { type: PoBreadcrumbFavoriteService },
    { type: PoLanguageService }
];
PoBreadcrumbFavoriteComponent.propDecorators = {
    favoriteService: [{ type: Input, args: ['p-favorite-service',] }],
    itemActive: [{ type: Input, args: ['p-item-active',] }],
    paramsService: [{ type: Input, args: ['p-params-service',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYnJlYWRjcnVtYi1mYXZvcml0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tYnJlYWRjcnVtYi9wby1icmVhZGNydW1iLWZhdm9yaXRlL3BvLWJyZWFkY3J1bWItZmF2b3JpdGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFxQixNQUFNLGVBQWUsQ0FBQztBQUtwRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMvRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUV0RixNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBVztJQUMxQyxFQUFFLEVBQU87UUFDUCxRQUFRLEVBQUUsVUFBVTtRQUNwQixVQUFVLEVBQUUsWUFBWTtLQUN6QjtJQUNELEVBQUUsRUFBTztRQUNQLFFBQVEsRUFBRSxPQUFPO1FBQ2pCLFVBQVUsRUFBRSxjQUFjO0tBQzNCO0lBQ0QsRUFBRSxFQUFPO1FBQ1AsUUFBUSxFQUFFLFdBQVc7UUFDckIsVUFBVSxFQUFFLGNBQWM7S0FDM0I7SUFDRCxFQUFFLEVBQU87UUFDUCxRQUFRLEVBQUUsU0FBUztRQUNuQixVQUFVLEVBQUUsV0FBVztLQUN4QjtDQUNGLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFPSCxNQUFNLE9BQU8sNkJBQTZCO0lBZ0J4QyxZQUFvQixPQUFvQyxFQUFVLGVBQWtDO1FBQWhGLFlBQU8sR0FBUCxPQUFPLENBQTZCO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQW1CO1FBTnBHLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFPeEIsTUFBTSxRQUFRLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFFcEQsSUFBSSxDQUFDLFFBQVEscUJBQ1Isb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQ2xDLENBQUM7SUFDSixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEYsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNwQztRQUVELElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELG9CQUFvQjtRQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRU8saUJBQWlCO1FBQ3ZCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDN0csQ0FBQztJQUVPLGlCQUFpQixDQUFDLE1BQU07UUFDOUIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTzthQUNoQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUM7YUFDMUIsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7OztZQXhERixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsb2ZBQXNEO2dCQUN0RCxTQUFTLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQzthQUN6Qzs7O1lBbENRLDJCQUEyQjtZQUMzQixpQkFBaUI7Ozs4QkFvQ3ZCLEtBQUssU0FBQyxvQkFBb0I7eUJBRzFCLEtBQUssU0FBQyxlQUFlOzRCQUdyQixLQUFLLFNBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvQnJlYWRjcnVtYkl0ZW0gfSBmcm9tICcuLy4uL3BvLWJyZWFkY3J1bWItaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9CcmVhZGNydW1iRmF2b3JpdGVTZXJ2aWNlIH0gZnJvbSAnLi9wby1icmVhZGNydW1iLWZhdm9yaXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IFBvQnJlYWRjcnVtYkxpdGVyYWxzOiBPYmplY3QgPSB7XG4gIGVuOiA8YW55PntcbiAgICBmYXZvcml0ZTogJ0Zhdm9yaXRlJyxcbiAgICB1bmZhdm9yaXRlOiAnVW5mYXZvcml0ZSdcbiAgfSxcbiAgZXM6IDxhbnk+e1xuICAgIGZhdm9yaXRlOiAnRmF2b3InLFxuICAgIHVuZmF2b3JpdGU6ICdEZXNmYXZvcmVjZXInXG4gIH0sXG4gIHB0OiA8YW55PntcbiAgICBmYXZvcml0ZTogJ0Zhdm9yaXRhcicsXG4gICAgdW5mYXZvcml0ZTogJ0Rlc2Zhdm9yaXRhcidcbiAgfSxcbiAgcnU6IDxhbnk+e1xuICAgIGZhdm9yaXRlOiAn0JvRjtCx0LjQvNGL0LknLFxuICAgIHVuZmF2b3JpdGU6ICfQndC10LzQuNC70L7RgdGC0YwnXG4gIH1cbn07XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBxdWUgcmVuZGVyaXphIG8gc2VydmnDp28gZGUgZmF2b3JpdGFyIGRvIHBvLWJyZWFkY3J1bWIuXG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tYnJlYWRjcnVtYi1mYXZvcml0ZScsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1icmVhZGNydW1iLWZhdm9yaXRlLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbUG9CcmVhZGNydW1iRmF2b3JpdGVTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBQb0JyZWFkY3J1bWJGYXZvcml0ZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgLy8gVVJMIGRvIHNlcnZpw6dvLlxuICBASW5wdXQoJ3AtZmF2b3JpdGUtc2VydmljZScpIGZhdm9yaXRlU2VydmljZTogc3RyaW5nO1xuXG4gIC8vIEl0ZW0gZG8gYnJlYWRjcnVtYiBhdGl2by5cbiAgQElucHV0KCdwLWl0ZW0tYWN0aXZlJykgaXRlbUFjdGl2ZTogUG9CcmVhZGNydW1iSXRlbTtcblxuICAvLyBQYXLDom1ldHJvIHF1ZSBzZXLDoSBlbnZpYWRvIGp1bnRvIGNvbSBvIHNlcnZpw6dvIGRlIGZhdm9yaXRhci5cbiAgQElucHV0KCdwLXBhcmFtcy1zZXJ2aWNlJykgcGFyYW1zU2VydmljZTogb2JqZWN0O1xuXG4gIGZhdm9yaXRlOiBib29sZWFuID0gZmFsc2U7XG4gIGxpdGVyYWxzO1xuXG4gIHByaXZhdGUgZ2V0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHByaXZhdGUgc2V0U3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzZXJ2aWNlOiBQb0JyZWFkY3J1bWJGYXZvcml0ZVNlcnZpY2UsIHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gbGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcblxuICAgIHRoaXMubGl0ZXJhbHMgPSB7XG4gICAgICAuLi5Qb0JyZWFkY3J1bWJMaXRlcmFsc1tsYW5ndWFnZV1cbiAgICB9O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zZXJ2aWNlLmNvbmZpZ1NlcnZpY2UodGhpcy5mYXZvcml0ZVNlcnZpY2UsIHRoaXMucGFyYW1zU2VydmljZSwgdGhpcy5pdGVtQWN0aXZlKTtcbiAgICB0aGlzLmdldFN0YXR1c0Zhdm9yaXRlKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5nZXRTdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuZ2V0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2V0U3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLnNldFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZUZhdm9yaXRlQWN0aW9uKCkge1xuICAgIHRoaXMuZmF2b3JpdGUgPyB0aGlzLnNldFN0YXR1c0Zhdm9yaXRlKGZhbHNlKSA6IHRoaXMuc2V0U3RhdHVzRmF2b3JpdGUodHJ1ZSk7XG4gIH1cblxuICBwcml2YXRlIGdldFN0YXR1c0Zhdm9yaXRlKCkge1xuICAgIHRoaXMuZ2V0U3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlLmdldEZhdm9yaXRlKCkuc3Vic2NyaWJlKHJlc3VsdCA9PiAodGhpcy5mYXZvcml0ZSA9IHJlc3VsdC5pc0Zhdm9yaXRlKSk7XG4gIH1cblxuICBwcml2YXRlIHNldFN0YXR1c0Zhdm9yaXRlKHN0YXR1cykge1xuICAgIHRoaXMuc2V0U3Vic2NyaXB0aW9uID0gdGhpcy5zZXJ2aWNlXG4gICAgICAuc2VuZFN0YXR1c0Zhdm9yaXRlKHN0YXR1cylcbiAgICAgIC5zdWJzY3JpYmUocmVzdWx0ID0+ICh0aGlzLmZhdm9yaXRlID0gcmVzdWx0LmlzRmF2b3JpdGUpKTtcbiAgfVxufVxuIl19