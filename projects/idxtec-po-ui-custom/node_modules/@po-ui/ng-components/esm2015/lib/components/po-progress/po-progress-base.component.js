import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../utils/util';
import { PoProgressStatus } from './enums/po-progress-status.enum';
const poProgressMaxValue = 100;
const poProgressMinValue = 0;
/**
 * @description
 *
 * Componente de barra de progresso que possibilita exibir visualmente o progresso/carregamento de uma tarefa.
 *
 * Este componente pode ser utilizado no *upload* de arquivos, uma atualização no sistema ou o processamento de uma imagem.
 */
export class PoProgressBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Status da barra de progresso que indicará visualmente ao usuário
         * o andamento, por exemplo, se a mesma foi concluída com sucesso.
         *
         * @default `PoProgressStatus.Default`
         */
        this.status = PoProgressStatus.Default;
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de cancelamento ("x") na parte inferior da barra de progresso.
         *
         * Ao ser disparado, a função receberá como parâmetro o status atual da barra de progresso.
         *
         * > Se nenhuma função for passada para o evento ou a barra de progresso estiver com o status `PoProgressStatus.Success`,
         * o ícone de cancelamento não será exibido.
         */
        this.cancel = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento que será disparado ao clicar no ícone de tentar novamente na parte inferior da barra de progresso.
         *
         * > o ícone será exibido apenas se informar uma função neste evento e o status da barra de progresso for
         * `PoProgressStatus.Error`.
         */
        this.retry = new EventEmitter();
        this._value = 0;
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita o modo indeterminado na barra de progresso, que mostra uma animação fixa sem um valor estabelecido.
     *
     * Esta opção pode ser utilizada quando não souber quanto tempo levará para que um processo seja concluído.
     *
     * > Caso esta propriedade e a `p-value` seja habilitada, a propriedade `p-value` será ignorada.
     *
     * @default `false`
     */
    set indeterminate(indeterminate) {
        this._indeterminate = convertToBoolean(indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor que representará o progresso.
     *
     * > Os valores aceitos são números inteiros de `0` à `100`.
     *
     * @default `0`
     */
    set value(value) {
        const integerValue = convertToInt(value, poProgressMinValue);
        const isProgressRangeValue = this.isProgressRangeValue(integerValue);
        this._value = isProgressRangeValue ? integerValue : poProgressMinValue;
    }
    get value() {
        return this._value;
    }
    isProgressRangeValue(value) {
        return value >= poProgressMinValue && value <= poProgressMaxValue;
    }
}
PoProgressBaseComponent.decorators = [
    { type: Directive }
];
PoProgressBaseComponent.propDecorators = {
    info: [{ type: Input, args: ['p-info',] }],
    infoIcon: [{ type: Input, args: ['p-info-icon',] }],
    status: [{ type: Input, args: ['p-status',] }],
    text: [{ type: Input, args: ['p-text',] }],
    cancel: [{ type: Output, args: ['p-cancel',] }],
    retry: [{ type: Output, args: ['p-retry',] }],
    indeterminate: [{ type: Input, args: ['p-indeterminate',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tcHJvZ3Jlc3MvcG8tcHJvZ3Jlc3MtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFbkUsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLENBQUM7QUFFN0I7Ozs7OztHQU1HO0FBRUgsTUFBTSxPQUFPLHVCQUF1QjtJQURwQztRQXNCRTs7Ozs7Ozs7O1dBU0c7UUFDZ0IsV0FBTSxHQUFxQixnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFXdkU7Ozs7Ozs7Ozs7O1dBV0c7UUFDaUIsV0FBTSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBRW5FOzs7Ozs7Ozs7V0FTRztRQUNnQixVQUFLLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFHekQsV0FBTSxHQUFZLENBQUMsQ0FBQztJQWdEOUIsQ0FBQztJQTlDQzs7Ozs7Ozs7Ozs7O09BWUc7SUFDSCxJQUE4QixhQUFhLENBQUMsYUFBc0I7UUFDaEUsSUFBSSxDQUFDLGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsSUFBSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsSUFBc0IsS0FBSyxDQUFDLEtBQWE7UUFDdkMsTUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQzdELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRXJFLElBQUksQ0FBQyxNQUFNLEdBQUcsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsa0JBQWtCLENBQUM7SUFDekUsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRU8sb0JBQW9CLENBQUMsS0FBYTtRQUN4QyxPQUFPLEtBQUssSUFBSSxrQkFBa0IsSUFBSSxLQUFLLElBQUksa0JBQWtCLENBQUM7SUFDcEUsQ0FBQzs7O1lBckhGLFNBQVM7OzttQkFTUCxLQUFLLFNBQUMsUUFBUTt1QkFXZCxLQUFLLFNBQUMsYUFBYTtxQkFZbkIsS0FBSyxTQUFDLFVBQVU7bUJBU2hCLEtBQUssU0FBQyxRQUFRO3FCQWNkLE1BQU0sU0FBQyxVQUFVO29CQVlqQixNQUFNLFNBQUMsU0FBUzs0QkFrQmhCLEtBQUssU0FBQyxpQkFBaUI7b0JBbUJ2QixLQUFLLFNBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGNvbnZlcnRUb0Jvb2xlYW4sIGNvbnZlcnRUb0ludCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1Byb2dyZXNzU3RhdHVzIH0gZnJvbSAnLi9lbnVtcy9wby1wcm9ncmVzcy1zdGF0dXMuZW51bSc7XG5cbmNvbnN0IHBvUHJvZ3Jlc3NNYXhWYWx1ZSA9IDEwMDtcbmNvbnN0IHBvUHJvZ3Jlc3NNaW5WYWx1ZSA9IDA7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBkZSBiYXJyYSBkZSBwcm9ncmVzc28gcXVlIHBvc3NpYmlsaXRhIGV4aWJpciB2aXN1YWxtZW50ZSBvIHByb2dyZXNzby9jYXJyZWdhbWVudG8gZGUgdW1hIHRhcmVmYS5cbiAqXG4gKiBFc3RlIGNvbXBvbmVudGUgcG9kZSBzZXIgdXRpbGl6YWRvIG5vICp1cGxvYWQqIGRlIGFycXVpdm9zLCB1bWEgYXR1YWxpemHDp8OjbyBubyBzaXN0ZW1hIG91IG8gcHJvY2Vzc2FtZW50byBkZSB1bWEgaW1hZ2VtLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb1Byb2dyZXNzQmFzZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEluZm9ybWHDp8OjbyBhZGljaW9uYWwgcXVlIGFwYXJlY2Vyw6EgYWJhaXhvIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBhbyBsYWRvIGRpcmVpdG8uXG4gICAqL1xuICBASW5wdXQoJ3AtaW5mbycpIGluZm8/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogw41jb25lIHF1ZSBhcGFyZWNlcsOhIGFvIGxhZG8gZG8gdGV4dG8gZGEgcHJvcHJpZWRhZGUgYHAtaW5mb2AuXG4gICAqXG4gICAqIEV4ZW1wbG86IGBwby1pY29uLW9rYC5cbiAgICovXG4gIEBJbnB1dCgncC1pbmZvLWljb24nKSBpbmZvSWNvbj86IHN0cmluZztcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBTdGF0dXMgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvIHF1ZSBpbmRpY2Fyw6EgdmlzdWFsbWVudGUgYW8gdXN1w6FyaW9cbiAgICogbyBhbmRhbWVudG8sIHBvciBleGVtcGxvLCBzZSBhIG1lc21hIGZvaSBjb25jbHXDrWRhIGNvbSBzdWNlc3NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgUG9Qcm9ncmVzc1N0YXR1cy5EZWZhdWx0YFxuICAgKi9cbiAgQElucHV0KCdwLXN0YXR1cycpIHN0YXR1czogUG9Qcm9ncmVzc1N0YXR1cyA9IFBvUHJvZ3Jlc3NTdGF0dXMuRGVmYXVsdDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBUZXh0byBwcmluY2lwYWwgcXVlIGFwYXJlY2Vyw6EgYWJhaXhvIGRhIGJhcnJhIGRlIHByb2dyZXNzbyBubyBsYWRvIGVzcXVlcmRvLlxuICAgKi9cbiAgQElucHV0KCdwLXRleHQnKSB0ZXh0Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV2ZW50byBxdWUgc2Vyw6EgZGlzcGFyYWRvIGFvIGNsaWNhciBubyDDrWNvbmUgZGUgY2FuY2VsYW1lbnRvIChcInhcIikgbmEgcGFydGUgaW5mZXJpb3IgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvLlxuICAgKlxuICAgKiBBbyBzZXIgZGlzcGFyYWRvLCBhIGZ1bsOnw6NvIHJlY2ViZXLDoSBjb21vIHBhcsOibWV0cm8gbyBzdGF0dXMgYXR1YWwgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvLlxuICAgKlxuICAgKiA+IFNlIG5lbmh1bWEgZnVuw6fDo28gZm9yIHBhc3NhZGEgcGFyYSBvIGV2ZW50byBvdSBhIGJhcnJhIGRlIHByb2dyZXNzbyBlc3RpdmVyIGNvbSBvIHN0YXR1cyBgUG9Qcm9ncmVzc1N0YXR1cy5TdWNjZXNzYCxcbiAgICogbyDDrWNvbmUgZGUgY2FuY2VsYW1lbnRvIG7Do28gc2Vyw6EgZXhpYmlkby5cbiAgICovXG4gIEBPdXRwdXQoJ3AtY2FuY2VsJykgY2FuY2VsOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBFdmVudG8gcXVlIHNlcsOhIGRpc3BhcmFkbyBhbyBjbGljYXIgbm8gw61jb25lIGRlIHRlbnRhciBub3ZhbWVudGUgbmEgcGFydGUgaW5mZXJpb3IgZGEgYmFycmEgZGUgcHJvZ3Jlc3NvLlxuICAgKlxuICAgKiA+IG8gw61jb25lIHNlcsOhIGV4aWJpZG8gYXBlbmFzIHNlIGluZm9ybWFyIHVtYSBmdW7Dp8OjbyBuZXN0ZSBldmVudG8gZSBvIHN0YXR1cyBkYSBiYXJyYSBkZSBwcm9ncmVzc28gZm9yXG4gICAqIGBQb1Byb2dyZXNzU3RhdHVzLkVycm9yYC5cbiAgICovXG4gIEBPdXRwdXQoJ3AtcmV0cnknKSByZXRyeTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHJpdmF0ZSBfaW5kZXRlcm1pbmF0ZT86IGJvb2xlYW47XG4gIHByaXZhdGUgX3ZhbHVlPzogbnVtYmVyID0gMDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSBvIG1vZG8gaW5kZXRlcm1pbmFkbyBuYSBiYXJyYSBkZSBwcm9ncmVzc28sIHF1ZSBtb3N0cmEgdW1hIGFuaW1hw6fDo28gZml4YSBzZW0gdW0gdmFsb3IgZXN0YWJlbGVjaWRvLlxuICAgKlxuICAgKiBFc3RhIG9ww6fDo28gcG9kZSBzZXIgdXRpbGl6YWRhIHF1YW5kbyBuw6NvIHNvdWJlciBxdWFudG8gdGVtcG8gbGV2YXLDoSBwYXJhIHF1ZSB1bSBwcm9jZXNzbyBzZWphIGNvbmNsdcOtZG8uXG4gICAqXG4gICAqID4gQ2FzbyBlc3RhIHByb3ByaWVkYWRlIGUgYSBgcC12YWx1ZWAgc2VqYSBoYWJpbGl0YWRhLCBhIHByb3ByaWVkYWRlIGBwLXZhbHVlYCBzZXLDoSBpZ25vcmFkYS5cbiAgICpcbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgQElucHV0KCdwLWluZGV0ZXJtaW5hdGUnKSBzZXQgaW5kZXRlcm1pbmF0ZShpbmRldGVybWluYXRlOiBib29sZWFuKSB7XG4gICAgdGhpcy5faW5kZXRlcm1pbmF0ZSA9IGNvbnZlcnRUb0Jvb2xlYW4oaW5kZXRlcm1pbmF0ZSk7XG4gIH1cblxuICBnZXQgaW5kZXRlcm1pbmF0ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faW5kZXRlcm1pbmF0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFZhbG9yIHF1ZSByZXByZXNlbnRhcsOhIG8gcHJvZ3Jlc3NvLlxuICAgKlxuICAgKiA+IE9zIHZhbG9yZXMgYWNlaXRvcyBzw6NvIG7Dum1lcm9zIGludGVpcm9zIGRlIGAwYCDDoCBgMTAwYC5cbiAgICpcbiAgICogQGRlZmF1bHQgYDBgXG4gICAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSBzZXQgdmFsdWUodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IGludGVnZXJWYWx1ZSA9IGNvbnZlcnRUb0ludCh2YWx1ZSwgcG9Qcm9ncmVzc01pblZhbHVlKTtcbiAgICBjb25zdCBpc1Byb2dyZXNzUmFuZ2VWYWx1ZSA9IHRoaXMuaXNQcm9ncmVzc1JhbmdlVmFsdWUoaW50ZWdlclZhbHVlKTtcblxuICAgIHRoaXMuX3ZhbHVlID0gaXNQcm9ncmVzc1JhbmdlVmFsdWUgPyBpbnRlZ2VyVmFsdWUgOiBwb1Byb2dyZXNzTWluVmFsdWU7XG4gIH1cblxuICBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBpc1Byb2dyZXNzUmFuZ2VWYWx1ZSh2YWx1ZTogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHZhbHVlID49IHBvUHJvZ3Jlc3NNaW5WYWx1ZSAmJiB2YWx1ZSA8PSBwb1Byb2dyZXNzTWF4VmFsdWU7XG4gIH1cbn1cbiJdfQ==