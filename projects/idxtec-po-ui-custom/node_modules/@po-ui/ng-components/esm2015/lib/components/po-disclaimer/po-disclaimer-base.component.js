import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
const PO_DISCLAIMER_TYPES = ['default', 'danger'];
const PO_DISCLAIMER_DEFAULT_TYPE = 'default';
/**
 * @docsPrivate
 *
 * @description
 *
 * O componente po-disclaimer é responsável por representar tags.
 * Seu uso é recomendado em buscas e em campos onde é necessário representar objetos selecionados,
 * como por exemplo, no po-multi-select.
 *
 */
export class PoDisclaimerBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao fechar o disclaimer.
         * Para este evento será passado como parâmetro um objeto com value, label e property.
         */
        this.closeAction = new EventEmitter();
        this.showDisclaimer = true;
        this._type = 'default';
        this._hideClose = false;
    }
    /**
     * @description
     *
     * Esta propriedade esconde o botão para fechamento do po-disclaimer, ao utilizar esta propriedade
     * sem passar valor a mesma é setada como false, onde o botão de fechamento está visível.
     *
     * @default false
     */
    set hideClose(value) {
        this._hideClose = value === '' ? true : convertToBoolean(value);
    }
    get hideClose() {
        return this._hideClose;
    }
    /**
     * @description
     *
     * Tipo do po-disclaimer. Pode ser 'default' ou 'danger'.
     *
     * @default default
     * @optional
     */
    set type(type) {
        this._type = PO_DISCLAIMER_TYPES.includes(type) ? type : PO_DISCLAIMER_DEFAULT_TYPE;
    }
    get type() {
        return this._type;
    }
    close() {
        this.showDisclaimer = false;
        this.closeAction.emit({ value: this.value, label: this.label, property: this.property });
    }
    getLabel() {
        return this.label ? this.label : this.value;
    }
}
PoDisclaimerBaseComponent.decorators = [
    { type: Directive }
];
PoDisclaimerBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    value: [{ type: Input, args: ['p-value',] }],
    property: [{ type: Input, args: ['p-property',] }],
    closeAction: [{ type: Output, args: ['p-close-action',] }],
    hideClose: [{ type: Input, args: ['p-hide-close',] }],
    type: [{ type: Input, args: ['p-type',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlzY2xhaW1lci1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1kaXNjbGFpbWVyL3BvLWRpc2NsYWltZXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sMEJBQTBCLEdBQUcsU0FBUyxDQUFDO0FBRTdDOzs7Ozs7Ozs7R0FTRztBQUVILE1BQU0sT0FBTyx5QkFBeUI7SUFEdEM7UUFjRTs7Ozs7OztXQU9HO1FBQ3VCLGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFFbkYsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFFZCxVQUFLLEdBQVcsU0FBUyxDQUFDO1FBQzFCLGVBQVUsR0FBYSxLQUFLLENBQUM7SUEwQ3ZDLENBQUM7SUF4Q0M7Ozs7Ozs7T0FPRztJQUNILElBQTJCLFNBQVMsQ0FBQyxLQUFjO1FBQ2pELElBQUksQ0FBQyxVQUFVLEdBQVEsS0FBSyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsSUFBcUIsSUFBSSxDQUFDLElBQVk7UUFDcEMsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsMEJBQTBCLENBQUM7SUFDdEYsQ0FBQztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzNGLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzlDLENBQUM7OztZQXBFRixTQUFTOzs7b0JBTVAsS0FBSyxTQUFDLFNBQVM7b0JBR2YsS0FBSyxTQUFDLFNBQVM7dUJBR2YsS0FBSyxTQUFDLFlBQVk7MEJBVWxCLE1BQU0sU0FBQyxnQkFBZ0I7d0JBZXZCLEtBQUssU0FBQyxjQUFjO21CQWdCcEIsS0FBSyxTQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbmNvbnN0IFBPX0RJU0NMQUlNRVJfVFlQRVMgPSBbJ2RlZmF1bHQnLCAnZGFuZ2VyJ107XG5jb25zdCBQT19ESVNDTEFJTUVSX0RFRkFVTFRfVFlQRSA9ICdkZWZhdWx0JztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPIGNvbXBvbmVudGUgcG8tZGlzY2xhaW1lciDDqSByZXNwb25zw6F2ZWwgcG9yIHJlcHJlc2VudGFyIHRhZ3MuXG4gKiBTZXUgdXNvIMOpIHJlY29tZW5kYWRvIGVtIGJ1c2NhcyBlIGVtIGNhbXBvcyBvbmRlIMOpIG5lY2Vzc8OhcmlvIHJlcHJlc2VudGFyIG9iamV0b3Mgc2VsZWNpb25hZG9zLFxuICogY29tbyBwb3IgZXhlbXBsbywgbm8gcG8tbXVsdGktc2VsZWN0LlxuICpcbiAqL1xuQERpcmVjdGl2ZSgpXG5leHBvcnQgY2xhc3MgUG9EaXNjbGFpbWVyQmFzZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBMYWJlbCBxdWUgYXBhcmVjZXLDoSBkZW50cm8gZG8gcG8tZGlzY2xhaW1lci5cbiAgICogUXVhbmRvIG7Do28gZm9yIGRlZmluaWRvIHVtIGxhYmVsIHNlcsOhIGFwcmVzZW50YWRhIGEgcHJvcHJpZWRhZGUgcC12YWx1ZS5cbiAgICovXG4gIEBJbnB1dCgncC1sYWJlbCcpIGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKiBWYWxvciBkbyBwby1kaXNjbGFpbWVyLiAqL1xuICBASW5wdXQoJ3AtdmFsdWUnKSB2YWx1ZTogc3RyaW5nO1xuXG4gIC8qKiBOb21lIGRhIHByb3ByaWVkYWRlIHZpbmN1bGFkYSDDoCBlc3RlIHBvLWRpc2NsYWltZXIuICovXG4gIEBJbnB1dCgncC1wcm9wZXJ0eScpIHByb3BlcnR5Pzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEV2ZW50byBkaXNwYXJhZG8gYW8gZmVjaGFyIG8gZGlzY2xhaW1lci5cbiAgICogUGFyYSBlc3RlIGV2ZW50byBzZXLDoSBwYXNzYWRvIGNvbW8gcGFyw6JtZXRybyB1bSBvYmpldG8gY29tIHZhbHVlLCBsYWJlbCBlIHByb3BlcnR5LlxuICAgKi9cbiAgQE91dHB1dCgncC1jbG9zZS1hY3Rpb24nKSBjbG9zZUFjdGlvbjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBzaG93RGlzY2xhaW1lciA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfdHlwZTogc3RyaW5nID0gJ2RlZmF1bHQnO1xuICBwcml2YXRlIF9oaWRlQ2xvc2U/OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBFc3RhIHByb3ByaWVkYWRlIGVzY29uZGUgbyBib3TDo28gcGFyYSBmZWNoYW1lbnRvIGRvIHBvLWRpc2NsYWltZXIsIGFvIHV0aWxpemFyIGVzdGEgcHJvcHJpZWRhZGVcbiAgICogc2VtIHBhc3NhciB2YWxvciBhIG1lc21hIMOpIHNldGFkYSBjb21vIGZhbHNlLCBvbmRlIG8gYm90w6NvIGRlIGZlY2hhbWVudG8gZXN0w6Egdmlzw612ZWwuXG4gICAqXG4gICAqIEBkZWZhdWx0IGZhbHNlXG4gICAqL1xuICBASW5wdXQoJ3AtaGlkZS1jbG9zZScpIHNldCBoaWRlQ2xvc2UodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9oaWRlQ2xvc2UgPSA8YW55PnZhbHVlID09PSAnJyA/IHRydWUgOiBjb252ZXJ0VG9Cb29sZWFuKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBoaWRlQ2xvc2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2hpZGVDbG9zZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGlwbyBkbyBwby1kaXNjbGFpbWVyLiBQb2RlIHNlciAnZGVmYXVsdCcgb3UgJ2RhbmdlcicuXG4gICAqXG4gICAqIEBkZWZhdWx0IGRlZmF1bHRcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICBASW5wdXQoJ3AtdHlwZScpIHNldCB0eXBlKHR5cGU6IHN0cmluZykge1xuICAgIHRoaXMuX3R5cGUgPSBQT19ESVNDTEFJTUVSX1RZUEVTLmluY2x1ZGVzKHR5cGUpID8gdHlwZSA6IFBPX0RJU0NMQUlNRVJfREVGQVVMVF9UWVBFO1xuICB9XG5cbiAgZ2V0IHR5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZTtcbiAgfVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuc2hvd0Rpc2NsYWltZXIgPSBmYWxzZTtcbiAgICB0aGlzLmNsb3NlQWN0aW9uLmVtaXQoeyB2YWx1ZTogdGhpcy52YWx1ZSwgbGFiZWw6IHRoaXMubGFiZWwsIHByb3BlcnR5OiB0aGlzLnByb3BlcnR5IH0pO1xuICB9XG5cbiAgZ2V0TGFiZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWwgPyB0aGlzLmxhYmVsIDogdGhpcy52YWx1ZTtcbiAgfVxufVxuIl19