import { ChangeDetectorRef, Directive, EventEmitter, Input, NgZone, Output, ViewChildren } from '@angular/core';
import { PoChartStartAngle, PoChartCompleteCircle, PoChartAngleStepInterval } from '../../helpers/po-chart-default-values.constant';
export class PoChartCircularComponent {
    constructor(ngZone, changeDetector) {
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.circularClick = new EventEmitter();
        this.circularHover = new EventEmitter();
        this.canDisplayLabels = false;
        this.seriesLabels = [];
        this.showLabels = false;
    }
    set options(value) {
        if (!isNaN(value === null || value === void 0 ? void 0 : value.innerRadius)) {
            this._options = value;
            this.innerRadius = Math.min(Math.max(this._options.innerRadius, 0), 100);
        }
    }
    get options() {
        return this._options;
    }
    set series(value) {
        this._series = value;
        this.animate = true;
    }
    get series() {
        return this._series;
    }
    onSerieClick(selectedItem) {
        this.circularClick.emit(selectedItem);
    }
    onSerieHover(selectedItem) {
        this.circularHover.emit(selectedItem);
    }
    calculateAngle(data, totalValue) {
        return (data / totalValue) * (Math.PI * 2);
    }
    drawSeries(series = [], height) {
        this.seriesList = [];
        this.showLabels = false;
        this.totalValue = this.calculateTotalValue(series);
        if (this.totalValue && this.totalValue > 0) {
            this.seriesList = this.validateSeries(series);
            this.changeDetector.detectChanges();
            if (this.seriesList.length && this.svgPaths) {
                this.initDrawPaths(this.seriesList, this.totalValue, height);
            }
        }
    }
    calculateTotalValue(series) {
        return series.reduce((previousValue, serie) => {
            const data = serie.data ? serie.data : serie.value;
            return previousValue + (data > 0 ? data : 0);
        }, 0);
    }
    calculateSerieCoordinates(series, totalValue, height) {
        let startRadianAngle;
        let endRadianAngle = PoChartStartAngle;
        series.forEach((serie, index) => {
            startRadianAngle = endRadianAngle;
            endRadianAngle = startRadianAngle + this.calculateAngle(serie.data, totalValue) - PoChartCompleteCircle;
            const coordinates = this.calculateCoordinates(height, startRadianAngle, endRadianAngle);
            this.svgPaths.toArray()[index].applyCoordinates(coordinates);
            this.showLabels = this.canDisplayLabels;
        });
    }
    calculateCoordinatesWithAnimation(series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle = 0, seriesIndex = 0) {
        const finishedCurrentSerie = currentRadianAngle > endRadianAngle;
        const finishedAllSeries = seriesIndex === series.length;
        if (finishedAllSeries) {
            this.animate = false;
            return;
        }
        if (finishedCurrentSerie) {
            this.setSerieLabelCoordinates(seriesIndex);
            currentRadianAngle = 0;
            seriesIndex++;
            startRadianAngle = startRadianAngle + endRadianAngle;
            endRadianAngle =
                seriesIndex < series.length ? this.calculateAngle(series[seriesIndex].data, totalValue) : undefined;
        }
        else {
            currentRadianAngle += PoChartAngleStepInterval;
            const currentEndRadianAngle = this.calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle);
            const coordinates = this.calculateCoordinates(height, startRadianAngle, currentEndRadianAngle);
            this.svgPaths.toArray()[seriesIndex].applyCoordinates(coordinates);
        }
        window.requestAnimationFrame(this.calculateCoordinatesWithAnimation.bind(this, series, totalValue, height, startRadianAngle, endRadianAngle, currentRadianAngle, seriesIndex));
    }
    calculateCurrentEndAngle(currentRadianAngle, startRadianAngle, endRadianAngle) {
        const isSerieDrawCompleted = startRadianAngle + currentRadianAngle > startRadianAngle + endRadianAngle;
        return isSerieDrawCompleted
            ? startRadianAngle + endRadianAngle - PoChartCompleteCircle
            : startRadianAngle + currentRadianAngle;
    }
    initDrawPaths(seriesList, totalValue, height) {
        if (!this.animate) {
            this.calculateSerieCoordinates(seriesList, totalValue, height);
        }
        else {
            const startRadianAngle = PoChartStartAngle;
            const endRadianAngle = this.calculateAngle(seriesList[0].data, totalValue);
            this.ngZone.runOutsideAngular(() => this.calculateCoordinatesWithAnimation(seriesList, totalValue, height, startRadianAngle, endRadianAngle));
        }
    }
    setSerieLabelCoordinates(index) {
        if (this.svgLabels.toArray().length) {
            this.svgLabels.toArray()[index].applyCoordinates(this.seriesLabels[index]);
        }
    }
    validateSeries(series) {
        return series.reduce((seriesList, serie) => {
            var _a;
            const data = (_a = serie.data) !== null && _a !== void 0 ? _a : serie.value;
            if (data && data > 0) {
                const color = serie.color;
                const label = serie.label;
                const tooltip = serie.tooltip;
                const tooltipLabel = this.getTooltipLabel(data, label, tooltip);
                seriesList = [...seriesList, { data, color, label, tooltipLabel }];
            }
            return seriesList;
        }, []);
    }
}
PoChartCircularComponent.decorators = [
    { type: Directive }
];
PoChartCircularComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef }
];
PoChartCircularComponent.propDecorators = {
    containerSize: [{ type: Input, args: ['p-container-size',] }],
    circularClick: [{ type: Output, args: ['p-circular-click',] }],
    circularHover: [{ type: Output, args: ['p-circular-hover',] }],
    svgPaths: [{ type: ViewChildren, args: ['svgPaths',] }],
    svgLabels: [{ type: ViewChildren, args: ['svgLabels',] }],
    options: [{ type: Input, args: ['p-options',] }],
    series: [{ type: Input, args: ['p-series',] }]
};
//# sourceMappingURL=data:application/json;base64,