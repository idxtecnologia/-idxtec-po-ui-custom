import { ChangeDetectorRef, Component, ComponentFactoryResolver, ViewChild, ViewContainerRef } from '@angular/core';
import { fromEvent } from 'rxjs';
import { debounceTime, filter, switchMap, tap } from 'rxjs/operators';
import { PoLookupModalBaseComponent } from '../po-lookup-modal/po-lookup-modal-base.component';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { PoDynamicFormComponent } from './../../../po-dynamic/po-dynamic-form/po-dynamic-form.component';
import { PoTableComponent } from './../../../po-table/po-table.component';
/**
 * @docsPrivate
 *
 * @docsExtends PoLookupModalBaseComponent
 */
export class PoLookupModalComponent extends PoLookupModalBaseComponent {
    constructor(componentFactory, poLanguage, changeDetector) {
        super(poLanguage, changeDetector);
        this.componentFactory = componentFactory;
        this.keyUpObservable = null;
        this.containerHeight = 375;
    }
    ngOnInit() {
        super.ngOnInit();
        this.setTableHeight();
    }
    ngAfterViewInit() {
        this.initializeEventInput();
    }
    // Seleciona um item na tabela
    onSelect(item) {
        if (this.multiple) {
            this.selecteds = [...this.selecteds, Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)];
        }
        else {
            this.selecteds = [Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)];
        }
    }
    // Remove a seleção de um item na tabela
    onUnselect(unselectedItem) {
        this.selecteds = this.selecteds.filter(itemSelected => itemSelected.value !== unselectedItem[this.fieldValue]);
    }
    onUnselectFromDisclaimer(removedDisclaimer) {
        this.poTable.unselectRowItem(item => item[this.fieldValue] === removedDisclaimer.value);
    }
    // Seleciona todos os itens visíveis na tabela
    onAllSelected(items) {
        this.selecteds = items.map(item => (Object.assign({ value: item[this.fieldValue], label: item[this.fieldLabel] }, item)));
    }
    // Remove a seleção de todos os itens visíveis na tabela
    onAllUnselected(items) {
        this.poTable.unselectRows();
        this.selecteds = [];
    }
    initializeEventInput() {
        this.keyUpObservable = fromEvent(this.inputSearchEl.nativeElement, 'keyup').pipe(filter((e) => this.validateEnterPressed(e)), debounceTime(400));
        this.keyUpObservable.subscribe(() => {
            this.search();
        });
    }
    openModal() {
        this.poModal.open();
    }
    sortBy(sort) {
        this.sort = sort;
    }
    destroyDynamicForm() {
        if (this.componentRef) {
            this.componentRef.destroy();
        }
    }
    onAdvancedFilter() {
        this.setupModalAdvancedFilter();
        this.createDynamicForm();
    }
    setTableHeight() {
        var _a;
        if (this.multiple) {
            if (((_a = this.selecteds) === null || _a === void 0 ? void 0 : _a.length) !== 0) {
                this.tableHeight = 300;
            }
            else {
                this.tableHeight = 370;
                this.containerHeight = 375;
            }
        }
        // precisa ser 315 por as linhas terem altura de 32px (quando tela menor que 1366px).
        // O retorno padrão é 10 itens fazendo com que gere scroll caso houver paginação, 370 não gerava.
        this.tableHeight = this.infiniteScroll ? 315 : 370;
        if (window.innerHeight < 615) {
            this.tableHeight -= 50;
            this.containerHeight -= 50;
        }
    }
    validateEnterPressed(e) {
        return e.keyCode === 13;
    }
    setupModalAdvancedFilter() {
        this.dynamicFormValue = {};
        this.isAdvancedFilter = true;
    }
    createDynamicForm() {
        const component = this.componentFactory.resolveComponentFactory(PoDynamicFormComponent);
        this.componentRef = this.container.createComponent(component);
        this.componentRef.instance.fields = this.advancedFilters;
        this.componentRef.instance.value = this.dynamicFormValue;
        this.componentRef.instance.formOutput
            .pipe(tap(form => {
            this.dynamicForm = form;
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        }), switchMap(form => form.valueChanges))
            .subscribe(() => {
            this.primaryActionAdvancedFilter.disabled = this.dynamicForm.invalid;
        });
    }
}
PoLookupModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-lookup-modal',
                template: "<po-modal\n  p-click-out=\"false\"\n  p-hide-close=\"false\"\n  p-size=\"lg\"\n  [p-primary-action]=\"isAdvancedFilter ? primaryActionAdvancedFilter : primaryAction\"\n  [p-secondary-action]=\"isAdvancedFilter ? secondaryActionAdvancedFilter : secondaryAction\"\n  [p-title]=\"isAdvancedFilter ? advancedFilterModalTitle : title\"\n>\n  <div [hidden]=\"isAdvancedFilter\">\n    <po-field-container class=\"po-lookup-header po-pull-right\" [p-optional]=\"false\">\n      <div class=\"po-lookup-filter-content\">\n        <div class=\"po-field-icon-container-right\">\n          <span #iconLookup class=\"po-icon po-field-icon po-icon-search\" (click)=\"search()\"> </span>\n        </div>\n\n        <input\n          #inpsearch\n          class=\"po-input po-input-icon-right\"\n          name=\"contentSearch\"\n          [(ngModel)]=\"searchValue\"\n          [placeholder]=\"literals.modalPlaceholder\"\n          type=\"text\"\n        />\n      </div>\n\n      <div *ngIf=\"advancedFilters && advancedFilters.length > 0\" class=\"po-lookup-advanced-search\">\n        <span\n          class=\"po-lookup-advanced-search-link\"\n          tabindex=\"0\"\n          (click)=\"onAdvancedFilter()\"\n          (keydown.enter)=\"onAdvancedFilter()\"\n          tabindex=\"0\"\n        >\n          {{ literals.modalAdvancedSearch }}\n        </span>\n      </div>\n    </po-field-container>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"!!disclaimerGroup\"\n      class=\"po-md-12\"\n      [p-disclaimers]=\"disclaimerGroup?.disclaimers\"\n      [p-title]=\"disclaimerGroup?.title\"\n      (p-change)=\"onChangeDisclaimerGroup()\"\n    >\n    </po-disclaimer-group>\n\n    <div class=\"po-row po-lookup-container-table\" [style.height.px]=\"containerHeight\">\n      <po-table\n        #poTable\n        class=\"po-md-12\"\n        [p-selectable]=\"true\"\n        [p-hide-detail]=\"true\"\n        [p-single-select]=\"!multiple\"\n        [p-sort]=\"true\"\n        [p-columns]=\"columns\"\n        [p-height]=\"tableHeight\"\n        [p-items]=\"items\"\n        [p-literals]=\"tableLiterals\"\n        [p-loading]=\"isLoading\"\n        [p-show-more-disabled]=\"!hasNext\"\n        [p-infinite-scroll]=\"infiniteScroll\"\n        (p-selected)=\"onSelect($event)\"\n        (p-unselected)=\"onUnselect($event)\"\n        (p-all-selected)=\"onAllSelected($event)\"\n        (p-all-unselected)=\"onAllUnselected($event)\"\n        (p-show-more)=\"showMoreEvent()\"\n        (p-sort-by)=\"sortBy($event)\"\n      >\n      </po-table>\n    </div>\n\n    <!-- DISCLAIMER -->\n    <po-disclaimer-group\n      *ngIf=\"multiple\"\n      class=\"po-md-12\"\n      [p-disclaimers]=\"selecteds\"\n      (p-remove)=\"onUnselectFromDisclaimer($event.removedDisclaimer)\"\n      (p-remove-all)=\"onAllUnselected($event)\"\n    >\n    </po-disclaimer-group>\n  </div>\n  <div [hidden]=\"!isAdvancedFilter\">\n    <ng-container #container> </ng-container>\n  </div>\n</po-modal>\n"
            },] }
];
PoLookupModalComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: PoLanguageService },
    { type: ChangeDetectorRef }
];
PoLookupModalComponent.propDecorators = {
    poTable: [{ type: ViewChild, args: [PoTableComponent, { static: true },] }],
    inputSearchEl: [{ type: ViewChild, args: ['inpsearch',] }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbG9va3VwLW1vZGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1maWVsZC9wby1sb29rdXAvcG8tbG9va3VwLW1vZGFsL3BvLWxvb2t1cC1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1Qsd0JBQXdCLEVBSXhCLFNBQVMsRUFDVCxnQkFBZ0IsRUFDakIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLFNBQVMsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDL0YsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDM0YsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUVBQWlFLENBQUM7QUFDekcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFMUU7Ozs7R0FJRztBQUtILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSwwQkFBMEI7SUFhcEUsWUFDVSxnQkFBMEMsRUFDbEQsVUFBNkIsRUFDN0IsY0FBaUM7UUFFakMsS0FBSyxDQUFDLFVBQVUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUoxQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQTBCO1FBVHBELG9CQUFlLEdBQW9CLElBQUksQ0FBQztRQUV4QyxvQkFBZSxHQUFXLEdBQUcsQ0FBQztJQVk5QixDQUFDO0lBRUQsUUFBUTtRQUNOLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsY0FBYyxFQUFF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QUMsZ0JBQWdCLENBQUM7UUFFekQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVTthQUNsQyxJQUFJLENBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1QsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7WUFDeEIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztRQUN2RSxDQUFDLENBQUMsRUFDRixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQ3JDO2FBQ0EsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7UUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzs7WUEzSUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLHU3RkFBK0M7YUFDaEQ7OztZQXhCQyx3QkFBd0I7WUFZakIsaUJBQWlCO1lBZHhCLGlCQUFpQjs7O3NCQTRCaEIsU0FBUyxTQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs0QkFDNUMsU0FBUyxTQUFDLFdBQVc7d0JBQ3JCLFNBQVMsU0FBQyxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIENvbXBvbmVudFJlZixcbiAgRWxlbWVudFJlZixcbiAgT25Jbml0LFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlYm91bmNlVGltZSwgZmlsdGVyLCBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFBvVGFibGVDb2x1bW5Tb3J0IH0gZnJvbSAnLi4vLi4vLi4vcG8tdGFibGUvaW50ZXJmYWNlcy9wby10YWJsZS1jb2x1bW4tc29ydC5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9Mb29rdXBNb2RhbEJhc2VDb21wb25lbnQgfSBmcm9tICcuLi9wby1sb29rdXAtbW9kYWwvcG8tbG9va3VwLW1vZGFsLWJhc2UuY29tcG9uZW50JztcbmltcG9ydCB7IFBvTGFuZ3VhZ2VTZXJ2aWNlIH0gZnJvbSAnLi8uLi8uLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IFBvRHluYW1pY0Zvcm1Db21wb25lbnQgfSBmcm9tICcuLy4uLy4uLy4uL3BvLWR5bmFtaWMvcG8tZHluYW1pYy1mb3JtL3BvLWR5bmFtaWMtZm9ybS5jb21wb25lbnQnO1xuaW1wb3J0IHsgUG9UYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vLi4vLi4vLi4vcG8tdGFibGUvcG8tdGFibGUuY29tcG9uZW50JztcblxuLyoqXG4gKiBAZG9jc1ByaXZhdGVcbiAqXG4gKiBAZG9jc0V4dGVuZHMgUG9Mb29rdXBNb2RhbEJhc2VDb21wb25lbnRcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tbG9va3VwLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWxvb2t1cC1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9Mb29rdXBNb2RhbENvbXBvbmVudCBleHRlbmRzIFBvTG9va3VwTW9kYWxCYXNlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcbiAgQFZpZXdDaGlsZChQb1RhYmxlQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSBwb1RhYmxlOiBQb1RhYmxlQ29tcG9uZW50O1xuICBAVmlld0NoaWxkKCdpbnBzZWFyY2gnKSBpbnB1dFNlYXJjaEVsOiBFbGVtZW50UmVmO1xuICBAVmlld0NoaWxkKCdjb250YWluZXInLCB7IHJlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmO1xuXG4gIGtleVVwT2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxhbnk+ID0gbnVsbDtcblxuICBjb250YWluZXJIZWlnaHQ6IG51bWJlciA9IDM3NTtcbiAgdGFibGVIZWlnaHQ6IG51bWJlcjtcblxuICBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxQb0R5bmFtaWNGb3JtQ29tcG9uZW50PjtcbiAgZHluYW1pY0Zvcm06IE5nRm9ybTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3Rvcnk6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwb0xhbmd1YWdlOiBQb0xhbmd1YWdlU2VydmljZSxcbiAgICBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgc3VwZXIocG9MYW5ndWFnZSwgY2hhbmdlRGV0ZWN0b3IpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICB0aGlzLnNldFRhYmxlSGVpZ2h0KCk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplRXZlbnRJbnB1dCgpO1xuICB9XG5cbiAgLy8gU2VsZWNpb25hIHVtIGl0ZW0gbmEgdGFiZWxhXG4gIG9uU2VsZWN0KGl0ZW0pIHtcbiAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xuICAgICAgdGhpcy5zZWxlY3RlZHMgPSBbLi4udGhpcy5zZWxlY3RlZHMsIHsgdmFsdWU6IGl0ZW1bdGhpcy5maWVsZFZhbHVlXSwgbGFiZWw6IGl0ZW1bdGhpcy5maWVsZExhYmVsXSwgLi4uaXRlbSB9XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3RlZHMgPSBbeyB2YWx1ZTogaXRlbVt0aGlzLmZpZWxkVmFsdWVdLCBsYWJlbDogaXRlbVt0aGlzLmZpZWxkTGFiZWxdLCAuLi5pdGVtIH1dO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBhIHNlbGXDp8OjbyBkZSB1bSBpdGVtIG5hIHRhYmVsYVxuICBvblVuc2VsZWN0KHVuc2VsZWN0ZWRJdGVtKSB7XG4gICAgdGhpcy5zZWxlY3RlZHMgPSB0aGlzLnNlbGVjdGVkcy5maWx0ZXIoaXRlbVNlbGVjdGVkID0+IGl0ZW1TZWxlY3RlZC52YWx1ZSAhPT0gdW5zZWxlY3RlZEl0ZW1bdGhpcy5maWVsZFZhbHVlXSk7XG4gIH1cblxuICBvblVuc2VsZWN0RnJvbURpc2NsYWltZXIocmVtb3ZlZERpc2NsYWltZXIpIHtcbiAgICB0aGlzLnBvVGFibGUudW5zZWxlY3RSb3dJdGVtKGl0ZW0gPT4gaXRlbVt0aGlzLmZpZWxkVmFsdWVdID09PSByZW1vdmVkRGlzY2xhaW1lci52YWx1ZSk7XG4gIH1cblxuICAvLyBTZWxlY2lvbmEgdG9kb3Mgb3MgaXRlbnMgdmlzw612ZWlzIG5hIHRhYmVsYVxuICBvbkFsbFNlbGVjdGVkKGl0ZW1zKSB7XG4gICAgdGhpcy5zZWxlY3RlZHMgPSBpdGVtcy5tYXAoaXRlbSA9PiAoeyB2YWx1ZTogaXRlbVt0aGlzLmZpZWxkVmFsdWVdLCBsYWJlbDogaXRlbVt0aGlzLmZpZWxkTGFiZWxdLCAuLi5pdGVtIH0pKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBhIHNlbGXDp8OjbyBkZSB0b2RvcyBvcyBpdGVucyB2aXPDrXZlaXMgbmEgdGFiZWxhXG4gIG9uQWxsVW5zZWxlY3RlZChpdGVtcykge1xuICAgIHRoaXMucG9UYWJsZS51bnNlbGVjdFJvd3MoKTtcbiAgICB0aGlzLnNlbGVjdGVkcyA9IFtdO1xuICB9XG5cbiAgaW5pdGlhbGl6ZUV2ZW50SW5wdXQoKTogdm9pZCB7XG4gICAgdGhpcy5rZXlVcE9ic2VydmFibGUgPSBmcm9tRXZlbnQodGhpcy5pbnB1dFNlYXJjaEVsLm5hdGl2ZUVsZW1lbnQsICdrZXl1cCcpLnBpcGUoXG4gICAgICBmaWx0ZXIoKGU6IGFueSkgPT4gdGhpcy52YWxpZGF0ZUVudGVyUHJlc3NlZChlKSksXG4gICAgICBkZWJvdW5jZVRpbWUoNDAwKVxuICAgICk7XG5cbiAgICB0aGlzLmtleVVwT2JzZXJ2YWJsZS5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgdGhpcy5zZWFyY2goKTtcbiAgICB9KTtcbiAgfVxuXG4gIG9wZW5Nb2RhbCgpIHtcbiAgICB0aGlzLnBvTW9kYWwub3BlbigpO1xuICB9XG5cbiAgc29ydEJ5KHNvcnQ6IFBvVGFibGVDb2x1bW5Tb3J0KSB7XG4gICAgdGhpcy5zb3J0ID0gc29ydDtcbiAgfVxuXG4gIGRlc3Ryb3lEeW5hbWljRm9ybSgpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpIHtcbiAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cblxuICBvbkFkdmFuY2VkRmlsdGVyKCkge1xuICAgIHRoaXMuc2V0dXBNb2RhbEFkdmFuY2VkRmlsdGVyKCk7XG4gICAgdGhpcy5jcmVhdGVEeW5hbWljRm9ybSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRUYWJsZUhlaWdodCgpIHtcbiAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRzPy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgdGhpcy50YWJsZUhlaWdodCA9IDMwMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGFibGVIZWlnaHQgPSAzNzA7XG4gICAgICAgIHRoaXMuY29udGFpbmVySGVpZ2h0ID0gMzc1O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHByZWNpc2Egc2VyIDMxNSBwb3IgYXMgbGluaGFzIHRlcmVtIGFsdHVyYSBkZSAzMnB4IChxdWFuZG8gdGVsYSBtZW5vciBxdWUgMTM2NnB4KS5cbiAgICAvLyBPIHJldG9ybm8gcGFkcsOjbyDDqSAxMCBpdGVucyBmYXplbmRvIGNvbSBxdWUgZ2VyZSBzY3JvbGwgY2FzbyBob3V2ZXIgcGFnaW5hw6fDo28sIDM3MCBuw6NvIGdlcmF2YS5cbiAgICB0aGlzLnRhYmxlSGVpZ2h0ID0gdGhpcy5pbmZpbml0ZVNjcm9sbCA/IDMxNSA6IDM3MDtcbiAgICBpZiAod2luZG93LmlubmVySGVpZ2h0IDwgNjE1KSB7XG4gICAgICB0aGlzLnRhYmxlSGVpZ2h0IC09IDUwO1xuICAgICAgdGhpcy5jb250YWluZXJIZWlnaHQgLT0gNTA7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB2YWxpZGF0ZUVudGVyUHJlc3NlZChlOiBhbnkpIHtcbiAgICByZXR1cm4gZS5rZXlDb2RlID09PSAxMztcbiAgfVxuXG4gIHByaXZhdGUgc2V0dXBNb2RhbEFkdmFuY2VkRmlsdGVyKCkge1xuICAgIHRoaXMuZHluYW1pY0Zvcm1WYWx1ZSA9IHt9O1xuICAgIHRoaXMuaXNBZHZhbmNlZEZpbHRlciA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUR5bmFtaWNGb3JtKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IHRoaXMuY29tcG9uZW50RmFjdG9yeS5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeShQb0R5bmFtaWNGb3JtQ29tcG9uZW50KTtcblxuICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb250YWluZXIuY3JlYXRlQ29tcG9uZW50PFBvRHluYW1pY0Zvcm1Db21wb25lbnQ+KGNvbXBvbmVudCk7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZmllbGRzID0gdGhpcy5hZHZhbmNlZEZpbHRlcnM7XG4gICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UudmFsdWUgPSB0aGlzLmR5bmFtaWNGb3JtVmFsdWU7XG5cbiAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5mb3JtT3V0cHV0XG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKGZvcm0gPT4ge1xuICAgICAgICAgIHRoaXMuZHluYW1pY0Zvcm0gPSBmb3JtO1xuICAgICAgICAgIHRoaXMucHJpbWFyeUFjdGlvbkFkdmFuY2VkRmlsdGVyLmRpc2FibGVkID0gdGhpcy5keW5hbWljRm9ybS5pbnZhbGlkO1xuICAgICAgICB9KSxcbiAgICAgICAgc3dpdGNoTWFwKGZvcm0gPT4gZm9ybS52YWx1ZUNoYW5nZXMpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5wcmltYXJ5QWN0aW9uQWR2YW5jZWRGaWx0ZXIuZGlzYWJsZWQgPSB0aGlzLmR5bmFtaWNGb3JtLmludmFsaWQ7XG4gICAgICB9KTtcbiAgfVxufVxuIl19