import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean } from '../../utils/util';
import { PoLanguageService } from '../../services/po-language/po-language.service';
import { poLocaleDefault } from '../../services/po-language/po-language.constant';
export const poListViewLiteralsDefault = {
    en: {
        hideDetails: 'Hide details',
        loadMoreData: 'Load more data',
        noData: 'No data found',
        selectAll: 'Select all',
        showDetails: 'Show details'
    },
    es: {
        hideDetails: 'Ocultar detalles',
        loadMoreData: 'Cargar más resultados',
        noData: 'Datos no encontrados',
        selectAll: 'Seleccionar todos',
        showDetails: 'Mostrar detalles'
    },
    pt: {
        hideDetails: 'Ocultar detalhes',
        loadMoreData: 'Carregar mais resultados',
        noData: 'Nenhum dado encontrado',
        selectAll: 'Selecionar todos',
        showDetails: 'Exibir detalhes'
    },
    ru: {
        hideDetails: 'Скрыть детали',
        loadMoreData: 'Загрузить больше результатов',
        noData: 'Данные не найдены',
        selectAll: 'Выбрать все',
        showDetails: 'Посмотреть детали'
    }
};
/**
 * @description
 *
 * Componente de lista que recebe um array de objetos e renderiza de forma dinâmica os dados de
 * acordo com a necessidade de cada tela e deve ser utilizado em conjunto com as diretivas de *templates*
 *  **[p-list-view-content-template](/documentation/po-list-view-content-template)** e
 * **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 *
 * O componente disponibiliza uma área específica para exibição informações adicionais,
 * através da diretiva **[p-list-view-detail-template](/documentation/po-list-view-detail-template)**.
 */
export class PoListViewBaseComponent {
    constructor(languageService) {
        /**
         * @optional
         *
         * @description
         *
         * Recebe uma ação, que será executada quando clicar no botão "Carregar mais resultados".
         *
         * > Caso nenhuma ação for definida o mesmo não ficará visível.
         */
        this.showMore = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Ação que será executada ao clicar no título.
         *
         * Ao ser disparado, o método inserido na ação irá receber como parâmetro o item da lista clicado.
         */
        this.titleAction = new EventEmitter();
        this.selectAll = false;
        this.showHeader = false;
        this.language = poLocaleDefault;
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista de ações que serão exibidas no componente.
     */
    set actions(value) {
        this._actions = Array.isArray(value) ? value : [];
    }
    get actions() {
        return this._actions;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define a altura do `po-list-view` em *pixels*.
     */
    set height(height) {
        this._height = height;
    }
    get height() {
        return this._height;
    }
    /**
     * @description
     *
     * Esconde o *checkbox* para seleção de todos os itens.
     *
     * @default `false`
     */
    set hideSelectAll(hideSelectAll) {
        this._hideSelectAll = convertToBoolean(hideSelectAll);
        this.showMainHeader();
    }
    get hideSelectAll() {
        return this._hideSelectAll;
    }
    /** Lista de itens que serão exibidos no componente. */
    set items(value) {
        this._items = Array.isArray(value) ? value : [];
    }
    get items() {
        return this._items;
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-list-view`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    hideDetail: 'Ocultar detalhes completamente',
     *    loadMoreData: 'Mais dados',
     *    showDetail: 'Mostrar mais detalhes',
     *    selectAll: 'Selecionar todos os itens'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoListViewLiterals = {
     *    showDetail: 'Mostrar mais detalhes'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-list-view
     *   [p-literals]="customLiterals">
     * </po-list-view>
     * ```
     *
     * > O objeto padrão de literais será traduzido de acordo com o idioma do
     * [`PoI18nService`](/documentation/po-i18n) ou do browser.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poListViewLiteralsDefault[poLocaleDefault]), poListViewLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poListViewLiteralsDefault[this.language];
        }
    }
    get literals() {
        return this._literals || poListViewLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Habilita um *checkbox* para cada item da lista. Todos os items possuem a propriedade dinâmica `$selected` para identificar se o
     * item está selecionado, por exemplo:
     *
     * ```
     *  item.$selected
     *
     *  // ou
     *
     *  item['$selected']
     * ```
     *
     * @default `false`
     */
    set select(select) {
        this._select = convertToBoolean(select);
        this.showMainHeader();
    }
    get select() {
        return this._select;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o botão `Carregar Mais Resultados` será desabilitado.
     */
    set showMoreDisabled(value) {
        this._showMoreDisabled = convertToBoolean(value);
    }
    get showMoreDisabled() {
        return this._showMoreDisabled;
    }
    onClickAction(listViewAction, item) {
        const cleanItem = this.deleteInternalAttrs(item);
        if (listViewAction.action) {
            listViewAction.action(cleanItem);
        }
    }
    onShowMore() {
        this.showMore.emit();
    }
    runTitleAction(listItem) {
        const itemWithPublicProperties = this.deleteInternalAttrs(listItem);
        this.titleAction.emit(itemWithPublicProperties);
    }
    selectAllListItems() {
        if (!this.hideSelectAll) {
            this.selectAll = !this.selectAll;
            this.items.forEach(item => {
                item.$selected = this.selectAll;
            });
        }
    }
    selectListItem(row) {
        row.$selected = !row.$selected;
        this.selectAll = this.checkIfItemsAreSelected(this.items);
    }
    deleteInternalAttrs(item) {
        const itemCopy = item ? Object.assign({}, item) : undefined;
        for (const key in itemCopy) {
            if (itemCopy.hasOwnProperty(key) && key.startsWith('$')) {
                delete itemCopy[key];
            }
        }
        return itemCopy;
    }
    checkIfItemsAreSelected(items) {
        const someCheckedOrIndeterminate = item => item.$selected || item.$selected === null;
        const everyChecked = item => item.$selected;
        if (items.every(everyChecked)) {
            return true;
        }
        if (items.some(someCheckedOrIndeterminate)) {
            return null;
        }
        return false;
    }
    showMainHeader() {
        this.showHeader = !!(this.select && !this.hideSelectAll && this.items && this.items.length);
    }
}
PoListViewBaseComponent.decorators = [
    { type: Directive }
];
PoListViewBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoListViewBaseComponent.propDecorators = {
    propertyLink: [{ type: Input, args: ['p-property-link',] }],
    propertyTitle: [{ type: Input, args: ['p-property-title',] }],
    showMore: [{ type: Output, args: ['p-show-more',] }],
    titleAction: [{ type: Output, args: ['p-title-action',] }],
    actions: [{ type: Input, args: ['p-actions',] }],
    height: [{ type: Input, args: ['p-height',] }],
    hideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
    items: [{ type: Input, args: ['p-items',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    select: [{ type: Input, args: ['p-select',] }],
    showMoreDisabled: [{ type: Input, args: ['p-show-more-disabled',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbGlzdC12aWV3LWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWxpc3Qtdmlldy9wby1saXN0LXZpZXctYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNuRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saURBQWlELENBQUM7QUFJbEYsTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUc7SUFDdkMsRUFBRSxFQUFzQjtRQUN0QixXQUFXLEVBQUUsY0FBYztRQUMzQixZQUFZLEVBQUUsZ0JBQWdCO1FBQzlCLE1BQU0sRUFBRSxlQUFlO1FBQ3ZCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLFdBQVcsRUFBRSxjQUFjO0tBQzVCO0lBQ0QsRUFBRSxFQUFzQjtRQUN0QixXQUFXLEVBQUUsa0JBQWtCO1FBQy9CLFlBQVksRUFBRSx1QkFBdUI7UUFDckMsTUFBTSxFQUFFLHNCQUFzQjtRQUM5QixTQUFTLEVBQUUsbUJBQW1CO1FBQzlCLFdBQVcsRUFBRSxrQkFBa0I7S0FDaEM7SUFDRCxFQUFFLEVBQXNCO1FBQ3RCLFdBQVcsRUFBRSxrQkFBa0I7UUFDL0IsWUFBWSxFQUFFLDBCQUEwQjtRQUN4QyxNQUFNLEVBQUUsd0JBQXdCO1FBQ2hDLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsV0FBVyxFQUFFLGlCQUFpQjtLQUMvQjtJQUNELEVBQUUsRUFBc0I7UUFDdEIsV0FBVyxFQUFFLGVBQWU7UUFDNUIsWUFBWSxFQUFFLDhCQUE4QjtRQUM1QyxNQUFNLEVBQUUsbUJBQW1CO1FBQzNCLFNBQVMsRUFBRSxhQUFhO1FBQ3hCLFdBQVcsRUFBRSxtQkFBbUI7S0FDakM7Q0FDRixDQUFDO0FBRUY7Ozs7Ozs7Ozs7R0FVRztBQUVILE1BQU0sT0FBTyx1QkFBdUI7SUFnTWxDLFlBQVksZUFBa0M7UUF6TDlDOzs7Ozs7OztXQVFHO1FBQ29CLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU3RTs7Ozs7Ozs7V0FRRztRQUN1QixnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBR25GLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFDM0IsZUFBVSxHQUFZLEtBQUssQ0FBQztRQVNwQixhQUFRLEdBQVcsZUFBZSxDQUFDO1FBeUp6QyxJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3JELENBQUM7SUF4SkQ7Ozs7OztPQU1HO0lBQ0gsSUFBd0IsT0FBTyxDQUFDLEtBQThCO1FBQzVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBdUIsTUFBTSxDQUFDLE1BQWM7UUFDMUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsSUFBZ0MsYUFBYSxDQUFDLGFBQXNCO1FBQ2xFLElBQUksQ0FBQyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVELHVEQUF1RDtJQUN2RCxJQUFzQixLQUFLLENBQUMsS0FBaUI7UUFDM0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O09Bb0NHO0lBQ0gsSUFBeUIsUUFBUSxDQUFDLEtBQXlCO1FBQ3pELElBQUksS0FBSyxZQUFZLE1BQU0sSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxFQUFFO1lBQ3hELElBQUksQ0FBQyxTQUFTLGlEQUNULHlCQUF5QixDQUFDLGVBQWUsQ0FBQyxHQUMxQyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQ3hDLEtBQUssQ0FDVCxDQUFDO1NBQ0g7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUcseUJBQXlCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNEO0lBQ0gsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7OztPQWlCRztJQUNILElBQXVCLE1BQU0sQ0FBQyxNQUFlO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILElBQW1DLGdCQUFnQixDQUFDLEtBQWM7UUFDaEUsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUNoQyxDQUFDO0lBTUQsYUFBYSxDQUFDLGNBQWdDLEVBQUUsSUFBSTtRQUNsRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDakQsSUFBSSxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ3pCLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELGNBQWMsQ0FBQyxRQUFhO1FBQzFCLE1BQU0sd0JBQXdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUVqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDeEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsY0FBYyxDQUFDLEdBQVE7UUFDckIsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFFL0IsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxJQUFJO1FBQzlCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLG1CQUFNLElBQUksRUFBRyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBRWhELEtBQUssTUFBTSxHQUFHLElBQUksUUFBUSxFQUFFO1lBQzFCLElBQUksUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2RCxPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN0QjtTQUNGO1FBRUQsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVPLHVCQUF1QixDQUFDLEtBQWlCO1FBQy9DLE1BQU0sMEJBQTBCLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDO1FBQ3JGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUU1QyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDN0IsT0FBTyxJQUFJLENBQUM7U0FDYjtRQUVELElBQUksS0FBSyxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFO1lBQzFDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlGLENBQUM7OztZQWxRRixTQUFTOzs7WUEvQ0QsaUJBQWlCOzs7MkJBa0R2QixLQUFLLFNBQUMsaUJBQWlCOzRCQUd2QixLQUFLLFNBQUMsa0JBQWtCO3VCQVd4QixNQUFNLFNBQUMsYUFBYTswQkFXcEIsTUFBTSxTQUFDLGdCQUFnQjtzQkFzQnZCLEtBQUssU0FBQyxXQUFXO3FCQWVqQixLQUFLLFNBQUMsVUFBVTs0QkFlaEIsS0FBSyxTQUFDLG1CQUFtQjtvQkFVekIsS0FBSyxTQUFDLFNBQVM7dUJBNkNmLEtBQUssU0FBQyxZQUFZO3FCQWtDbEIsS0FBSyxTQUFDLFVBQVU7K0JBZ0JoQixLQUFLLFNBQUMsc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29udmVydFRvQm9vbGVhbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLmNvbnN0YW50JztcbmltcG9ydCB7IFBvTGlzdFZpZXdBY3Rpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tbGlzdC12aWV3LWFjdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9MaXN0Vmlld0xpdGVyYWxzIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWxpc3Qtdmlldy1saXRlcmFscy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgcG9MaXN0Vmlld0xpdGVyYWxzRGVmYXVsdCA9IHtcbiAgZW46IDxQb0xpc3RWaWV3TGl0ZXJhbHM+e1xuICAgIGhpZGVEZXRhaWxzOiAnSGlkZSBkZXRhaWxzJyxcbiAgICBsb2FkTW9yZURhdGE6ICdMb2FkIG1vcmUgZGF0YScsXG4gICAgbm9EYXRhOiAnTm8gZGF0YSBmb3VuZCcsXG4gICAgc2VsZWN0QWxsOiAnU2VsZWN0IGFsbCcsXG4gICAgc2hvd0RldGFpbHM6ICdTaG93IGRldGFpbHMnXG4gIH0sXG4gIGVzOiA8UG9MaXN0Vmlld0xpdGVyYWxzPntcbiAgICBoaWRlRGV0YWlsczogJ09jdWx0YXIgZGV0YWxsZXMnLFxuICAgIGxvYWRNb3JlRGF0YTogJ0NhcmdhciBtw6FzIHJlc3VsdGFkb3MnLFxuICAgIG5vRGF0YTogJ0RhdG9zIG5vIGVuY29udHJhZG9zJyxcbiAgICBzZWxlY3RBbGw6ICdTZWxlY2Npb25hciB0b2RvcycsXG4gICAgc2hvd0RldGFpbHM6ICdNb3N0cmFyIGRldGFsbGVzJ1xuICB9LFxuICBwdDogPFBvTGlzdFZpZXdMaXRlcmFscz57XG4gICAgaGlkZURldGFpbHM6ICdPY3VsdGFyIGRldGFsaGVzJyxcbiAgICBsb2FkTW9yZURhdGE6ICdDYXJyZWdhciBtYWlzIHJlc3VsdGFkb3MnLFxuICAgIG5vRGF0YTogJ05lbmh1bSBkYWRvIGVuY29udHJhZG8nLFxuICAgIHNlbGVjdEFsbDogJ1NlbGVjaW9uYXIgdG9kb3MnLFxuICAgIHNob3dEZXRhaWxzOiAnRXhpYmlyIGRldGFsaGVzJ1xuICB9LFxuICBydTogPFBvTGlzdFZpZXdMaXRlcmFscz57XG4gICAgaGlkZURldGFpbHM6ICfQodC60YDRi9GC0Ywg0LTQtdGC0LDQu9C4JyxcbiAgICBsb2FkTW9yZURhdGE6ICfQl9Cw0LPRgNGD0LfQuNGC0Ywg0LHQvtC70YzRiNC1INGA0LXQt9GD0LvRjNGC0LDRgtC+0LInLFxuICAgIG5vRGF0YTogJ9CU0LDQvdC90YvQtSDQvdC1INC90LDQudC00LXQvdGLJyxcbiAgICBzZWxlY3RBbGw6ICfQktGL0LHRgNCw0YLRjCDQstGB0LUnLFxuICAgIHNob3dEZXRhaWxzOiAn0J/QvtGB0LzQvtGC0YDQtdGC0Ywg0LTQtdGC0LDQu9C4J1xuICB9XG59O1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgZGUgbGlzdGEgcXVlIHJlY2ViZSB1bSBhcnJheSBkZSBvYmpldG9zIGUgcmVuZGVyaXphIGRlIGZvcm1hIGRpbsOibWljYSBvcyBkYWRvcyBkZVxuICogYWNvcmRvIGNvbSBhIG5lY2Vzc2lkYWRlIGRlIGNhZGEgdGVsYSBlIGRldmUgc2VyIHV0aWxpemFkbyBlbSBjb25qdW50byBjb20gYXMgZGlyZXRpdmFzIGRlICp0ZW1wbGF0ZXMqXG4gKiAgKipbcC1saXN0LXZpZXctY29udGVudC10ZW1wbGF0ZV0oL2RvY3VtZW50YXRpb24vcG8tbGlzdC12aWV3LWNvbnRlbnQtdGVtcGxhdGUpKiogZVxuICogKipbcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlKSoqLlxuICpcbiAqIE8gY29tcG9uZW50ZSBkaXNwb25pYmlsaXphIHVtYSDDoXJlYSBlc3BlY8OtZmljYSBwYXJhIGV4aWJpw6fDo28gaW5mb3JtYcOnw7VlcyBhZGljaW9uYWlzLFxuICogYXRyYXbDqXMgZGEgZGlyZXRpdmEgKipbcC1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlXSgvZG9jdW1lbnRhdGlvbi9wby1saXN0LXZpZXctZGV0YWlsLXRlbXBsYXRlKSoqLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0xpc3RWaWV3QmFzZUNvbXBvbmVudCB7XG4gIC8qKiBSZWNlYmUgdW1hIHByb3ByaWVkYWRlIHF1ZSBzZXLDoSB1dGlsaXphZGEgcGFyYSByZWN1cGVyYXIgbyB2YWxvciBkbyBvYmpldG8gcXVlIHNlcsOhIHVzYWRvIGNvbW8gbGluayBwYXJhIG8gdMOtdHVsby4gKi9cbiAgQElucHV0KCdwLXByb3BlcnR5LWxpbmsnKSBwcm9wZXJ0eUxpbms/OiBzdHJpbmc7XG5cbiAgLyoqIFJlY2ViZSB1bWEgcHJvcHJpZWRhZGUgcXVlIHNlcsOhIHV0aWxpemFkYSBwYXJhIHJlY3VwZXJhciBvIHZhbG9yIGRvIG9iamV0byBxdWUgc2Vyw6EgZXhpYmlkbyBjb21vIG8gdMOtdHVsbyBkZSBjYWRhIGl0ZW0uICovXG4gIEBJbnB1dCgncC1wcm9wZXJ0eS10aXRsZScpIHByb3BlcnR5VGl0bGU/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUmVjZWJlIHVtYSBhw6fDo28sIHF1ZSBzZXLDoSBleGVjdXRhZGEgcXVhbmRvIGNsaWNhciBubyBib3TDo28gXCJDYXJyZWdhciBtYWlzIHJlc3VsdGFkb3NcIi5cbiAgICpcbiAgICogPiBDYXNvIG5lbmh1bWEgYcOnw6NvIGZvciBkZWZpbmlkYSBvIG1lc21vIG7Do28gZmljYXLDoSB2aXPDrXZlbC5cbiAgICovXG4gIEBPdXRwdXQoJ3Atc2hvdy1tb3JlJykgc2hvd01vcmU6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQcOnw6NvIHF1ZSBzZXLDoSBleGVjdXRhZGEgYW8gY2xpY2FyIG5vIHTDrXR1bG8uXG4gICAqXG4gICAqIEFvIHNlciBkaXNwYXJhZG8sIG8gbcOpdG9kbyBpbnNlcmlkbyBuYSBhw6fDo28gaXLDoSByZWNlYmVyIGNvbW8gcGFyw6JtZXRybyBvIGl0ZW0gZGEgbGlzdGEgY2xpY2Fkby5cbiAgICovXG4gIEBPdXRwdXQoJ3AtdGl0bGUtYWN0aW9uJykgdGl0bGVBY3Rpb246IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgcG9wdXBUYXJnZXQ6IGFueTtcbiAgc2VsZWN0QWxsOiBib29sZWFuID0gZmFsc2U7XG4gIHNob3dIZWFkZXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBwcml2YXRlIF9hY3Rpb25zOiBBcnJheTxQb0xpc3RWaWV3QWN0aW9uPjtcbiAgcHJpdmF0ZSBfaGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgX2hpZGVTZWxlY3RBbGw6IGJvb2xlYW47XG4gIHByaXZhdGUgX2l0ZW1zOiBBcnJheTxhbnk+O1xuICBwcml2YXRlIF9saXRlcmFsczogUG9MaXN0Vmlld0xpdGVyYWxzO1xuICBwcml2YXRlIF9zZWxlY3Q6IGJvb2xlYW47XG4gIHByaXZhdGUgX3Nob3dNb3JlRGlzYWJsZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZyA9IHBvTG9jYWxlRGVmYXVsdDtcblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBMaXN0YSBkZSBhw6fDtWVzIHF1ZSBzZXLDo28gZXhpYmlkYXMgbm8gY29tcG9uZW50ZS5cbiAgICovXG4gIEBJbnB1dCgncC1hY3Rpb25zJykgc2V0IGFjdGlvbnModmFsdWU6IEFycmF5PFBvTGlzdFZpZXdBY3Rpb24+KSB7XG4gICAgdGhpcy5fYWN0aW9ucyA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbXTtcbiAgfVxuXG4gIGdldCBhY3Rpb25zKCkge1xuICAgIHJldHVybiB0aGlzLl9hY3Rpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIGEgYWx0dXJhIGRvIGBwby1saXN0LXZpZXdgIGVtICpwaXhlbHMqLlxuICAgKi9cbiAgQElucHV0KCdwLWhlaWdodCcpIHNldCBoZWlnaHQoaGVpZ2h0OiBudW1iZXIpIHtcbiAgICB0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XG4gIH1cblxuICBnZXQgaGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLl9oZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEVzY29uZGUgbyAqY2hlY2tib3gqIHBhcmEgc2VsZcOnw6NvIGRlIHRvZG9zIG9zIGl0ZW5zLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtaGlkZS1zZWxlY3QtYWxsJykgc2V0IGhpZGVTZWxlY3RBbGwoaGlkZVNlbGVjdEFsbDogYm9vbGVhbikge1xuICAgIHRoaXMuX2hpZGVTZWxlY3RBbGwgPSBjb252ZXJ0VG9Cb29sZWFuKGhpZGVTZWxlY3RBbGwpO1xuICAgIHRoaXMuc2hvd01haW5IZWFkZXIoKTtcbiAgfVxuXG4gIGdldCBoaWRlU2VsZWN0QWxsKCkge1xuICAgIHJldHVybiB0aGlzLl9oaWRlU2VsZWN0QWxsO1xuICB9XG5cbiAgLyoqIExpc3RhIGRlIGl0ZW5zIHF1ZSBzZXLDo28gZXhpYmlkb3Mgbm8gY29tcG9uZW50ZS4gKi9cbiAgQElucHV0KCdwLWl0ZW1zJykgc2V0IGl0ZW1zKHZhbHVlOiBBcnJheTxhbnk+KSB7XG4gICAgdGhpcy5faXRlbXMgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW107XG4gIH1cblxuICBnZXQgaXRlbXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW1zO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogT2JqZXRvIGNvbSBhcyBsaXRlcmFpcyB1c2FkYXMgbm8gYHBvLWxpc3Qtdmlld2AuXG4gICAqXG4gICAqIEV4aXN0ZW0gZHVhcyBtYW5laXJhcyBkZSBjdXN0b21pemFyIG8gY29tcG9uZW50ZSwgcGFzc2FuZG8gdW0gb2JqZXRvIGNvbSB0b2RhcyBhcyBsaXRlcmFpcyBkaXNwb27DrXZlaXM6XG4gICAqXG4gICAqIGBgYFxuICAgKiAgY29uc3QgY3VzdG9tTGl0ZXJhbHM6IFBvTGlzdFZpZXdMaXRlcmFscyA9IHtcbiAgICogICAgaGlkZURldGFpbDogJ09jdWx0YXIgZGV0YWxoZXMgY29tcGxldGFtZW50ZScsXG4gICAqICAgIGxvYWRNb3JlRGF0YTogJ01haXMgZGFkb3MnLFxuICAgKiAgICBzaG93RGV0YWlsOiAnTW9zdHJhciBtYWlzIGRldGFsaGVzJyxcbiAgICogICAgc2VsZWN0QWxsOiAnU2VsZWNpb25hciB0b2RvcyBvcyBpdGVucydcbiAgICogIH07XG4gICAqIGBgYFxuICAgKlxuICAgKiBPdSBwYXNzYW5kbyBhcGVuYXMgYXMgbGl0ZXJhaXMgcXVlIGRlc2VqYSBjdXN0b21pemFyOlxuICAgKlxuICAgKiBgYGBcbiAgICogIGNvbnN0IGN1c3RvbUxpdGVyYWxzOiBQb0xpc3RWaWV3TGl0ZXJhbHMgPSB7XG4gICAqICAgIHNob3dEZXRhaWw6ICdNb3N0cmFyIG1haXMgZGV0YWxoZXMnXG4gICAqICB9O1xuICAgKiBgYGBcbiAgICpcbiAgICogRSBwYXJhIGNhcnJlZ2FyIGFzIGxpdGVyYWlzIGN1c3RvbWl6YWRhcywgYmFzdGEgYXBlbmFzIHBhc3NhciBvIG9iamV0byBwYXJhIG8gY29tcG9uZW50ZS5cbiAgICpcbiAgICogYGBgXG4gICAqIDxwby1saXN0LXZpZXdcbiAgICogICBbcC1saXRlcmFsc109XCJjdXN0b21MaXRlcmFsc1wiPlxuICAgKiA8L3BvLWxpc3Qtdmlldz5cbiAgICogYGBgXG4gICAqXG4gICAqID4gTyBvYmpldG8gcGFkcsOjbyBkZSBsaXRlcmFpcyBzZXLDoSB0cmFkdXppZG8gZGUgYWNvcmRvIGNvbSBvIGlkaW9tYSBkb1xuICAgKiBbYFBvSTE4blNlcnZpY2VgXSgvZG9jdW1lbnRhdGlvbi9wby1pMThuKSBvdSBkbyBicm93c2VyLlxuICAgKi9cbiAgQElucHV0KCdwLWxpdGVyYWxzJykgc2V0IGxpdGVyYWxzKHZhbHVlOiBQb0xpc3RWaWV3TGl0ZXJhbHMpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QgJiYgISh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSkge1xuICAgICAgdGhpcy5fbGl0ZXJhbHMgPSB7XG4gICAgICAgIC4uLnBvTGlzdFZpZXdMaXRlcmFsc0RlZmF1bHRbcG9Mb2NhbGVEZWZhdWx0XSxcbiAgICAgICAgLi4ucG9MaXN0Vmlld0xpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXSxcbiAgICAgICAgLi4udmFsdWVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2xpdGVyYWxzID0gcG9MaXN0Vmlld0xpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXTtcbiAgICB9XG4gIH1cblxuICBnZXQgbGl0ZXJhbHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpdGVyYWxzIHx8IHBvTGlzdFZpZXdMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV07XG4gIH1cblxuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBIYWJpbGl0YSB1bSAqY2hlY2tib3gqIHBhcmEgY2FkYSBpdGVtIGRhIGxpc3RhLiBUb2RvcyBvcyBpdGVtcyBwb3NzdWVtIGEgcHJvcHJpZWRhZGUgZGluw6JtaWNhIGAkc2VsZWN0ZWRgIHBhcmEgaWRlbnRpZmljYXIgc2Ugb1xuICAgKiBpdGVtIGVzdMOhIHNlbGVjaW9uYWRvLCBwb3IgZXhlbXBsbzpcbiAgICpcbiAgICogYGBgXG4gICAqICBpdGVtLiRzZWxlY3RlZFxuICAgKlxuICAgKiAgLy8gb3VcbiAgICpcbiAgICogIGl0ZW1bJyRzZWxlY3RlZCddXG4gICAqIGBgYFxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3Atc2VsZWN0Jykgc2V0IHNlbGVjdChzZWxlY3Q6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zZWxlY3QgPSBjb252ZXJ0VG9Cb29sZWFuKHNlbGVjdCk7XG4gICAgdGhpcy5zaG93TWFpbkhlYWRlcigpO1xuICB9XG5cbiAgZ2V0IHNlbGVjdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSW5kaWNhIHF1ZSBvIGJvdMOjbyBgQ2FycmVnYXIgTWFpcyBSZXN1bHRhZG9zYCBzZXLDoSBkZXNhYmlsaXRhZG8uXG4gICAqL1xuICBASW5wdXQoJ3Atc2hvdy1tb3JlLWRpc2FibGVkJykgc2V0IHNob3dNb3JlRGlzYWJsZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93TW9yZURpc2FibGVkID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG4gIH1cblxuICBnZXQgc2hvd01vcmVEaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fc2hvd01vcmVEaXNhYmxlZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UpIHtcbiAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKTtcbiAgfVxuXG4gIG9uQ2xpY2tBY3Rpb24obGlzdFZpZXdBY3Rpb246IFBvTGlzdFZpZXdBY3Rpb24sIGl0ZW0pIHtcbiAgICBjb25zdCBjbGVhbkl0ZW0gPSB0aGlzLmRlbGV0ZUludGVybmFsQXR0cnMoaXRlbSk7XG4gICAgaWYgKGxpc3RWaWV3QWN0aW9uLmFjdGlvbikge1xuICAgICAgbGlzdFZpZXdBY3Rpb24uYWN0aW9uKGNsZWFuSXRlbSk7XG4gICAgfVxuICB9XG5cbiAgb25TaG93TW9yZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNob3dNb3JlLmVtaXQoKTtcbiAgfVxuXG4gIHJ1blRpdGxlQWN0aW9uKGxpc3RJdGVtOiBhbnkpIHtcbiAgICBjb25zdCBpdGVtV2l0aFB1YmxpY1Byb3BlcnRpZXMgPSB0aGlzLmRlbGV0ZUludGVybmFsQXR0cnMobGlzdEl0ZW0pO1xuICAgIHRoaXMudGl0bGVBY3Rpb24uZW1pdChpdGVtV2l0aFB1YmxpY1Byb3BlcnRpZXMpO1xuICB9XG5cbiAgc2VsZWN0QWxsTGlzdEl0ZW1zKCkge1xuICAgIGlmICghdGhpcy5oaWRlU2VsZWN0QWxsKSB7XG4gICAgICB0aGlzLnNlbGVjdEFsbCA9ICF0aGlzLnNlbGVjdEFsbDtcblxuICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgICBpdGVtLiRzZWxlY3RlZCA9IHRoaXMuc2VsZWN0QWxsO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0TGlzdEl0ZW0ocm93OiBhbnkpIHtcbiAgICByb3cuJHNlbGVjdGVkID0gIXJvdy4kc2VsZWN0ZWQ7XG5cbiAgICB0aGlzLnNlbGVjdEFsbCA9IHRoaXMuY2hlY2tJZkl0ZW1zQXJlU2VsZWN0ZWQodGhpcy5pdGVtcyk7XG4gIH1cblxuICBwcml2YXRlIGRlbGV0ZUludGVybmFsQXR0cnMoaXRlbSkge1xuICAgIGNvbnN0IGl0ZW1Db3B5ID0gaXRlbSA/IHsgLi4uaXRlbSB9IDogdW5kZWZpbmVkO1xuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gaXRlbUNvcHkpIHtcbiAgICAgIGlmIChpdGVtQ29weS5oYXNPd25Qcm9wZXJ0eShrZXkpICYmIGtleS5zdGFydHNXaXRoKCckJykpIHtcbiAgICAgICAgZGVsZXRlIGl0ZW1Db3B5W2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGl0ZW1Db3B5O1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0lmSXRlbXNBcmVTZWxlY3RlZChpdGVtczogQXJyYXk8YW55Pik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHNvbWVDaGVja2VkT3JJbmRldGVybWluYXRlID0gaXRlbSA9PiBpdGVtLiRzZWxlY3RlZCB8fCBpdGVtLiRzZWxlY3RlZCA9PT0gbnVsbDtcbiAgICBjb25zdCBldmVyeUNoZWNrZWQgPSBpdGVtID0+IGl0ZW0uJHNlbGVjdGVkO1xuXG4gICAgaWYgKGl0ZW1zLmV2ZXJ5KGV2ZXJ5Q2hlY2tlZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpdGVtcy5zb21lKHNvbWVDaGVja2VkT3JJbmRldGVybWluYXRlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93TWFpbkhlYWRlcigpIHtcbiAgICB0aGlzLnNob3dIZWFkZXIgPSAhISh0aGlzLnNlbGVjdCAmJiAhdGhpcy5oaWRlU2VsZWN0QWxsICYmIHRoaXMuaXRlbXMgJiYgdGhpcy5pdGVtcy5sZW5ndGgpO1xuICB9XG59XG4iXX0=