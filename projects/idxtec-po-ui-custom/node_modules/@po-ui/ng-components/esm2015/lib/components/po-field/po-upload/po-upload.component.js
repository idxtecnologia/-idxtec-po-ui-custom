import { __rest } from "tslib";
import { Component, ElementRef, forwardRef, Renderer2, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { formatBytes, isMobile } from '../../../utils/util';
import { PoI18nPipe } from '../../../services/po-i18n/po-i18n.pipe';
import { PoNotificationService } from '../../../services/po-notification/po-notification.service';
import { PoProgressStatus } from '../../po-progress/enums/po-progress-status.enum';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
import { PoUploadBaseComponent } from './po-upload-base.component';
import { PoUploadDragDropComponent } from './po-upload-drag-drop/po-upload-drag-drop.component';
import { PoUploadService } from './po-upload.service';
import { PoUploadStatus } from './po-upload-status.enum';
/**
 * @docsExtends PoUploadBaseComponent
 *
 * @example
 *
 * <example name="po-upload-basic" title="PO Upload Basic">
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.html"> </file>
 *   <file name="sample-po-upload-basic/sample-po-upload-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-labs" title="PO Upload Labs">
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.html"> </file>
 *   <file name="sample-po-upload-labs/sample-po-upload-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-resume" title="PO Upload - Resume">
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.html"> </file>
 *   <file name="sample-po-upload-resume/sample-po-upload-resume.component.ts"> </file>
 * </example>
 *
 * <example name="po-upload-rs" title="PO Upload - Realize & Show">
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.html"> </file>
 *   <file name="sample-po-upload-rs/sample-po-upload-rs.component.ts"> </file>
 * </example>
 */
export class PoUploadComponent extends PoUploadBaseComponent {
    constructor(uploadService, renderer, i18nPipe, notification, languageService) {
        super(uploadService, languageService);
        this.renderer = renderer;
        this.i18nPipe = i18nPipe;
        this.notification = notification;
        this.infoByUploadStatus = {
            [PoUploadStatus.Uploaded]: {
                text: () => this.literals.sentWithSuccess,
                icon: 'po-icon-ok'
            },
            [PoUploadStatus.Error]: {
                text: () => this.literals.errorOccurred
            },
            [PoUploadStatus.Uploading]: {
                text: percent => percent + '%'
            }
        };
        this.progressStatusByFileStatus = {
            [PoUploadStatus.Uploaded]: PoProgressStatus.Success,
            [PoUploadStatus.Error]: PoProgressStatus.Error
        };
        this.calledByCleanInputValue = false;
    }
    get displayDragDrop() {
        return this.dragDrop && !isMobile();
    }
    get displaySendButton() {
        const currentFiles = this.currentFiles || [];
        return !this.hideSendButton && !this.autoUpload && currentFiles.length > 0 && this.hasFileNotUploaded;
    }
    get selectFileButtonLabel() {
        if (this.canHandleDirectory) {
            return this.literals.selectFolder;
        }
        else if (this.isMultiple) {
            return this.literals.selectFiles;
        }
        else {
            return this.literals.selectFile;
        }
    }
    get hasMoreThanFourItems() {
        return this.currentFiles && this.currentFiles.length > 4;
    }
    get hasMultipleFiles() {
        return this.currentFiles && this.currentFiles.length > 1;
    }
    get hasFileNotUploaded() {
        if (Array.isArray(this.currentFiles)) {
            return this.currentFiles.some(file => file.status !== PoUploadStatus.Uploaded);
        }
        return false;
    }
    get isDisabled() {
        const currentFiles = this.currentFiles || [];
        return !!(this.hasAnyFileUploading(currentFiles) ||
            !this.url ||
            this.disabled ||
            this.isExceededFileLimit(currentFiles.length));
    }
    get maxFiles() {
        return this.isMultiple && this.fileRestrictions && this.fileRestrictions.maxFiles;
    }
    cancel(file) {
        if (file.status === PoUploadStatus.Uploading) {
            return this.stopUpload(file);
        }
        this.removeFile(file);
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    /** Método responsável por **limpar** o(s) arquivo(s) selecionado(s). */
    clear() {
        this.currentFiles = undefined;
        this.updateModel([]);
        this.cleanInputValue();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoUploadComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoUploadComponent, { static: true }) upload: PoUploadComponent;
     *
     * focusUpload() {
     *   this.upload.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            if (this.uploadButton) {
                this.uploadButton.focus();
                return;
            }
            if (this.displayDragDrop) {
                this.poUploadDragDropComponent.focus();
            }
        }
    }
    // Verifica se existe algum arquivo sendo enviado ao serviço.
    hasAnyFileUploading(files) {
        if (files && files.length) {
            return files.some(file => file.status === PoUploadStatus.Uploading);
        }
        return false;
    }
    // retorna se o status do arquivo é diferente de enviado
    isAllowCancelEvent(status) {
        return status !== PoUploadStatus.Uploaded;
    }
    // Função disparada ao selecionar algum arquivo.
    onFileChange(event) {
        // necessário este tratamento quando para IE, pois nele o change é disparado quando o campo é limpado também
        if (this.calledByCleanInputValue) {
            this.calledByCleanInputValue = false;
            return event.preventDefault();
        }
        const files = event.target.files;
        this.updateFiles(files);
        this.cleanInputValue();
    }
    onFileChangeDragDrop(files) {
        this.updateFiles(files);
    }
    // Remove o arquivo passado por parâmetro da lista dos arquivos correntes.
    removeFile(file) {
        const index = this.currentFiles.indexOf(file);
        this.currentFiles.splice(index, 1);
        this.updateModel([...this.currentFiles]);
    }
    /** Método responsável por **abrir** a janela para seleção de arquivo(s). */
    selectFiles() {
        var _a;
        (_a = this.onModelTouched) === null || _a === void 0 ? void 0 : _a.call(this);
        this.calledByCleanInputValue = false;
        this.inputFile.nativeElement.click();
    }
    sendFeedback() {
        if (this.sizeNotAllowed > 0) {
            const minFileSize = formatBytes(this.fileRestrictions.minFileSize);
            const maxFileSize = formatBytes(this.fileRestrictions.maxFileSize);
            const args = [this.sizeNotAllowed, minFileSize || '0', maxFileSize];
            this.setPipeArguments('invalidSize', args);
            this.sizeNotAllowed = 0;
        }
        if (this.extensionNotAllowed > 0) {
            const allowedExtensionsFormatted = this.fileRestrictions.allowedExtensions.join(', ').toUpperCase();
            const args = [this.extensionNotAllowed, allowedExtensionsFormatted];
            this.setPipeArguments('invalidFormat', args);
            this.extensionNotAllowed = 0;
        }
        if (this.quantityNotAllowed > 0) {
            const args = [this.quantityNotAllowed];
            this.setPipeArguments('invalidAmount', args);
            this.quantityNotAllowed = 0;
        }
    }
    /** Método responsável por **enviar** o(s) arquivo(s) selecionado(s). */
    sendFiles() {
        if (this.currentFiles && this.currentFiles.length) {
            this.uploadFiles(this.currentFiles);
        }
    }
    setDirectoryAttribute(canHandleDirectory) {
        if (canHandleDirectory) {
            this.renderer.setAttribute(this.inputFile.nativeElement, 'webkitdirectory', 'true');
        }
        else {
            this.renderer.removeAttribute(this.inputFile.nativeElement, 'webkitdirectory');
        }
    }
    // Caso o componente estiver no modo AutoUpload, o arquivo também será removido da lista.
    stopUpload(file) {
        this.uploadService.stopRequestByFile(file, () => {
            if (this.autoUpload) {
                this.removeFile(file);
            }
            else {
                this.stopUploadHandler(file);
            }
        });
    }
    trackByFn(index, file) {
        return file.uid;
    }
    // Envia os arquivos passados por parâmetro, exceto os que já foram enviados ao serviço.
    uploadFiles(files) {
        const filesFiltered = files.filter(file => file.status !== PoUploadStatus.Uploaded);
        this.uploadService.upload(this.url, filesFiltered, this.headers, this.onUpload, (file, percent) => {
            // UPLOADING
            this.uploadingHandler(file, percent);
        }, (file, eventResponse) => {
            // SUCCESS
            this.responseHandler(file, PoUploadStatus.Uploaded);
            this.onSuccess.emit(eventResponse);
        }, (file, eventError) => {
            // Error
            this.responseHandler(file, PoUploadStatus.Error);
            this.onError.emit(eventError);
        });
    }
    cleanInputValue() {
        this.calledByCleanInputValue = true;
        this.inputFile.nativeElement.value = '';
    }
    // função disparada na resposta do sucesso ou error
    responseHandler(file, status) {
        file.status = status;
        file.percent = 100;
    }
    // método responsável por setar os argumentos do i18nPipe de acordo com a restrição.
    setPipeArguments(literalAttributes, literalArguments) {
        const pipeArguments = this.i18nPipe.transform(this.literals[literalAttributes], literalArguments);
        this.notification.information(pipeArguments);
    }
    // Função disparada ao parar um envio de arquivo.
    stopUploadHandler(file) {
        file.status = PoUploadStatus.None;
        file.percent = 0;
    }
    updateFiles(files) {
        this.currentFiles = this.parseFiles(files);
        this.updateModel([...this.currentFiles]);
        if (this.autoUpload) {
            this.uploadFiles(this.currentFiles);
        }
    }
    // Atualiza o ngModel para os arquivos passados por parâmetro.
    updateModel(files) {
        const modelFiles = this.mapCleanUploadFiles(files);
        this.onModelChange ? this.onModelChange(modelFiles) : this.ngModelChange.emit(modelFiles);
    }
    // Função disparada enquanto o arquivo está sendo enviado ao serviço.
    uploadingHandler(file, percent) {
        file.status = PoUploadStatus.Uploading;
        file.percent = percent;
    }
    // retorna os objetos do array sem as propriedades: percent e displayName
    mapCleanUploadFiles(files) {
        const mapedByUploadFile = progressFile => {
            const { percent, displayName } = progressFile, uploadFile = __rest(progressFile, ["percent", "displayName"]);
            return uploadFile;
        };
        return files.map(mapedByUploadFile);
    }
}
PoUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-upload',
                template: "<po-field-container [p-label]=\"label\" [p-help]=\"help\" [p-optional]=\"!required && optional\">\n  <div class=\"po-upload\">\n    <input\n      #inputFile\n      class=\"po-upload-input\"\n      type=\"file\"\n      [accept]=\"allowedExtensions\"\n      [attr.name]=\"name\"\n      [disabled]=\"isDisabled\"\n      [multiple]=\"isMultiple\"\n      [required]=\"required\"\n      (change)=\"onFileChange($event)\"\n    />\n\n    <po-upload-drag-drop\n      *ngIf=\"displayDragDrop\"\n      [p-directory-compatible]=\"canHandleDirectory\"\n      [p-disabled]=\"isDisabled\"\n      [p-drag-drop-height]=\"dragDropHeight\"\n      [p-literals]=\"literals\"\n      (p-file-change)=\"onFileChangeDragDrop($event)\"\n      (p-select-files)=\"selectFiles()\"\n    >\n    </po-upload-drag-drop>\n\n    <po-button\n      *ngIf=\"!hideSelectButton && !displayDragDrop\"\n      #uploadButton\n      class=\"po-upload-button\"\n      for=\"file\"\n      [p-disabled]=\"isDisabled\"\n      [p-label]=\"selectFileButtonLabel\"\n      (p-click)=\"selectFiles()\"\n    >\n    </po-button>\n\n    <po-upload-file-restrictions\n      *ngIf=\"fileRestrictions && !hideRestrictionsInfo\"\n      class=\"po-upload-file-restrictions\"\n      [ngClass]=\"{ 'po-upload-file-restrictions-drag-drop': displayDragDrop }\"\n      [p-allowed-extensions]=\"fileRestrictions?.allowedExtensions\"\n      [p-max-files]=\"maxFiles\"\n      [p-max-file-size]=\"fileRestrictions?.maxFileSize\"\n      [p-min-file-size]=\"fileRestrictions?.minFileSize\"\n    >\n    </po-upload-file-restrictions>\n\n    <div *ngIf=\"currentFiles && currentFiles.length\" class=\"po-upload-progress-container\">\n      <po-container\n        p-no-shadow\n        [p-height]=\"hasMoreThanFourItems ? 280 : 'auto'\"\n        [p-no-border]=\"!hasMoreThanFourItems\"\n        [p-no-padding]=\"!hasMoreThanFourItems\"\n      >\n        <div [ngClass]=\"{ 'po-upload-progress-container-area po-pt-2 po-pl-1': hasMoreThanFourItems }\">\n          <po-progress\n            *ngFor=\"let file of currentFiles; trackBy: trackByFn\"\n            [p-info]=\"infoByUploadStatus[file.status]?.text(file.percent)\"\n            [p-info-icon]=\"infoByUploadStatus[file.status]?.icon\"\n            [p-status]=\"progressStatusByFileStatus[file.status]\"\n            [p-text]=\"file.displayName\"\n            [p-value]=\"file.percent\"\n            (p-cancel)=\"cancel(file)\"\n            (p-retry)=\"uploadFiles([file])\"\n          >\n          </po-progress>\n        </div>\n      </po-container>\n    </div>\n\n    <po-button\n      *ngIf=\"displaySendButton\"\n      class=\"po-upload-send-button\"\n      [class.po-mt-3]=\"hasMoreThanFourItems\"\n      p-type=\"primary\"\n      [p-disabled]=\"hasAnyFileUploading(currentFiles)\"\n      [p-label]=\"literals.startSending\"\n      (p-click)=\"uploadFiles(currentFiles)\"\n    >\n    </po-button>\n  </div>\n</po-field-container>\n",
                providers: [
                    PoI18nPipe,
                    PoUploadService,
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoUploadComponent),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => PoUploadComponent),
                        multi: true
                    }
                ]
            },] }
];
PoUploadComponent.ctorParameters = () => [
    { type: PoUploadService },
    { type: Renderer2 },
    { type: PoI18nPipe },
    { type: PoNotificationService },
    { type: PoLanguageService }
];
PoUploadComponent.propDecorators = {
    inputFile: [{ type: ViewChild, args: ['inputFile', { read: ElementRef, static: true },] }],
    poUploadDragDropComponent: [{ type: ViewChild, args: [PoUploadDragDropComponent,] }],
    uploadButton: [{ type: ViewChild, args: ['uploadButton',] }]
};
//# sourceMappingURL=data:application/json;base64,