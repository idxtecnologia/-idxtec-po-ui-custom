import { __decorate } from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';
import { from, timer } from 'rxjs';
import { concatMap, mapTo, scan, tap } from 'rxjs/operators';
import { isIE } from '../../../../../utils/util';
import { InputBoolean } from '../../../../../decorators';
const RADIUS_DEFAULT_SIZE = 5;
const RADIUS_HOVER_SIZE = 10;
const ANIMATION_DURATION_TIME = 700;
export class PoChartSeriesPointComponent {
    constructor(renderer, elementRef) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.chartLine = false;
        this.pointClick = new EventEmitter();
        this.pointHover = new EventEmitter();
        this.radius = RADIUS_DEFAULT_SIZE;
        this._coordinates = [];
        this.animationState = true;
    }
    set color(value) {
        this.strokeColor = value.includes('po-color') ? value.replace('po-color', 'po-border-color') : value;
        this._color = value;
    }
    get color() {
        return this._color;
    }
    set coordinates(value) {
        this._coordinates = value;
        this.coordinates$ = this.displayPointsWithDelay(this._coordinates);
    }
    get coordinates() {
        return this._coordinates;
    }
    trackBy(index) {
        return index;
    }
    onClick(point) {
        const selectedItem = { label: point.label, data: point.data, category: point.category };
        this.pointClick.emit(selectedItem);
    }
    onMouseEnter(event, point) {
        this.setPointAttribute(event.target, true);
        const selectedItem = { label: point.label, data: point.data, category: point.category };
        this.pointHover.emit(Object.assign({ relativeTo: this.relativeTo }, selectedItem));
    }
    onMouseLeave(event) {
        this.setPointAttribute(event.target, false);
    }
    displayPointsWithDelay(coordinates) {
        if (this.animationState && !isIE()) {
            const animationTimer = ANIMATION_DURATION_TIME / coordinates.length;
            return from(coordinates).pipe(concatMap((item, index) => timer(index === 0 || !this.animate ? 0 : animationTimer).pipe(mapTo(item))), scan((acc, curr) => acc.concat(curr), []), tap(() => (this.animationState = false)));
        }
        else {
            return from([coordinates]);
        }
    }
    setPointAttribute(target, isHover) {
        this.renderer.setAttribute(target, 'r', isHover ? RADIUS_HOVER_SIZE.toString() : RADIUS_DEFAULT_SIZE.toString());
        if (this.color.includes('po-color')) {
            this.renderer.setAttribute(target, 'class', isHover ? `${this.strokeColor} ${this.color}` : `po-chart-line-point po-chart-active-point ${this.strokeColor}`);
        }
        else {
            this.renderer[isHover ? 'setStyle' : 'removeStyle'](target, 'fill', isHover ? this.color : undefined);
        }
    }
}
PoChartSeriesPointComponent.decorators = [
    { type: Component, args: [{
                selector: '[po-chart-series-point]',
                template: "<svg:circle *ngFor=\"let item of coordinates$ | async; trackBy: trackBy\" \n  [p-tooltip]=\"item.tooltipLabel\"\n  [p-append-in-body]='true'\n  [p-display-tooltip]=\"!chartLine && item.isActive\"\n  p-tooltip-position=\"top\"\n  class=\"po-chart-line-point\"\n  [class]=\"strokeColor?.includes('po-border-color') ? strokeColor : ''\"\n  [class.po-chart-active-point]=\"item.isActive\"\n  [attr.cx]=\"item.xCoordinate\"\n  [attr.cy]=\"item.yCoordinate\"\n  [attr.r]=\"radius\"\n  [attr.stroke]=\"strokeColor\"\n  (click)=\"onClick(item)\"\n  (mouseenter)=\"onMouseEnter($event, item)\"\n  (mouseleave)=\"onMouseLeave($event)\"\n  >\n</svg:circle>\n"
            },] }
];
PoChartSeriesPointComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef }
];
PoChartSeriesPointComponent.propDecorators = {
    animate: [{ type: Input, args: ['p-animate',] }],
    isActive: [{ type: Input, args: ['p-is-active',] }],
    chartLine: [{ type: Input, args: ['p-chart-line',] }],
    relativeTo: [{ type: Input, args: ['p-relative-to',] }],
    pointClick: [{ type: Output, args: ['p-point-click',] }],
    pointHover: [{ type: Output, args: ['p-point-hover',] }],
    color: [{ type: Input, args: ['p-color',] }],
    coordinates: [{ type: Input, args: ['p-coordinates',] }]
};
__decorate([
    InputBoolean()
], PoChartSeriesPointComponent.prototype, "isActive", void 0);
__decorate([
    InputBoolean()
], PoChartSeriesPointComponent.prototype, "chartLine", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tY2hhcnQtc2VyaWVzLXBvaW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1jaGFydC9wby1jaGFydC1jb250YWluZXIvcG8tY2hhcnQtbGluZS9wby1jaGFydC1zZXJpZXMtcG9pbnQvcG8tY2hhcnQtc2VyaWVzLXBvaW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxJQUFJLEVBQWMsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3RCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBSXpELE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBQzlCLE1BQU0saUJBQWlCLEdBQUcsRUFBRSxDQUFDO0FBQzdCLE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxDQUFDO0FBTXBDLE1BQU0sT0FBTywyQkFBMkI7SUEwQ3RDLFlBQW9CLFFBQW1CLEVBQVUsVUFBc0I7UUFBbkQsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFyQ2hDLGNBQVMsR0FBWSxLQUFLLENBQUM7UUFLekMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFFckMsZUFBVSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFHOUQsV0FBTSxHQUFXLG1CQUFtQixDQUFDO1FB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QUVqQjtJQUFmLFlBQVksRUFBRTs4REFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlLCB0aW1lciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29uY2F0TWFwLCBtYXBUbywgc2NhbiwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBpc0lFIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5pbXBvcnQgeyBJbnB1dEJvb2xlYW4gfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9kZWNvcmF0b3JzJztcblxuaW1wb3J0IHsgUG9DaGFydFBvaW50c0Nvb3JkaW5hdGVzIH0gZnJvbSAnLi4vLi4vLi4vaW50ZXJmYWNlcy9wby1jaGFydC1wb2ludHMtY29vcmRpbmF0ZXMuaW50ZXJmYWNlJztcblxuY29uc3QgUkFESVVTX0RFRkFVTFRfU0laRSA9IDU7XG5jb25zdCBSQURJVVNfSE9WRVJfU0laRSA9IDEwO1xuY29uc3QgQU5JTUFUSU9OX0RVUkFUSU9OX1RJTUUgPSA3MDA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1twby1jaGFydC1zZXJpZXMtcG9pbnRdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWNoYXJ0LXNlcmllcy1wb2ludC5jb21wb25lbnQuc3ZnJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0NoYXJ0U2VyaWVzUG9pbnRDb21wb25lbnQge1xuICBASW5wdXQoJ3AtYW5pbWF0ZScpIGFuaW1hdGU6IGJvb2xlYW47XG5cbiAgQElucHV0KCdwLWlzLWFjdGl2ZScpIEBJbnB1dEJvb2xlYW4oKSBpc0FjdGl2ZTogYm9vbGVhbjtcblxuICBASW5wdXQoJ3AtY2hhcnQtbGluZScpIEBJbnB1dEJvb2xlYW4oKSBjaGFydExpbmU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvLyBSZWZlcsOqbmNpYSBwYXJhIG8gc3ZnUGF0aEdyb3VwIGFvIHF1YWwgcGVydGVuY2UgbyBwb250by4gTmVjZXNzw6FyaW8gcGFyYSByZW9yZGVuYcOnw6NvIGRvcyBzdmdFbGVtZW50cyBubyBET00gcGFyYSB0cmF0YW1lbnRvIG9uSG92ZXJcbiAgQElucHV0KCdwLXJlbGF0aXZlLXRvJykgcmVsYXRpdmVUbzogc3RyaW5nO1xuXG4gIEBPdXRwdXQoJ3AtcG9pbnQtY2xpY2snKSBwb2ludENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQE91dHB1dCgncC1wb2ludC1ob3ZlcicpIHBvaW50SG92ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBjb29yZGluYXRlcyQ6IE9ic2VydmFibGU8QXJyYXk8UG9DaGFydFBvaW50c0Nvb3JkaW5hdGVzPj47XG4gIHJhZGl1czogbnVtYmVyID0gUkFESVVTX0RFRkFVTFRfU0laRTtcbiAgc3Ryb2tlQ29sb3I6IHN0cmluZztcblxuICBwcml2YXRlIF9jb2xvcjogc3RyaW5nO1xuICBwcml2YXRlIF9jb29yZGluYXRlczogQXJyYXk8UG9DaGFydFBvaW50c0Nvb3JkaW5hdGVzPiA9IFtdO1xuXG4gIHByaXZhdGUgYW5pbWF0aW9uU3RhdGU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIEBJbnB1dCgncC1jb2xvcicpIHNldCBjb2xvcih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zdHJva2VDb2xvciA9IHZhbHVlLmluY2x1ZGVzKCdwby1jb2xvcicpID8gdmFsdWUucmVwbGFjZSgncG8tY29sb3InLCAncG8tYm9yZGVyLWNvbG9yJykgOiB2YWx1ZTtcbiAgICB0aGlzLl9jb2xvciA9IHZhbHVlO1xuICB9XG5cbiAgZ2V0IGNvbG9yKCkge1xuICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgfVxuXG4gIEBJbnB1dCgncC1jb29yZGluYXRlcycpIHNldCBjb29yZGluYXRlcyh2YWx1ZTogQXJyYXk8UG9DaGFydFBvaW50c0Nvb3JkaW5hdGVzPikge1xuICAgIHRoaXMuX2Nvb3JkaW5hdGVzID0gdmFsdWU7XG5cbiAgICB0aGlzLmNvb3JkaW5hdGVzJCA9IHRoaXMuZGlzcGxheVBvaW50c1dpdGhEZWxheSh0aGlzLl9jb29yZGluYXRlcyk7XG4gIH1cblxuICBnZXQgY29vcmRpbmF0ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Nvb3JkaW5hdGVzO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLCBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHt9XG5cbiAgdHJhY2tCeShpbmRleCkge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIG9uQ2xpY2socG9pbnQ6IFBvQ2hhcnRQb2ludHNDb29yZGluYXRlcykge1xuICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IHsgbGFiZWw6IHBvaW50LmxhYmVsLCBkYXRhOiBwb2ludC5kYXRhLCBjYXRlZ29yeTogcG9pbnQuY2F0ZWdvcnkgfTtcblxuICAgIHRoaXMucG9pbnRDbGljay5lbWl0KHNlbGVjdGVkSXRlbSk7XG4gIH1cblxuICBvbk1vdXNlRW50ZXIoZXZlbnQ6IGFueSwgcG9pbnQ6IFBvQ2hhcnRQb2ludHNDb29yZGluYXRlcykge1xuICAgIHRoaXMuc2V0UG9pbnRBdHRyaWJ1dGUoZXZlbnQudGFyZ2V0LCB0cnVlKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IHsgbGFiZWw6IHBvaW50LmxhYmVsLCBkYXRhOiBwb2ludC5kYXRhLCBjYXRlZ29yeTogcG9pbnQuY2F0ZWdvcnkgfTtcbiAgICB0aGlzLnBvaW50SG92ZXIuZW1pdCh7IHJlbGF0aXZlVG86IHRoaXMucmVsYXRpdmVUbywgLi4uc2VsZWN0ZWRJdGVtIH0pO1xuICB9XG5cbiAgb25Nb3VzZUxlYXZlKGV2ZW50OiBhbnkpIHtcbiAgICB0aGlzLnNldFBvaW50QXR0cmlidXRlKGV2ZW50LnRhcmdldCwgZmFsc2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwbGF5UG9pbnRzV2l0aERlbGF5KFxuICAgIGNvb3JkaW5hdGVzOiBBcnJheTxQb0NoYXJ0UG9pbnRzQ29vcmRpbmF0ZXM+XG4gICk6IE9ic2VydmFibGU8QXJyYXk8UG9DaGFydFBvaW50c0Nvb3JkaW5hdGVzPj4ge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvblN0YXRlICYmICFpc0lFKCkpIHtcbiAgICAgIGNvbnN0IGFuaW1hdGlvblRpbWVyID0gQU5JTUFUSU9OX0RVUkFUSU9OX1RJTUUgLyBjb29yZGluYXRlcy5sZW5ndGg7XG5cbiAgICAgIHJldHVybiBmcm9tKGNvb3JkaW5hdGVzKS5waXBlKFxuICAgICAgICBjb25jYXRNYXAoKGl0ZW0sIGluZGV4KSA9PiB0aW1lcihpbmRleCA9PT0gMCB8fCAhdGhpcy5hbmltYXRlID8gMCA6IGFuaW1hdGlvblRpbWVyKS5waXBlKG1hcFRvKGl0ZW0pKSksXG4gICAgICAgIHNjYW4oKGFjYywgY3VycjogUG9DaGFydFBvaW50c0Nvb3JkaW5hdGVzKSA9PiBhY2MuY29uY2F0KGN1cnIpLCBbXSksXG4gICAgICAgIHRhcCgoKSA9PiAodGhpcy5hbmltYXRpb25TdGF0ZSA9IGZhbHNlKSlcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmcm9tKFtjb29yZGluYXRlc10pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0UG9pbnRBdHRyaWJ1dGUodGFyZ2V0OiBTVkdFbGVtZW50LCBpc0hvdmVyOiBib29sZWFuKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGFyZ2V0LCAncicsIGlzSG92ZXIgPyBSQURJVVNfSE9WRVJfU0laRS50b1N0cmluZygpIDogUkFESVVTX0RFRkFVTFRfU0laRS50b1N0cmluZygpKTtcbiAgICBpZiAodGhpcy5jb2xvci5pbmNsdWRlcygncG8tY29sb3InKSkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUoXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgJ2NsYXNzJyxcbiAgICAgICAgaXNIb3ZlciA/IGAke3RoaXMuc3Ryb2tlQ29sb3J9ICR7dGhpcy5jb2xvcn1gIDogYHBvLWNoYXJ0LWxpbmUtcG9pbnQgcG8tY2hhcnQtYWN0aXZlLXBvaW50ICR7dGhpcy5zdHJva2VDb2xvcn1gXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyW2lzSG92ZXIgPyAnc2V0U3R5bGUnIDogJ3JlbW92ZVN0eWxlJ10odGFyZ2V0LCAnZmlsbCcsIGlzSG92ZXIgPyB0aGlzLmNvbG9yIDogdW5kZWZpbmVkKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==