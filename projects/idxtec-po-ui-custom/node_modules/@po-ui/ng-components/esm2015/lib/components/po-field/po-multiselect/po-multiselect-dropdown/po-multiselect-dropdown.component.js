import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que construíra o dropdown, contendo o campo de pesquisa e os itens para seleção.
 */
export class PoMultiselectDropdownComponent {
    constructor() {
        /** Propriedade que indica se deve exibir o loading. */
        this.isServerSearching = false;
        /** Propriedade que indica se o campo de pesquisa deverá ser escondido. */
        this.hideSearch = false;
        /** Propriedade que recebe a lista de opções selecionadas. */
        this.selectedOptions = [];
        /** Propriedade que recebe a lista com todas as opções. */
        this.options = [];
        /** Propriedade que recebe a lista de opções que deverão ser criadas no dropdown. */
        this.visibleOptions = [];
        /** Propriedade que indica se o campo "Selecionar todos" deverá ser escondido. */
        this.hideSelectAll = false;
        /** Evento disparado a cada tecla digitada na pesquisa. */
        this.changeSearch = new EventEmitter();
        /** Evento disparado a cada alteração na lista das opções selecionadas. */
        this.change = new EventEmitter();
        /**
         * Evento disparado quando for detectada uma ação que necessite fechar o dropdown.
         * Por exemplo, no caso de ser teclado TAB dentro do dropdown, então é disparado este evento
         * para notificar o componente principal que deve fechar o dropdown.
         */
        this.closeDropdown = new EventEmitter();
        this.scrollTop = 0;
        this.show = false;
    }
    get hasOptions() {
        var _a;
        return !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.length);
    }
    onKeydown(event) {
        if (event.keyCode === 9) {
            this.closeDropdown.emit();
        }
    }
    scrollTo(index) {
        this.scrollTop = index <= 2 ? 0 : index * 44 - 88;
    }
    isSelectedItem(option) {
        return this.selectedOptions.some(selectedItem => selectedItem.value === option.value);
    }
    clickItem(check, option) {
        this.updateSelectedValues(check, option);
        if (!this.hideSearch) {
            this.searchElement.setFocus();
        }
    }
    onClickSelectAll() {
        const selectedValues = this.selectedOptions.map(({ value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            this.selectedOptions = [];
        }
        else {
            this.selectedOptions = this.uniqueSelectedOptions(selectedValues);
        }
        this.change.emit(this.selectedOptions);
    }
    updateSelectedValues(checked, option) {
        if (checked) {
            this.selectedOptions.push(option);
        }
        else {
            this.selectedOptions = this.selectedOptions.filter(selectedOption => selectedOption.value !== option.value);
        }
        this.change.emit(this.selectedOptions);
    }
    everyVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.every(visibleOption => selectedValues.includes(visibleOption.value));
    }
    someVisibleOptionsSelected(selectedValues) {
        return this.visibleOptions.some(visibleOption => selectedValues.includes(visibleOption.value));
    }
    getStateSelectAll() {
        const selectedValues = this.selectedOptions.map(({ value }) => value);
        if (this.everyVisibleOptionsSelected(selectedValues)) {
            return true;
        }
        else if (this.someVisibleOptionsSelected(selectedValues)) {
            return null;
        }
        else {
            return false;
        }
    }
    callChangeSearch(event) {
        this.changeSearch.emit(event);
    }
    controlVisibility(toOpen) {
        this.show = toOpen;
        setTimeout(() => {
            if (toOpen && this.searchElement && !this.hideSearch) {
                this.searchElement.setFocus();
                this.searchElement.clean();
            }
        });
    }
    uniqueSelectedOptions(selectedValues) {
        const newSelectedOptions = [...this.selectedOptions];
        for (const visibleOption of this.visibleOptions) {
            if (!selectedValues.includes(visibleOption.value)) {
                newSelectedOptions.push(visibleOption);
            }
        }
        return newSelectedOptions;
    }
}
PoMultiselectDropdownComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-multiselect-dropdown',
                template: "<div #container class=\"po-multiselect-container\" [hidden]=\"!show\">\n  <po-multiselect-search\n    #searchElement\n    *ngIf=\"!hideSearch\"\n    [p-literals]=\"literals\"\n    [p-placeholder]=\"placeholderSearch\"\n    (p-change)=\"callChangeSearch($event)\"\n  >\n  </po-multiselect-search>\n\n  <ul class=\"po-multiselect-items-container\" [scrollTop]=\"scrollTop\" #ulElement>\n    <div *ngIf=\"!visibleOptions.length && !isServerSearching\" class=\"po-multiselect-container-no-data po-text-center\">\n      <span> {{ literals.noData }}</span>\n    </div>\n\n    <div *ngIf=\"isServerSearching\" class=\"po-multiselect-container-loading po-text-center\">\n      <po-loading></po-loading>\n    </div>\n\n    <ng-container *ngIf=\"!isServerSearching\">\n      <po-multiselect-item\n        *ngIf=\"!searchElement?.inputValue && visibleOptions.length && !hideSelectAll\"\n        [p-label]=\"literals?.selectAll\"\n        [p-selected]=\"getStateSelectAll()\"\n        (p-change)=\"onClickSelectAll()\"\n      >\n      </po-multiselect-item>\n\n      <po-multiselect-item\n        *ngFor=\"let option of visibleOptions\"\n        [p-label]=\"option.label\"\n        [p-selected]=\"isSelectedItem(option)\"\n        (p-change)=\"clickItem($event, option)\"\n      >\n      </po-multiselect-item>\n    </ng-container>\n  </ul>\n</div>\n"
            },] }
];
PoMultiselectDropdownComponent.propDecorators = {
    isServerSearching: [{ type: Input, args: ['p-searching',] }],
    hideSearch: [{ type: Input, args: ['p-hide-search',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    placeholderSearch: [{ type: Input, args: ['p-placeholder-search',] }],
    selectedOptions: [{ type: Input, args: ['p-selected-options',] }],
    options: [{ type: Input, args: ['p-options',] }],
    visibleOptions: [{ type: Input, args: ['p-visible-options',] }],
    hideSelectAll: [{ type: Input, args: ['p-hide-select-all',] }],
    changeSearch: [{ type: Output, args: ['p-change-search',] }],
    change: [{ type: Output, args: ['p-change',] }],
    closeDropdown: [{ type: Output, args: ['p-close-dropdown',] }],
    container: [{ type: ViewChild, args: ['container', { read: ElementRef, static: true },] }],
    ulElement: [{ type: ViewChild, args: ['ulElement', { read: ElementRef, static: true },] }],
    searchElement: [{ type: ViewChild, args: ['searchElement',] }],
    onKeydown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
//# sourceMappingURL=data:application/json;base64,