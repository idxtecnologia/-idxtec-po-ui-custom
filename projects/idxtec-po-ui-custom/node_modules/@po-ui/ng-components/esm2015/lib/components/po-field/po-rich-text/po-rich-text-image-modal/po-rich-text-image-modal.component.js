import { __awaiter } from "tslib";
import { Component, EventEmitter, Output, ViewChild } from '@angular/core';
import { convertImageToBase64 } from '../../../../utils/util';
import { PoLanguageService } from './../../../../services/po-language/po-language.service';
import { poRichTextLiteralsDefault } from '../po-rich-text-literals';
const uploadRestrictions = ['.apng', '.bmp', '.gif', '.ico', '.jpeg', '.jpg', '.png', '.svg'];
export class PoRichTextImageModalComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.command = new EventEmitter();
        this.selection = document.getSelection();
        this.uploadRestrictions = {
            allowedExtensions: uploadRestrictions
        };
        this.literals = Object.assign({}, poRichTextLiteralsDefault[this.languageService.getShortLanguage()]);
        this.modalCancelAction = {
            label: this.literals.cancel,
            action: () => {
                this.modal.close();
                this.command.emit();
                this.retrieveCursorPosition();
                this.cleanUpFields();
            }
        };
        this.modalConfirmAction = {
            label: this.literals.insert,
            disabled: false,
            action: () => this.insertElementRef()
        };
    }
    get isUploadValid() {
        return !!(this.uploadModel && this.uploadModel.length);
    }
    get isUrlValid() {
        return !!this.urlImage && this.modalImageForm && this.modalImageForm.valid;
    }
    openModal() {
        this.saveCursorPosition();
        this.modal.open();
    }
    cleanUpFields() {
        this.urlImage = undefined;
        this.uploadModel = undefined;
    }
    convertToBase64() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isUploadValid) {
                const uploadImage = this.uploadModel[0].rawFile;
                return yield convertImageToBase64(uploadImage);
            }
        });
    }
    emitCommand(value) {
        let command;
        if (value) {
            command = 'insertImage';
            this.command.emit({ command, value });
        }
    }
    insertElementRef() {
        return __awaiter(this, void 0, void 0, function* () {
            let uploadImage;
            if (!this.urlImage) {
                uploadImage = yield this.convertToBase64();
            }
            this.retrieveCursorPosition();
            this.modal.close();
            if (this.isUrlValid || this.isUploadValid) {
                this.emitCommand(this.urlImage || uploadImage);
            }
            this.cleanUpFields();
        });
    }
    retrieveCursorPosition() {
        this.selection.collapse(this.savedCursorPosition[0], this.savedCursorPosition[1]);
    }
    saveCursorPosition() {
        this.savedCursorPosition = [this.selection.focusNode, this.selection.focusOffset];
    }
}
PoRichTextImageModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-rich-text-image-modal',
                template: "<po-modal\n  #modal\n  p-hide-close\n  [p-primary-action]=\"modalConfirmAction\"\n  [p-secondary-action]=\"modalCancelAction\"\n  [p-title]=\"literals.insertImage\"\n>\n  <form #modalImageForm=\"ngForm\">\n    <div class=\"po-row\">\n      <!-- po-upload desabilita o drag drop caso n\u00E3o tenha valor atribuido para a propriedade p-url -->\n      <po-upload\n        #upload\n        class=\"po-md-12\"\n        name=\"upload\"\n        [(ngModel)]=\"uploadModel\"\n        p-drag-drop-height=\"160\"\n        p-hide-restrictions-info\n        p-hide-send-button\n        p-url=\"x\"\n        [p-drag-drop]=\"!modal.isHidden\"\n        [p-disabled]=\"isUrlValid\"\n        [p-restrictions]=\"uploadRestrictions\"\n      >\n      </po-upload>\n    </div>\n\n    <div class=\"po-row\">\n      <po-url\n        class=\"po-md-12 po-mt-3\"\n        name=\"url\"\n        [(ngModel)]=\"urlImage\"\n        [p-label]=\"literals.urlImage\"\n        [p-disabled]=\"isUploadValid\"\n      >\n      </po-url>\n    </div>\n  </form>\n</po-modal>\n"
            },] }
];
PoRichTextImageModalComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoRichTextImageModalComponent.propDecorators = {
    modal: [{ type: ViewChild, args: ['modal', { static: true },] }],
    modalImageForm: [{ type: ViewChild, args: ['modalImageForm',] }],
    upload: [{ type: ViewChild, args: ['upload', { static: true },] }],
    command: [{ type: Output, args: ['p-command',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcmljaC10ZXh0LWltYWdlLW1vZGFsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1maWVsZC9wby1yaWNoLXRleHQvcG8tcmljaC10ZXh0LWltYWdlLW1vZGFsL3BvLXJpY2gtdGV4dC1pbWFnZS1tb2RhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHbkYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFHM0YsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFJckUsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztBQU05RixNQUFNLE9BQU8sNkJBQTZCO0lBNkN4QyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUF0Q2pDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBcUQsQ0FBQztRQUdyRyxjQUFTLEdBQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBRXBDLHVCQUFrQixHQUE2QjtZQUM3QyxpQkFBaUIsRUFBRSxrQkFBa0I7U0FDdEMsQ0FBQztRQUdPLGFBQVEscUJBQ1oseUJBQXlCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQ3JFO1FBRUYsc0JBQWlCLEdBQWtCO1lBQ2pDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFD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QVpRLGlCQUFpQjs7O29CQWN2QixTQUFTLFNBQUMsT0FBTyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs2QkFFbkMsU0FBUyxTQUFDLGdCQUFnQjtxQkFFMUIsU0FBUyxTQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7c0JBRXBDLE1BQU0sU0FBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgTmdGb3JtIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBjb252ZXJ0SW1hZ2VUb0Jhc2U2NCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLy4uLy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBQb01vZGFsQWN0aW9uLCBQb01vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vcG8tbW9kYWwnO1xuaW1wb3J0IHsgcG9SaWNoVGV4dExpdGVyYWxzRGVmYXVsdCB9IGZyb20gJy4uL3BvLXJpY2gtdGV4dC1saXRlcmFscyc7XG5pbXBvcnQgeyBQb1VwbG9hZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL3BvLXVwbG9hZC9wby11cGxvYWQuY29tcG9uZW50JztcbmltcG9ydCB7IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucyB9IGZyb20gJy4uLy4uL3BvLXVwbG9hZC9pbnRlcmZhY2VzL3BvLXVwbG9hZC1maWxlLXJlc3RyaWN0aW9uLmludGVyZmFjZSc7XG5cbmNvbnN0IHVwbG9hZFJlc3RyaWN0aW9ucyA9IFsnLmFwbmcnLCAnLmJtcCcsICcuZ2lmJywgJy5pY28nLCAnLmpwZWcnLCAnLmpwZycsICcucG5nJywgJy5zdmcnXTtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tcmljaC10ZXh0LWltYWdlLW1vZGFsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXJpY2gtdGV4dC1pbWFnZS1tb2RhbC5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgUG9SaWNoVGV4dEltYWdlTW9kYWxDb21wb25lbnQge1xuICBAVmlld0NoaWxkKCdtb2RhbCcsIHsgc3RhdGljOiB0cnVlIH0pIG1vZGFsOiBQb01vZGFsQ29tcG9uZW50O1xuXG4gIEBWaWV3Q2hpbGQoJ21vZGFsSW1hZ2VGb3JtJykgbW9kYWxJbWFnZUZvcm06IE5nRm9ybTtcblxuICBAVmlld0NoaWxkKCd1cGxvYWQnLCB7IHN0YXRpYzogdHJ1ZSB9KSB1cGxvYWQ6IFBvVXBsb2FkQ29tcG9uZW50O1xuXG4gIEBPdXRwdXQoJ3AtY29tbWFuZCcpIGNvbW1hbmQgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZyB8IHsgY29tbWFuZDogc3RyaW5nOyB2YWx1ZTogc3RyaW5nIHwgYW55IH0+KCk7XG5cbiAgc2F2ZWRDdXJzb3JQb3NpdGlvbjtcbiAgc2VsZWN0aW9uID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XG4gIHVwbG9hZE1vZGVsOiBBcnJheTxhbnk+O1xuICB1cGxvYWRSZXN0cmljdGlvbnM6IFBvVXBsb2FkRmlsZVJlc3RyaWN0aW9ucyA9IHtcbiAgICBhbGxvd2VkRXh0ZW5zaW9uczogdXBsb2FkUmVzdHJpY3Rpb25zXG4gIH07XG4gIHVybEltYWdlOiBzdHJpbmc7XG5cbiAgcmVhZG9ubHkgbGl0ZXJhbHMgPSB7XG4gICAgLi4ucG9SaWNoVGV4dExpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCldXG4gIH07XG5cbiAgbW9kYWxDYW5jZWxBY3Rpb246IFBvTW9kYWxBY3Rpb24gPSB7XG4gICAgbGFiZWw6IHRoaXMubGl0ZXJhbHMuY2FuY2VsLFxuICAgIGFjdGlvbjogKCkgPT4ge1xuICAgICAgdGhpcy5tb2RhbC5jbG9zZSgpO1xuICAgICAgdGhpcy5jb21tYW5kLmVtaXQoKTtcbiAgICAgIHRoaXMucmV0cmlldmVDdXJzb3JQb3NpdGlvbigpO1xuICAgICAgdGhpcy5jbGVhblVwRmllbGRzKCk7XG4gICAgfVxuICB9O1xuXG4gIG1vZGFsQ29uZmlybUFjdGlvbjogUG9Nb2RhbEFjdGlvbiA9IHtcbiAgICBsYWJlbDogdGhpcy5saXRlcmFscy5pbnNlcnQsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGFjdGlvbjogKCkgPT4gdGhpcy5pbnNlcnRFbGVtZW50UmVmKClcbiAgfTtcblxuICBnZXQgaXNVcGxvYWRWYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISEodGhpcy51cGxvYWRNb2RlbCAmJiB0aGlzLnVwbG9hZE1vZGVsLmxlbmd0aCk7XG4gIH1cblxuICBnZXQgaXNVcmxWYWxpZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLnVybEltYWdlICYmIHRoaXMubW9kYWxJbWFnZUZvcm0gJiYgdGhpcy5tb2RhbEltYWdlRm9ybS52YWxpZDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge31cblxuICBvcGVuTW9kYWwoKSB7XG4gICAgdGhpcy5zYXZlQ3Vyc29yUG9zaXRpb24oKTtcbiAgICB0aGlzLm1vZGFsLm9wZW4oKTtcbiAgfVxuXG4gIHByaXZhdGUgY2xlYW5VcEZpZWxkcygpIHtcbiAgICB0aGlzLnVybEltYWdlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMudXBsb2FkTW9kZWwgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNvbnZlcnRUb0Jhc2U2NCgpIHtcbiAgICBpZiAodGhpcy5pc1VwbG9hZFZhbGlkKSB7XG4gICAgICBjb25zdCB1cGxvYWRJbWFnZSA9IHRoaXMudXBsb2FkTW9kZWxbMF0ucmF3RmlsZTtcbiAgICAgIHJldHVybiBhd2FpdCBjb252ZXJ0SW1hZ2VUb0Jhc2U2NCh1cGxvYWRJbWFnZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBlbWl0Q29tbWFuZCh2YWx1ZSkge1xuICAgIGxldCBjb21tYW5kOiBzdHJpbmc7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBjb21tYW5kID0gJ2luc2VydEltYWdlJztcbiAgICAgIHRoaXMuY29tbWFuZC5lbWl0KHsgY29tbWFuZCwgdmFsdWUgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBpbnNlcnRFbGVtZW50UmVmKCkge1xuICAgIGxldCB1cGxvYWRJbWFnZTogc3RyaW5nO1xuXG4gICAgaWYgKCF0aGlzLnVybEltYWdlKSB7XG4gICAgICB1cGxvYWRJbWFnZSA9IGF3YWl0IHRoaXMuY29udmVydFRvQmFzZTY0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZXRyaWV2ZUN1cnNvclBvc2l0aW9uKCk7XG4gICAgdGhpcy5tb2RhbC5jbG9zZSgpO1xuXG4gICAgaWYgKHRoaXMuaXNVcmxWYWxpZCB8fCB0aGlzLmlzVXBsb2FkVmFsaWQpIHtcbiAgICAgIHRoaXMuZW1pdENvbW1hbmQodGhpcy51cmxJbWFnZSB8fCB1cGxvYWRJbWFnZSk7XG4gICAgfVxuICAgIHRoaXMuY2xlYW5VcEZpZWxkcygpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXRyaWV2ZUN1cnNvclBvc2l0aW9uKCkge1xuICAgIHRoaXMuc2VsZWN0aW9uLmNvbGxhcHNlKHRoaXMuc2F2ZWRDdXJzb3JQb3NpdGlvblswXSwgdGhpcy5zYXZlZEN1cnNvclBvc2l0aW9uWzFdKTtcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZUN1cnNvclBvc2l0aW9uKCkge1xuICAgIHRoaXMuc2F2ZWRDdXJzb3JQb3NpdGlvbiA9IFt0aGlzLnNlbGVjdGlvbi5mb2N1c05vZGUsIHRoaXMuc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XTtcbiAgfVxufVxuIl19