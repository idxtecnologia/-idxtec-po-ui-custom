import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { convertToBoolean } from '../../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por manipular os botões de aba.
 */
export class PoTabButtonComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        // Função sera emitida quando a tab ficar ativada
        this.activated = new EventEmitter();
        // Função sera emitida quando a tab ficar desabilitada ou escondida
        this.changeState = new EventEmitter();
        // Método recebido do usuário para ser disparado quando clicar na aba
        this.click = new EventEmitter();
    }
    // Ativa o botão
    set active(value) {
        this._active = value;
        this.emitActivated();
    }
    get active() {
        return this._active;
    }
    // Oculta o botão
    set hide(value) {
        this._hide = convertToBoolean(value);
        this.setDisplayOnHide();
    }
    get hide() {
        return this._hide;
    }
    ngOnChanges(changes) {
        if ((changes.hide && changes.hide.currentValue) || (changes.disabled && changes.disabled.currentValue)) {
            this.changeState.emit(this);
        }
    }
    onClick() {
        if (!this.disabled) {
            this.click.emit(this.id);
        }
    }
    emitActivated() {
        if (this.active) {
            this.activated.emit(this);
        }
    }
    setDisplayOnHide() {
        this.elementRef.nativeElement.style.display = this.hide ? 'none' : '';
    }
}
PoTabButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-tab-button',
                template: "<div\n  class=\"po-tab-button-md\"\n  [attr.tabindex]=\"disabled ? null : 0\"\n  [class.po-tab-button-active]=\"active\"\n  [class.po-tab-button-disabled]=\"disabled\"\n  [class.po-tab-button-sm]=\"small\"\n  (click)=\"onClick()\"\n  (keyup.enter)=\"onClick()\"\n>\n  <span class=\"po-tab-button-label po-text-ellipsis\">\n    {{ label }}\n  </span>\n</div>\n"
            },] }
];
PoTabButtonComponent.ctorParameters = () => [
    { type: ElementRef }
];
PoTabButtonComponent.propDecorators = {
    disabled: [{ type: Input, args: ['p-disabled',] }],
    id: [{ type: Input, args: ['p-id',] }],
    label: [{ type: Input, args: ['p-label',] }],
    small: [{ type: Input, args: ['p-small',] }],
    activated: [{ type: Output, args: ['p-activated',] }],
    changeState: [{ type: Output, args: ['p-change-state',] }],
    click: [{ type: Output, args: ['p-click',] }],
    active: [{ type: Input, args: ['p-active',] }],
    hide: [{ type: Input, args: ['p-hide',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFiLWJ1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tdGFicy9wby10YWItYnV0dG9uL3BvLXRhYi1idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQWEsTUFBTSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUU3RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV2RDs7Ozs7O0dBTUc7QUFLSCxNQUFNLE9BQU8sb0JBQW9CO0lBK0MvQixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBbEMxQyxpREFBaUQ7UUFDMUIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFdEQsbUVBQW1FO1FBQ3pDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUzRCxxRUFBcUU7UUFDbEQsVUFBSyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUEyQkQsQ0FBQztJQXRCOUMsZ0JBQWdCO0lBQ2hCLElBQXVCLE1BQU0sQ0FBQyxLQUFjO1FBQzFDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBRXJCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxpQkFBaUI7SUFDakIsSUFBcUIsSUFBSSxDQUFDLEtBQWM7UUFDdEMsSUFBSSxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFJRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN0RyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUM7SUFFRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzFCO0lBQ0gsQ0FBQztJQUVPLGFBQWE7UUFDbkIsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDO0lBRU8sZ0JBQWdCO1FBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDeEUsQ0FBQzs7O1lBekVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZUFBZTtnQkFDekIsbVhBQTZDO2FBQzlDOzs7WUFkbUIsVUFBVTs7O3VCQWlCM0IsS0FBSyxTQUFDLFlBQVk7aUJBR2xCLEtBQUssU0FBQyxNQUFNO29CQUdaLEtBQUssU0FBQyxTQUFTO29CQUdmLEtBQUssU0FBQyxTQUFTO3dCQUdmLE1BQU0sU0FBQyxhQUFhOzBCQUdwQixNQUFNLFNBQUMsZ0JBQWdCO29CQUd2QixNQUFNLFNBQUMsU0FBUztxQkFNaEIsS0FBSyxTQUFDLFVBQVU7bUJBV2hCLEtBQUssU0FBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBjb252ZXJ0VG9Cb29sZWFuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSByZXNwb25zw6F2ZWwgcG9yIG1hbmlwdWxhciBvcyBib3TDtWVzIGRlIGFiYS5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdGFiLWJ1dHRvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10YWItYnV0dG9uLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RhYkJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gIC8vIERlc2FiaWxpdGEgbyBib3TDo29cbiAgQElucHV0KCdwLWRpc2FibGVkJykgZGlzYWJsZWQ6IGJvb2xlYW47XG5cbiAgLy8gSWRlbnRpZmljYWRvciBkbyBjb21wb25lbnRlXG4gIEBJbnB1dCgncC1pZCcpIGlkOiBzdHJpbmc7XG5cbiAgLy8gUsOzdHVsbyBkbyBib3TDo29cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICAvLyBEaW1pbnVpIG8gdGFtYW5obyBkbyBib3TDo29cbiAgQElucHV0KCdwLXNtYWxsJykgc21hbGw6IGJvb2xlYW47XG5cbiAgLy8gRnVuw6fDo28gc2VyYSBlbWl0aWRhIHF1YW5kbyBhIHRhYiBmaWNhciBhdGl2YWRhXG4gIEBPdXRwdXQoJ3AtYWN0aXZhdGVkJykgYWN0aXZhdGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vIEZ1bsOnw6NvIHNlcmEgZW1pdGlkYSBxdWFuZG8gYSB0YWIgZmljYXIgZGVzYWJpbGl0YWRhIG91IGVzY29uZGlkYVxuICBAT3V0cHV0KCdwLWNoYW5nZS1zdGF0ZScpIGNoYW5nZVN0YXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vIE3DqXRvZG8gcmVjZWJpZG8gZG8gdXN1w6FyaW8gcGFyYSBzZXIgZGlzcGFyYWRvIHF1YW5kbyBjbGljYXIgbmEgYWJhXG4gIEBPdXRwdXQoJ3AtY2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIF9hY3RpdmU6IGJvb2xlYW47XG4gIHByaXZhdGUgX2hpZGU6IGJvb2xlYW47XG5cbiAgLy8gQXRpdmEgbyBib3TDo29cbiAgQElucHV0KCdwLWFjdGl2ZScpIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hY3RpdmUgPSB2YWx1ZTtcblxuICAgIHRoaXMuZW1pdEFjdGl2YXRlZCgpO1xuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG5cbiAgLy8gT2N1bHRhIG8gYm90w6NvXG4gIEBJbnB1dCgncC1oaWRlJykgc2V0IGhpZGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9oaWRlID0gY29udmVydFRvQm9vbGVhbih2YWx1ZSk7XG5cbiAgICB0aGlzLnNldERpc3BsYXlPbkhpZGUoKTtcbiAgfVxuXG4gIGdldCBoaWRlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9oaWRlO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7fVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoKGNoYW5nZXMuaGlkZSAmJiBjaGFuZ2VzLmhpZGUuY3VycmVudFZhbHVlKSB8fCAoY2hhbmdlcy5kaXNhYmxlZCAmJiBjaGFuZ2VzLmRpc2FibGVkLmN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgIHRoaXMuY2hhbmdlU3RhdGUuZW1pdCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBvbkNsaWNrKCkge1xuICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5jbGljay5lbWl0KHRoaXMuaWQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZW1pdEFjdGl2YXRlZCgpIHtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIHRoaXMuYWN0aXZhdGVkLmVtaXQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXREaXNwbGF5T25IaWRlKCkge1xuICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSB0aGlzLmhpZGUgPyAnbm9uZScgOiAnJztcbiAgfVxufVxuIl19