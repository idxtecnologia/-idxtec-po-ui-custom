import { animate, animateChild, group, query, style, transition, trigger } from '@angular/animations';
import { Component, ElementRef, ViewChild } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { delay, take } from 'rxjs/operators';
import { getFocusableElements, uuid } from '../../../utils/util';
import { PoActiveOverlayService } from '../../../services/po-active-overlay/po-active-overlay.service';
import { PoPageSlideBaseComponent } from './po-page-slide-base.component';
/**
 * @docsExtends PoPageSlideBaseComponent
 *
 * @example
 *
 * <example name="po-page-slide-basic" title="PO Page Slide Basic">
 *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.html"> </file>
 *  <file name="sample-po-page-slide-basic/sample-po-page-slide-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-slide-labs" title="PO Page Slide Labs">
 *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.html"> </file>
 *  <file name="sample-po-page-slide-labs/sample-po-page-slide-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-slide-configuration" title="PO Page Slide - Configuration">
 *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.html"> </file>
 *  <file name="sample-po-page-slide-configuration/sample-po-page-slide-configuration.component.ts"> </file>
 * </example>
 */
export class PoPageSlideComponent extends PoPageSlideBaseComponent {
    constructor(poActiveOverlayService) {
        super();
        this.poActiveOverlayService = poActiveOverlayService;
        this.id = uuid();
        this.loadingCompleted = new ReplaySubject();
    }
    set pageContent(pageContent) {
        if (pageContent) {
            this._pageContent = pageContent;
            this.loadingCompleted.next();
        }
    }
    get pageContent() {
        return this._pageContent;
    }
    open() {
        this.sourceElement = document.activeElement;
        super.open();
        this.loadingCompleted.pipe(take(1)).pipe(delay(0)).subscribe(this.handleFocus.bind(this));
    }
    close() {
        this.poActiveOverlayService.activeOverlay.pop();
        super.close();
        this.removeEventListeners();
        this.sourceElement.focus();
    }
    onClickOut(event) {
        if (this.clickOut && !this.pageContent.nativeElement.contains(event.target)) {
            this.close();
        }
    }
    handleFocus() {
        this.poActiveOverlayService.activeOverlay.push(this.id);
        this.loadFirstElement();
        this.initFocus();
        document.addEventListener('focus', this.focusEvent, true);
    }
    initFocus() {
        // O foco não pode sair da página.
        this.focusEvent = (event) => {
            if (!this.pageContent.nativeElement.contains(event.target) &&
                this.poActiveOverlayService.activeOverlay[this.poActiveOverlayService.activeOverlay.length - 1] === this.id) {
                event.stopPropagation();
                this.firstElement.focus();
            }
        };
        if (this.hideClose) {
            this.firstElement.focus();
        }
        else {
            const elements = getFocusableElements(this.pageContent.nativeElement);
            const element = elements[1] || this.pageContent.nativeElement;
            element.focus();
        }
    }
    loadFirstElement() {
        this.firstElement = getFocusableElements(this.pageContent.nativeElement)[0] || this.pageContent.nativeElement;
    }
    removeEventListeners() {
        document.removeEventListener('focus', this.focusEvent, true);
        this.loadingCompleted.complete();
    }
}
PoPageSlideComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-slide',
                template: "<div class=\"po-page-slide\" tabindex=\"0\" *ngIf=\"!hidden\" [@fade]>\n  <div class=\"po-page-slide-overlay\" (mousedown)=\"onClickOut($event)\">\n    <div class=\"po-page-slide-container po-page-slide-right po-page-slide-{{ size }}\" [@slide]>\n      <div class=\"po-page-slide-content\" tabindex=\"-1\" #pageContent>\n        <div class=\"po-page-slide-header\">\n          <div class=\"po-page-slide-title\">\n            <span>{{ title }}</span>\n            <button *ngIf=\"!hideClose\" class=\"po-page-slide-close-button\" (click)=\"close()\" (key.enter)=\"close()\">\n              <span class=\"po-icon po-icon-close\"></span>\n            </button>\n          </div>\n          <div class=\"po-page-slide-subtitle\" *ngIf=\"subtitle\">{{ subtitle }}</div>\n        </div>\n        <div class=\"po-page-slide-body\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                providers: [],
                animations: [
                    trigger('fade', [
                        transition(':enter', [
                            style({ opacity: 0 }),
                            group([animate('150ms', style({ opacity: 1 })), query('@slide', animateChild())])
                        ]),
                        transition(':leave', group([query('@slide', animateChild()), animate('150ms', style({ opacity: 0 }))]))
                    ]),
                    trigger('slide', [
                        transition(':enter', [
                            style({ transform: 'translateX(50px)' }),
                            animate('691ms ease-in-out', style({ transform: 'none' }))
                        ]),
                        transition(':leave', [animate('150ms', style({ transform: 'translateX(50px)' }))])
                    ])
                ]
            },] }
];
PoPageSlideComponent.ctorParameters = () => [
    { type: PoActiveOverlayService }
];
PoPageSlideComponent.propDecorators = {
    pageContent: [{ type: ViewChild, args: ['pageContent', { read: ElementRef },] }]
};
//# sourceMappingURL=data:application/json;base64,