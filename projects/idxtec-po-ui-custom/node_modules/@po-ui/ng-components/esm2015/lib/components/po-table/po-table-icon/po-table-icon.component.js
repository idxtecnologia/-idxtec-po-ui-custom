import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente responsável por exibir um ícone na tabela.
 */
export class PoTableIconComponent {
    constructor() {
        /** Output click. */
        this.click = new EventEmitter();
    }
    get allowTooltip() {
        return !this.disabled && this.iconTooltip;
    }
    onClick(event) {
        if (this.clickable) {
            this.click.emit(event);
        }
    }
    tooltipMouseEnter() {
        if (this.allowTooltip) {
            this.tooltip = this.iconTooltip;
        }
    }
    tooltipMouseLeave() {
        this.tooltip = undefined;
    }
}
PoTableIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-table-icon',
                template: "<po-icon\n  class=\"po-table-icon-content {{ disabled ? '' : color }}\"\n  [ngClass]=\"{ 'po-clickable': clickable, 'po-table-icon-disabled': disabled }\"\n  [p-icon]=\"icon\"\n  [p-tooltip]=\"tooltip\"\n  (click)=\"onClick($event)\"\n  (mouseenter)=\"tooltipMouseEnter()\"\n  (mouseleave)=\"tooltipMouseLeave()\"\n></po-icon>\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            },] }
];
PoTableIconComponent.propDecorators = {
    clickable: [{ type: Input, args: ['p-clickable',] }],
    color: [{ type: Input, args: ['p-color',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    icon: [{ type: Input, args: ['p-icon',] }],
    iconTooltip: [{ type: Input, args: ['p-icon-tooltip',] }],
    click: [{ type: Output, args: ['p-click',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGFibGUtaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tdGFibGUvcG8tdGFibGUtaWNvbi9wby10YWJsZS1pY29uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBRTdHOzs7Ozs7R0FNRztBQU1ILE1BQU0sT0FBTyxvQkFBb0I7SUFMakM7UUFxQkUsb0JBQW9CO1FBQ0QsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBdUJuRSxDQUFDO0lBbkJDLElBQVksWUFBWTtRQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVDLENBQUM7SUFFRCxPQUFPLENBQUMsS0FBSztRQUNYLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxpQkFBaUI7UUFDZixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDO1NBQ2pDO0lBQ0gsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO0lBQzNCLENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLG9WQUE2QztnQkFDN0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozt3QkFHRSxLQUFLLFNBQUMsYUFBYTtvQkFHbkIsS0FBSyxTQUFDLFNBQVM7dUJBR2YsS0FBSyxTQUFDLFlBQVk7bUJBR2xCLEtBQUssU0FBQyxRQUFROzBCQUdkLEtBQUssU0FBQyxnQkFBZ0I7b0JBR3RCLE1BQU0sU0FBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcmVzcG9uc8OhdmVsIHBvciBleGliaXIgdW0gw61jb25lIG5hIHRhYmVsYS5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncG8tdGFibGUtaWNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby10YWJsZS1pY29uLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgUG9UYWJsZUljb25Db21wb25lbnQge1xuICAvKiogRGVmaW5lIHNlIG8gw61jb25lIMOpIGNsaWPDoXZlbC4gKi9cbiAgQElucHV0KCdwLWNsaWNrYWJsZScpIGNsaWNrYWJsZTogYm9vbGVhbjtcblxuICAvKiogQ29yIGRvIMOtY29uZS4gKi9cbiAgQElucHV0KCdwLWNvbG9yJykgY29sb3I6IHN0cmluZztcblxuICAvKiogRGVzYWJpbGl0YWRvLiAqL1xuICBASW5wdXQoJ3AtZGlzYWJsZWQnKSBkaXNhYmxlZDogYm9vbGVhbjtcblxuICAvKiogQ2xhc3NlIGNzcyBkbyDDrWNvbmUuICovXG4gIEBJbnB1dCgncC1pY29uJykgaWNvbjogc3RyaW5nIHwgVGVtcGxhdGVSZWY8dm9pZD47XG5cbiAgLyoqIFRleHRvIGRvIHRvb2x0aXAuICovXG4gIEBJbnB1dCgncC1pY29uLXRvb2x0aXAnKSBpY29uVG9vbHRpcDogc3RyaW5nO1xuXG4gIC8qKiBPdXRwdXQgY2xpY2suICovXG4gIEBPdXRwdXQoJ3AtY2xpY2snKSBjbGljazogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgdG9vbHRpcDogc3RyaW5nO1xuXG4gIHByaXZhdGUgZ2V0IGFsbG93VG9vbHRpcCgpIHtcbiAgICByZXR1cm4gIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5pY29uVG9vbHRpcDtcbiAgfVxuXG4gIG9uQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAodGhpcy5jbGlja2FibGUpIHtcbiAgICAgIHRoaXMuY2xpY2suZW1pdChldmVudCk7XG4gICAgfVxuICB9XG5cbiAgdG9vbHRpcE1vdXNlRW50ZXIoKSB7XG4gICAgaWYgKHRoaXMuYWxsb3dUb29sdGlwKSB7XG4gICAgICB0aGlzLnRvb2x0aXAgPSB0aGlzLmljb25Ub29sdGlwO1xuICAgIH1cbiAgfVxuXG4gIHRvb2x0aXBNb3VzZUxlYXZlKCkge1xuICAgIHRoaXMudG9vbHRpcCA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19