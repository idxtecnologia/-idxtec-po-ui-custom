import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export const poMenuFilterLiteralsDefault = {
    en: { search: 'Search' },
    es: { search: 'Buscar' },
    pt: { search: 'Pesquisar' },
    ru: { search: 'Поиск' }
};
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente que apresenta o campo de pesquisa no po-menu.
 */
export class PoMenuFilterComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.filter = new EventEmitter();
        this.literals = Object.assign(Object.assign({}, poMenuFilterLiteralsDefault[this.languageService.getLanguageDefault()]), poMenuFilterLiteralsDefault[this.languageService.getShortLanguage()]);
    }
    filterItems(search) {
        this.filter.emit(search);
    }
}
PoMenuFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-menu-filter',
                template: "<div class=\"po-menu-filter-container\">\n  <input\n    #inputFilter\n    type=\"text\"\n    class=\"po-menu-filter\"\n    [placeholder]=\"literals.search\"\n    (keyup)=\"filterItems(inputFilter.value)\"\n  />\n\n  <div class=\"po-menu-filter-search-icon-container\">\n    <span *ngIf=\"!loading\" class=\"po-icon po-menu-filter-icon po-icon-search\"></span>\n    <po-loading-icon *ngIf=\"loading\"></po-loading-icon>\n  </div>\n  <div class=\"po-menu-filter-close-icon-container\">\n    <po-clean [p-element-ref]=\"inputFilterElement\" (p-change-event)=\"filterItems(inputFilter.value)\"></po-clean>\n  </div>\n</div>\n"
            },] }
];
PoMenuFilterComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoMenuFilterComponent.propDecorators = {
    loading: [{ type: Input, args: ['p-loading',] }],
    inputFilterElement: [{ type: ViewChild, args: ['inputFilter', { read: ElementRef, static: true },] }],
    filter: [{ type: Output, args: ['p-filter',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbWVudS1maWx0ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLW1lbnUvcG8tbWVudS1maWx0ZXIvcG8tbWVudS1maWx0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUd0RixNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FBRztJQUN6QyxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtJQUM5QyxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRTtJQUM5QyxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtJQUNqRCxFQUFFLEVBQXdCLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRTtDQUM5QyxDQUFDO0FBRUY7Ozs7OztHQU1HO0FBS0gsTUFBTSxPQUFPLHFCQUFxQjtJQWFoQyxZQUFtQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFQakMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFekMsYUFBUSxtQ0FDViwyQkFBMkIsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixFQUFFLENBQUMsR0FDdEUsMkJBQTJCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQ3ZFO0lBRXNELENBQUM7SUFDekQsV0FBVyxDQUFDLE1BQWM7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7O1lBcEJGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQix5bkJBQThDO2FBQy9DOzs7WUFwQlEsaUJBQWlCOzs7c0JBc0J2QixLQUFLLFNBQUMsV0FBVztpQ0FHakIsU0FBUyxTQUFDLGFBQWEsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtxQkFFM0QsTUFBTSxTQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQb0xhbmd1YWdlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3BvLWxhbmd1YWdlL3BvLWxhbmd1YWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUG9NZW51RmlsdGVyTGl0ZXJhbHMgfSBmcm9tICcuL3BvLW1lbnUtZmlsdGVyLWxpdGVyYWxzLmludGVyZmFjZSc7XG5cbmV4cG9ydCBjb25zdCBwb01lbnVGaWx0ZXJMaXRlcmFsc0RlZmF1bHQgPSB7XG4gIGVuOiA8UG9NZW51RmlsdGVyTGl0ZXJhbHM+eyBzZWFyY2g6ICdTZWFyY2gnIH0sXG4gIGVzOiA8UG9NZW51RmlsdGVyTGl0ZXJhbHM+eyBzZWFyY2g6ICdCdXNjYXInIH0sXG4gIHB0OiA8UG9NZW51RmlsdGVyTGl0ZXJhbHM+eyBzZWFyY2g6ICdQZXNxdWlzYXInIH0sXG4gIHJ1OiA8UG9NZW51RmlsdGVyTGl0ZXJhbHM+eyBzZWFyY2g6ICfQn9C+0LjRgdC6JyB9XG59O1xuXG4vKipcbiAqIEBkb2NzUHJpdmF0ZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgcXVlIGFwcmVzZW50YSBvIGNhbXBvIGRlIHBlc3F1aXNhIG5vIHBvLW1lbnUuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLW1lbnUtZmlsdGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLW1lbnUtZmlsdGVyLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb01lbnVGaWx0ZXJDb21wb25lbnQge1xuICBASW5wdXQoJ3AtbG9hZGluZycpIGxvYWRpbmc6IGJvb2xlYW47XG5cbiAgLy8gdXRpbGl6YWRvIHBhcmEgcmVwYXNzYXIgYW8gcG8tY2xlYW5cbiAgQFZpZXdDaGlsZCgnaW5wdXRGaWx0ZXInLCB7IHJlYWQ6IEVsZW1lbnRSZWYsIHN0YXRpYzogdHJ1ZSB9KSBpbnB1dEZpbHRlckVsZW1lbnQ6IEVsZW1lbnRSZWY7XG5cbiAgQE91dHB1dCgncC1maWx0ZXInKSBmaWx0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgcHVibGljIGxpdGVyYWxzID0ge1xuICAgIC4uLnBvTWVudUZpbHRlckxpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRMYW5ndWFnZURlZmF1bHQoKV0sXG4gICAgLi4ucG9NZW51RmlsdGVyTGl0ZXJhbHNEZWZhdWx0W3RoaXMubGFuZ3VhZ2VTZXJ2aWNlLmdldFNob3J0TGFuZ3VhZ2UoKV1cbiAgfTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge31cbiAgZmlsdGVySXRlbXMoc2VhcmNoOiBzdHJpbmcpIHtcbiAgICB0aGlzLmZpbHRlci5lbWl0KHNlYXJjaCk7XG4gIH1cbn1cbiJdfQ==