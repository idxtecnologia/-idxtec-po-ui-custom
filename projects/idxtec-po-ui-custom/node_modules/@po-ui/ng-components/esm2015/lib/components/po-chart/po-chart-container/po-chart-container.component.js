import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { PoChartType } from '../enums/po-chart-type.enum';
import { PoChartMathsService } from '../services/po-chart-maths.service';
export class PoChartContainerComponent {
    constructor(mathsService) {
        this.mathsService = mathsService;
        this.serieClick = new EventEmitter();
        this.serieHover = new EventEmitter();
        this._series = [];
    }
    set options(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._options = value;
            this.verifyAxisOptions(this._options);
        }
    }
    get options() {
        return this._options;
    }
    set series(data) {
        this._series = data;
        this.setAlignByTheCorners(this._series);
        this.setSeriesByType(this._series);
        this.setRange(this._series, this.options);
    }
    get series() {
        return this._series;
    }
    get isTypeCircular() {
        return this.type === PoChartType.Pie || this.type === PoChartType.Donut;
    }
    ngOnChanges(changes) {
        if (changes.type || changes.containerSize) {
            this.setViewBox();
            this.setSvgSpace();
        }
    }
    getCategoriesCoordinates(value) {
        this.categoriesCoordinates = value;
    }
    onSerieClick(event) {
        this.serieClick.emit(event);
    }
    onSerieHover(event) {
        this.serieHover.emit(event);
    }
    getRange(series, options = {}) {
        var _a, _b, _c;
        const domain = this.mathsService.calculateMinAndMaxValues(series);
        const minValue = !((_a = options.axis) === null || _a === void 0 ? void 0 : _a.minRange) && domain.minValue > 0
            ? 0
            : ((_b = options.axis) === null || _b === void 0 ? void 0 : _b.minRange) < domain.minValue
                ? options.axis.minRange
                : domain.minValue;
        const maxValue = ((_c = options.axis) === null || _c === void 0 ? void 0 : _c.maxRange) > domain.maxValue ? options.axis.maxRange : domain.maxValue;
        const updatedDomainValues = { minValue, maxValue };
        return Object.assign(Object.assign({}, domain), updatedDomainValues);
    }
    setSvgSpace() {
        var _a;
        // Representa um ponto 2D dentro do viewport do SVG. Ele é a representação do cursor do mouse para comparação de coordenadas com cada dado de série.
        const svgPoint = this.svgELement.nativeElement.createSVGPoint();
        // Retorna um DOMMatrix representando as matrizes 2D e 3D transformadas a partir das coordenadas do elemento, em relação ao document, para coordenadas relativas ao viewport do SVG.
        // É utilizado nos gráficos do tipo área para que seja possível equiparar as coordenadas do evento com cada dado de série, para assim ativar o ponto de dado equivalente.
        const svgDomMatrix = (_a = this.svgELement.nativeElement.getScreenCTM()) === null || _a === void 0 ? void 0 : _a.inverse();
        this.svgSpace = { svgPoint, svgDomMatrix };
    }
    setAlignByTheCorners(series) {
        this.alignByTheCorners = series.every(serie => serie.type === PoChartType.Area || serie.type === PoChartType.Bar);
    }
    setRange(series, options = {}) {
        if (!this.isTypeCircular) {
            this.range = this.getRange(series, options);
        }
    }
    setSeriesByType(series) {
        this.seriesByType = {
            [PoChartType.Area]: series.filter(serie => serie.type === PoChartType.Area),
            [PoChartType.Column]: series.filter(serie => serie.type === PoChartType.Column),
            [PoChartType.Bar]: series.filter(serie => serie.type === PoChartType.Bar),
            [PoChartType.Line]: series.filter(serie => serie.type === PoChartType.Line),
            [PoChartType.Donut]: series.filter(serie => serie.type === PoChartType.Donut),
            [PoChartType.Pie]: series.filter(serie => serie.type === PoChartType.Pie)
        };
    }
    setViewBox() {
        const { svgWidth, svgHeight } = this.containerSize;
        const viewBoxWidth = this.isTypeCircular ? svgHeight : svgWidth;
        // Tratamento necessário para que não corte o vetor nas extremidades
        const offsetXY = 1;
        this.viewBox = `${offsetXY} -${offsetXY} ${viewBoxWidth} ${this.containerSize.svgHeight}`;
    }
    verifyAxisOptions(options) {
        if (!this.isTypeCircular && options.hasOwnProperty('axis')) {
            this.range = this.getRange(this.series, this.options);
            this.axisOptions = Object.assign(Object.assign({}, this.axisOptions), options.axis);
        }
    }
}
PoChartContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-chart-container',
                template: "<svg:svg\n  #svgELement\n  class=\"po-chart-svg-element\"\n  preserveAspectRatio=\"xMidYMin meet\"\n  [attr.viewBox]=\"viewBox\"\n  [attr.width]=\"containerSize.svgWidth\"\n  [attr.height]=\"containerSize.svgHeight\"\n>\n  <!-- axis -->\n  <svg:g\n    *ngIf=\"!isTypeCircular\"\n    po-chart-axis\n    [p-align-by-the-corners]=\"alignByTheCorners\"\n    [p-range]=\"range\"\n    [p-type]=\"type\"\n    [p-series]=\"series\"\n    [p-container-size]=\"containerSize\"\n    [p-options]=\"axisOptions\"\n    [p-categories]=\"categories\"\n    (p-categories-coordinates)=\"getCategoriesCoordinates($event)\"\n  ></svg:g>\n\n  <!-- chart area -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['area'].length\"\n    po-chart-area\n    [p-align-by-the-corners]=\"alignByTheCorners\"\n    [p-svg-space]=\"svgSpace\"\n    [p-categories]=\"categories\"\n    [p-categories-coordinates]=\"categoriesCoordinates\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['area']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart column -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['column'].length\"\n    po-chart-column\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['column']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart line -->\n  <svg:g\n    *ngIf=\"(type === 'area' || type === 'line' || type === 'column') && seriesByType['line'].length\"\n    po-chart-line\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['line']\"\n    [p-container-size]=\"containerSize\"\n    (p-point-hover)=\"onSerieHover($event)\"\n    (p-point-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <!-- chart bar -->\n  <svg:g\n    *ngIf=\"type === 'bar'\"\n    po-chart-bar\n    [p-categories]=\"categories\"\n    [p-range]=\"range\"\n    [p-series]=\"seriesByType['bar']\"\n    [p-container-size]=\"containerSize\"\n    (p-bar-hover)=\"onSerieHover($event)\"\n    (p-bar-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <svg:g\n    *ngIf=\"type === 'pie'\"\n    po-chart-pie\n    [p-series]=\"seriesByType['pie']\"\n    [p-container-size]=\"containerSize\"\n    (p-circular-hover)=\"onSerieHover($event)\"\n    (p-circular-click)=\"onSerieClick($event)\"\n  ></svg:g>\n\n  <svg:g\n    *ngIf=\"type === 'donut'\"\n    po-chart-donut\n    [p-options]=\"options\"\n    [p-series]=\"seriesByType['donut']\"\n    [p-container-size]=\"containerSize\"\n    (p-circular-hover)=\"onSerieHover($event)\"\n    (p-circular-click)=\"onSerieClick($event)\"\n  ></svg:g>\n</svg:svg>\n"
            },] }
];
PoChartContainerComponent.ctorParameters = () => [
    { type: PoChartMathsService }
];
PoChartContainerComponent.propDecorators = {
    categories: [{ type: Input, args: ['p-categories',] }],
    type: [{ type: Input, args: ['p-type',] }],
    containerSize: [{ type: Input, args: ['p-container-size',] }],
    serieClick: [{ type: Output, args: ['p-serie-click',] }],
    serieHover: [{ type: Output, args: ['p-serie-hover',] }],
    svgELement: [{ type: ViewChild, args: ['svgELement', { static: true },] }],
    options: [{ type: Input, args: ['p-options',] }],
    series: [{ type: Input, args: ['p-series',] }]
};
//# sourceMappingURL=data:application/json;base64,