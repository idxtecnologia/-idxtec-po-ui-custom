import { Component, ElementRef, Input, ViewChild, ViewChildren } from '@angular/core';
import { NavigationCancel, NavigationEnd, Router } from '@angular/router';
import { PoNavbarItemComponent } from './po-navbar-item/po-navbar-item.component';
export class PoNavbarItemsComponent {
    constructor(router) {
        this.router = router;
    }
    ngOnDestroy() {
        this.routeSubscription.unsubscribe();
    }
    ngOnInit() {
        this.subscribeToRoute();
    }
    checkActiveItemByUrl(urlRouter) {
        const urlArray = urlRouter.split('/');
        let counter = urlArray.length;
        while (counter >= 0) {
            const url = urlArray.slice(0, counter).join('/');
            this.selectedItem = this.items.find(item => item.link === url);
            if (this.selectedItem) {
                break;
            }
            counter--;
        }
    }
    checkRouterChildrenFragments() {
        const childrenPrimary = this.router.parseUrl(this.router.url).root.children['primary'];
        return childrenPrimary ? `/${childrenPrimary.segments.map(it => it.path).join('/')}` : '/';
    }
    subscribeToRoute() {
        this.routeSubscription = this.router.events.subscribe(val => {
            if (val instanceof NavigationEnd || val instanceof NavigationCancel) {
                const urlRouter = this.checkRouterChildrenFragments();
                this.checkActiveItemByUrl(urlRouter);
            }
        });
    }
}
PoNavbarItemsComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-navbar-items',
                template: "<nav>\n  <ul class=\"po-navbar-items-container\" #navbarItemsContainer>\n    <li *ngFor=\"let item of items\" class=\"po-navbar-item\" [class.po-navbar-item-selected]=\"selectedItem === item\">\n      <po-navbar-item\n        [p-action]=\"item.action\"\n        [p-clickable]=\"selectedItem !== item\"\n        [p-label]=\"item.label\"\n        [p-link]=\"item.link\"\n      >\n      </po-navbar-item>\n    </li>\n  </ul>\n</nav>\n"
            },] }
];
PoNavbarItemsComponent.ctorParameters = () => [
    { type: Router }
];
PoNavbarItemsComponent.propDecorators = {
    navbarItemsContainer: [{ type: ViewChild, args: ['navbarItemsContainer', { read: ElementRef, static: true },] }],
    allNavbarItems: [{ type: ViewChildren, args: [PoNavbarItemComponent, { read: ElementRef },] }],
    items: [{ type: Input, args: ['p-items',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tbmF2YmFyLWl0ZW1zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1uYXZiYXIvcG8tbmF2YmFyLWl0ZW1zL3BvLW5hdmJhci1pdGVtcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFnQyxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BILE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFNbEYsTUFBTSxPQUFPLHNCQUFzQjtJQVdqQyxZQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUFHLENBQUM7SUFFdEMsV0FBVztRQUNULElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUN2QyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBQzFCLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxTQUFpQjtRQUM1QyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFFOUIsT0FBTyxPQUFPLElBQUksQ0FBQyxFQUFFO1lBQ25CLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztZQUUvRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3JCLE1BQU07YUFDUDtZQUNELE9BQU8sRUFBRSxDQUFDO1NBQ1g7SUFDSCxDQUFDO0lBRU8sNEJBQTRCO1FBQ2xDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUV2RixPQUFPLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO0lBQzdGLENBQUM7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMxRCxJQUFJLEdBQUcsWUFBWSxhQUFhLElBQUksR0FBRyxZQUFZLGdCQUFnQixFQUFFO2dCQUNuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFyREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLDJiQUErQzthQUNoRDs7O1lBVnlDLE1BQU07OzttQ0FZN0MsU0FBUyxTQUFDLHNCQUFzQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzZCQUVwRSxZQUFZLFNBQUMscUJBQXFCLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFO29CQUV4RCxLQUFLLFNBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBRdWVyeUxpc3QsIFZpZXdDaGlsZCwgVmlld0NoaWxkcmVuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYXZpZ2F0aW9uQ2FuY2VsLCBOYXZpZ2F0aW9uRW5kLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgUG9OYXZiYXJJdGVtIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1uYXZiYXItaXRlbS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9OYXZiYXJJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9wby1uYXZiYXItaXRlbS9wby1uYXZiYXItaXRlbS5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1uYXZiYXItaXRlbXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcG8tbmF2YmFyLWl0ZW1zLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb05hdmJhckl0ZW1zQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBAVmlld0NoaWxkKCduYXZiYXJJdGVtc0NvbnRhaW5lcicsIHsgcmVhZDogRWxlbWVudFJlZiwgc3RhdGljOiB0cnVlIH0pIG5hdmJhckl0ZW1zQ29udGFpbmVyOiBFbGVtZW50UmVmO1xuXG4gIEBWaWV3Q2hpbGRyZW4oUG9OYXZiYXJJdGVtQ29tcG9uZW50LCB7IHJlYWQ6IEVsZW1lbnRSZWYgfSkgYWxsTmF2YmFySXRlbXM6IFF1ZXJ5TGlzdDxhbnk+O1xuXG4gIEBJbnB1dCgncC1pdGVtcycpIGl0ZW1zOiBBcnJheTxQb05hdmJhckl0ZW0+O1xuXG4gIHNlbGVjdGVkSXRlbTogUG9OYXZiYXJJdGVtO1xuXG4gIHByaXZhdGUgcm91dGVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7fVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMucm91dGVTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaWJlVG9Sb3V0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0FjdGl2ZUl0ZW1CeVVybCh1cmxSb3V0ZXI6IHN0cmluZykge1xuICAgIGNvbnN0IHVybEFycmF5ID0gdXJsUm91dGVyLnNwbGl0KCcvJyk7XG4gICAgbGV0IGNvdW50ZXIgPSB1cmxBcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoY291bnRlciA+PSAwKSB7XG4gICAgICBjb25zdCB1cmwgPSB1cmxBcnJheS5zbGljZSgwLCBjb3VudGVyKS5qb2luKCcvJyk7XG4gICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IHRoaXMuaXRlbXMuZmluZChpdGVtID0+IGl0ZW0ubGluayA9PT0gdXJsKTtcblxuICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRJdGVtKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY291bnRlci0tO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tSb3V0ZXJDaGlsZHJlbkZyYWdtZW50cygpIHtcbiAgICBjb25zdCBjaGlsZHJlblByaW1hcnkgPSB0aGlzLnJvdXRlci5wYXJzZVVybCh0aGlzLnJvdXRlci51cmwpLnJvb3QuY2hpbGRyZW5bJ3ByaW1hcnknXTtcblxuICAgIHJldHVybiBjaGlsZHJlblByaW1hcnkgPyBgLyR7Y2hpbGRyZW5QcmltYXJ5LnNlZ21lbnRzLm1hcChpdCA9PiBpdC5wYXRoKS5qb2luKCcvJyl9YCA6ICcvJztcbiAgfVxuXG4gIHByaXZhdGUgc3Vic2NyaWJlVG9Sb3V0ZSgpIHtcbiAgICB0aGlzLnJvdXRlU3Vic2NyaXB0aW9uID0gdGhpcy5yb3V0ZXIuZXZlbnRzLnN1YnNjcmliZSh2YWwgPT4ge1xuICAgICAgaWYgKHZhbCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQgfHwgdmFsIGluc3RhbmNlb2YgTmF2aWdhdGlvbkNhbmNlbCkge1xuICAgICAgICBjb25zdCB1cmxSb3V0ZXIgPSB0aGlzLmNoZWNrUm91dGVyQ2hpbGRyZW5GcmFnbWVudHMoKTtcbiAgICAgICAgdGhpcy5jaGVja0FjdGl2ZUl0ZW1CeVVybCh1cmxSb3V0ZXIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=