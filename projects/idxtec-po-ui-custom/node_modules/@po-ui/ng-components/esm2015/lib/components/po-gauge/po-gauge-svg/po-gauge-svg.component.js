import { Component, Input } from '@angular/core';
import { PoGaugePointerEnd, PoGaugeThickness, poGaugeTotalValueDefault } from '../po-gauge-default-values.constant';
import { PoDefaultColors } from '../../../services/po-color/po-colors.constant';
export const poGaugeStartAngle = -Math.PI;
export class PoGaugeSvgComponent {
    constructor() {
        this.addSvgElement = false;
    }
    get hasRanges() {
        return this.ranges.length > 0;
    }
    ngOnChanges(changes) {
        if ((this.container && changes.value) || (this.container && changes.ranges) || this.container) {
            this.setCoordinates(this.value, this.ranges, this.container);
        }
    }
    setCoordinates(value, ranges, container) {
        const { height } = container;
        // Adiciona elemento svg somente após calcular a altura do container pois o svg tem altura default de 150px.
        this.addSvgElement = true;
        this.setViewBox(height);
        this.setBaseCoordinates(height);
        if (!ranges.length) {
            this.setSingleRangeCoordinates(height, value);
            return;
        }
        this.setRangesCoordinates(height, value, ranges);
    }
    setBaseCoordinates(height) {
        const endAngleRadian = 0;
        const coordinates = this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian);
        this.baseCoordinates = { coordinates };
    }
    setRangesCoordinates(height, value = 0, ranges) {
        const { minRange, maxRange } = this.calculateMinAndMaxValues(ranges);
        const minValue = value < minRange ? value : minRange;
        const maxValue = value > maxRange ? value : maxRange;
        this.setPointerCoordinates(height, value, maxValue, minValue);
        // `.reverse()` no término da iteração para tratar a sobreposicão correta das bordas arredondadas dos ranges.
        const rangesCoordinates = ranges
            .map((range) => {
            var _a, _b;
            const from = (_a = range.from) !== null && _a !== void 0 ? _a : 0;
            const to = (_b = range.to) !== null && _b !== void 0 ? _b : maxRange;
            const startAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(from, maxValue, minValue);
            const endAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(to, maxValue, minValue);
            const coordinates = this.calculateCoordinates(height, startAngleRadian, endAngleRadian);
            return { coordinates, color: range.color };
        })
            .reverse();
        this.coordinates = rangesCoordinates;
    }
    setSingleRangeCoordinates(height, value) {
        const verifiedValue = value > 100 ? 100 : value;
        const endAngleRadian = poGaugeStartAngle + this.calculateAngleRadius(verifiedValue, poGaugeTotalValueDefault);
        const coordinates = value > 0 ? this.calculateCoordinates(height, poGaugeStartAngle, endAngleRadian) : undefined;
        const color = PoDefaultColors[0][0];
        this.coordinates = [{ coordinates, color }];
    }
    setPointerCoordinates(height, value, maxValue, minValue) {
        const coordinates = this.calculatePointerInitialCoordinates(height, poGaugeStartAngle);
        const pointerDegrees = this.pointerRotation(value, maxValue, minValue);
        this.pointerCoordinates = Object.assign(Object.assign({}, coordinates), { pointerDegrees });
    }
    pointerRotation(value, maxValue, minValue) {
        const percent = this.convertValueToPercentage(value, maxValue, minValue);
        // valores referentes às angulações mínimas e máximas do ponteiro.
        const minRotation = 0;
        const maxRotation = 180;
        return (percent * (maxRotation - minRotation)) / 100 + minRotation;
    }
    calculatePointerInitialCoordinates(height, startAngleRadian) {
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        // Valor que representa a escala do ponteiro para plotagem.
        const scale = 40;
        const pointerScaledWidth = radius / scale;
        const pointerScaledBorderRadius = radius / (scale * 2);
        const sinAlpha = Math.sin(startAngleRadian);
        const cosAlpha = Math.cos(startAngleRadian);
        const targetX = radius + cosAlpha * radius;
        const targetY = radius + sinAlpha * radius;
        const startX = radius;
        const startY = radius + pointerScaledWidth;
        const endX = radius;
        const endY = radius - pointerScaledWidth;
        const coordinates = [
            'M',
            startX,
            startY,
            'L',
            targetX,
            targetY + pointerScaledBorderRadius,
            'A',
            1,
            1,
            0,
            '0,1',
            targetX,
            targetY - pointerScaledBorderRadius,
            'L',
            endX,
            endY,
            'Z'
        ].join(' ');
        return { coordinates, radius };
    }
    calculateCoordinates(height, startAngleRadian, endAngleRadian) {
        // Subtrai altura pelo excedente ponteiro em relação ao gráfico, pela metade do valor da coroa circular.
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        const innerRadius = radius - PoGaugeThickness;
        const sinAlpha = Math.sin(startAngleRadian);
        const cosAlpha = Math.cos(startAngleRadian);
        const sinBeta = Math.sin(endAngleRadian);
        const cosBeta = Math.cos(endAngleRadian);
        const startX = Math.round(radius + cosAlpha * radius);
        const startY = Math.round(radius + sinAlpha * radius);
        const endX = Math.round(radius + cosBeta * radius);
        const endY = Math.round(radius + sinBeta * radius);
        const startInnerX = Math.round(radius + cosAlpha * innerRadius);
        const startInnerY = Math.round(radius + sinAlpha * innerRadius);
        const endInnerX = Math.round(radius + cosBeta * innerRadius);
        const endInnerY = Math.round(radius + sinBeta * innerRadius);
        return [
            'M',
            startX,
            startY,
            'A',
            radius,
            radius,
            0,
            '0,1',
            endX,
            endY,
            'A',
            1,
            1,
            0,
            '0,1',
            endInnerX,
            endInnerY,
            'A',
            innerRadius,
            innerRadius,
            0,
            '0,0',
            startInnerX,
            startInnerY,
            'A',
            1,
            1,
            0,
            '0,1',
            startX,
            startY,
            'Z'
        ].join(' ');
    }
    calculateAngleRadius(value, maxValue, minValue = 0) {
        const angle = ((value - minValue) / (maxValue - minValue)) * (Math.PI * 2);
        return angle / 2;
    }
    convertValueToPercentage(value, maxValue, minValue) {
        return ((value - minValue) / (maxValue - minValue)) * 100;
    }
    setViewBox(height) {
        const width = this.calculateDiameter(height);
        this.viewBox = `0 ${-PoGaugePointerEnd} ${width} ${height}`;
    }
    calculateDiameter(height) {
        const radius = height - PoGaugePointerEnd - PoGaugeThickness / 2;
        return radius + Math.cos(0) * radius;
    }
    calculateMinAndMaxValues(ranges) {
        const minRange = this.getDomain(ranges, 'min');
        const maxRange = this.getDomain(ranges, 'max');
        return {
            minRange: this.verifyIfFloatOrInteger(minRange) ? minRange : 0,
            maxRange: this.verifyIfFloatOrInteger(maxRange) ? maxRange : 100
        };
    }
    verifyIfFloatOrInteger(number) {
        const notABoolean = typeof number !== 'boolean';
        const notInfinity = number !== Infinity;
        const isInteger = Number(number) === number && number % 1 === 0 && notInfinity;
        const isFloat = Number(number) === number && number % 1 !== 0 && notInfinity;
        return (notABoolean && isInteger) || (notABoolean && isFloat);
    }
    getDomain(ranges, type) {
        const rangeType = { min: 'from', max: 'to' };
        return Math[type](...ranges.map(range => range[rangeType[type]]));
    }
}
PoGaugeSvgComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-gauge-svg',
                template: "<svg:svg\n  *ngIf=\"addSvgElement\"\n  class=\"po-gauge-svg\"\n  preserveAspectRatio=\"xMidYMax meet\"\n  width=\"100%\"\n  [attr.viewBox]=\"viewBox\"\n  [attr.height]=\"container?.height\"\n>\n  <!-- GAUGE PATHS -->\n  <svg:g po-gauge-path [p-base-coordinates]=\"baseCoordinates\" [p-ranges-coordinates]=\"coordinates\"></svg:g>\n\n  <!-- GAUGE POINTER -->\n  <svg:g *ngIf=\"hasRanges\" po-gauge-pointer [p-coordinates]=\"pointerCoordinates\"></svg:g>\n</svg:svg>\n"
            },] }
];
PoGaugeSvgComponent.propDecorators = {
    container: [{ type: Input, args: ['p-container',] }],
    ranges: [{ type: Input, args: ['p-ranges',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
//# sourceMappingURL=data:application/json;base64,