import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive, ChangeDetectorRef } from '@angular/core';
import { convertToBoolean, convertToInt } from '../../../utils/util';
import { maxlengpoailed, minlengpoailed, requiredFailed } from '../validators';
import { InputBoolean } from '../../../decorators';
/**
 * @description
 *
 * Este é um componente de entrada de dados que possibilita o preechimento com múltiplas linhas.
 * É recomendado para observações, detalhamentos e outras situações onde o usuário deva preencher com um texto.
 *
 * Importante:
 *
 * - A propriedade `name` é obrigatória para que o formulário e o `model` funcionem corretamente. Do contrário, ocorrerá um erro de
 * _Angular_, onde será necessário informar o atributo `name` ou o atributo `[ngModelOptions]="{standalone: true}"`, por exemplo:
 *
 * ```
 * <po-textarea
 *   [(ngModel)]="pessoa.nome"
 *   [ngModelOptions]="{standalone: true}">
 * </po-textarea>
 * ```
 */
export class PoTextareaBaseComponent {
    constructor(cd) {
        this.cd = cd;
        /**
         * @optional
         *
         * @description
         *
         * Aplica foco no elemento ao ser iniciado.
         *
         * > Caso mais de um elemento seja configurado com essa propriedade, apenas o último elemento declarado com ela terá o foco.
         *
         * @default `false`
         */
        this.autoFocus = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao sair do campo.
         */
        this.blur = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao entrar do campo.
         */
        this.enter = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor e deixar o campo.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao alterar valor do model.
         */
        this.changeModel = new EventEmitter();
        this._disabled = false;
        this._placeholder = '';
        this._readonly = false;
        this._required = false;
        this._rows = 3;
        this.onChangePropagate = null;
        // eslint-disable-next-line
        this.onTouched = null;
    }
    /** Placeholder, mensagem que aparecerá enquanto o campo não estiver preenchido. */
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get placeholder() {
        return this._placeholder;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será desabilitado.
     *
     * @default `false`
     */
    set disabled(disabled) {
        this._disabled = convertToBoolean(disabled);
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será somente leitura.
     *
     * @default `false`
     */
    set readonly(readonly) {
        this._readonly = convertToBoolean(readonly);
    }
    get readonly() {
        return this._readonly;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica que o campo será obrigatório.
     *
     * > Esta propriedade é desconsiderada quando o _input_ está desabilitado `(p-disabled)`.
     *
     * @default `false`
     */
    set required(required) {
        this._required = convertToBoolean(required);
        this.validateModel();
    }
    get required() {
        return this._required;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade mínima de caracteres que o campo aceita.
     */
    set minlength(minlength) {
        this._minlength = convertToInt(minlength);
        this.validateModel();
    }
    get minlength() {
        return this._minlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade máxima de caracteres que o campo aceita.
     */
    set maxlength(maxlength) {
        this._maxlength = convertToInt(maxlength);
        this.validateModel();
    }
    get maxlength() {
        return this._maxlength;
    }
    /**
     * @optional
     *
     * @description
     *
     * Indica a quantidade de linhas que serão exibidas.
     *
     * @default `3`
     */
    set rows(value) {
        this._rows = isNaN(parseInt(value, 10)) || value < 3 ? 3 : parseInt(value, 10);
    }
    get rows() {
        return this._rows;
    }
    callOnChange(value) {
        // Quando o input não possui um formulário, então esta função não é registrada
        if (this.onChangePropagate) {
            this.onChangePropagate(value);
        }
        this.controlChangeModelEmitter(value);
    }
    controlChangeModelEmitter(value) {
        if (this.modelLastUpdate !== value) {
            this.changeModel.emit(value);
            this.modelLastUpdate = value;
        }
    }
    // Função implementada do ControlValueAccessor
    // Usada para interceptar os estados de habilitado via forms api
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cd.markForCheck();
    }
    // Funções `registerOnChange`, `registerOnTouched` e `registerOnValidatorChange` implementadas referentes ao ControlValueAccessor
    // usadas para interceptar as mudanças e não atualizar automaticamente o Model
    registerOnChange(func) {
        this.onChangePropagate = func;
    }
    registerOnTouched(func) {
        this.onTouched = func;
    }
    registerOnValidatorChange(func) {
        this.validatorChange = func;
    }
    validate(abstractControl) {
        if (requiredFailed(this.required, this.disabled, abstractControl.value)) {
            return {
                required: {
                    valid: false
                }
            };
        }
        if (minlengpoailed(this.minlength, abstractControl.value)) {
            return {
                minlength: {
                    valid: false
                }
            };
        }
        if (maxlengpoailed(this.maxlength, abstractControl.value)) {
            return {
                maxlength: {
                    valid: false
                }
            };
        }
    }
    // Função implementada do ControlValueAccessor
    writeValue(value) {
        this.writeValueModel(value);
        this.cd.markForCheck();
    }
    validateModel() {
        if (this.validatorChange) {
            this.validatorChange();
        }
    }
}
PoTextareaBaseComponent.decorators = [
    { type: Directive }
];
PoTextareaBaseComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
PoTextareaBaseComponent.propDecorators = {
    autoFocus: [{ type: Input, args: ['p-auto-focus',] }],
    label: [{ type: Input, args: ['p-label',] }],
    help: [{ type: Input, args: ['p-help',] }],
    name: [{ type: Input, args: ['name',] }],
    optional: [{ type: Input, args: ['p-optional',] }],
    blur: [{ type: Output, args: ['p-blur',] }],
    enter: [{ type: Output, args: ['p-enter',] }],
    change: [{ type: Output, args: ['p-change',] }],
    changeModel: [{ type: Output, args: ['p-change-model',] }],
    placeholder: [{ type: Input, args: ['p-placeholder',] }],
    disabled: [{ type: Input, args: ['p-disabled',] }],
    readonly: [{ type: Input, args: ['p-readonly',] }],
    required: [{ type: Input, args: ['p-required',] }],
    minlength: [{ type: Input, args: ['p-minlength',] }],
    maxlength: [{ type: Input, args: ['p-maxlength',] }],
    rows: [{ type: Input, args: ['p-rows',] }]
};
__decorate([
    InputBoolean()
], PoTextareaBaseComponent.prototype, "autoFocus", void 0);
//# sourceMappingURL=data:application/json;base64,