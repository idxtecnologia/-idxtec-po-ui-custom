import { Directive, EventEmitter, Input, Output } from '@angular/core';
const PO_AVATAR_SIZES = ['xs', 'sm', 'md', 'lg', 'xl'];
const PO_AVATAR_SIZE_DEFAULT = 'md';
/**
 * @description
 *
 * O componente `po-avatar` é um container para imagens em miniatura, possui um formato redondo e cinco opções de
 * tamanho, pode ser utilizado para mostrar a foto do perfil de um usuário, entre outras possibilidades.
 *
 * Além de poder ser utilizado separadamente, é possível usar o `po-avatar` juntamente com outros componentes e criar
 * layouts ricos e bem interessantes para os usuários, como por exemplo, uma lista de itens ou produtos.
 */
export class PoAvatarBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Indica como o navegador deve carregar a imagem.
         *
         * Valores válidos:
         *  - `eager` (a imagem é carregada imediatamente, independente de estar visível ou não)
         *  - `lazy` (a imagem só é carregada quando estiver próxima de ser renderizada)
         *
         * @default `eager`
         */
        this.loading = 'eager';
        /** Evento disparado ao clicar na imagem do *avatar*. */
        this.click = new EventEmitter();
        this._size = 'md';
    }
    /**
     * @optional
     *
     * @description
     *
     * Tamanho de exibição do componente.
     *
     * Valores válidos:
     *  - `xs` (24x24)
     *  - `sm` (32x32)
     *  - `md` (64x64)
     *  - `lg` (96x96)
     *  - `xl` (144x144)
     *
     * @default `md`
     */
    set size(value) {
        this._size = PO_AVATAR_SIZES.includes(value) ? value : PO_AVATAR_SIZE_DEFAULT;
    }
    get size() {
        return this._size;
    }
    get hasClickEvent() {
        return !!this.click.observers.length;
    }
}
PoAvatarBaseComponent.decorators = [
    { type: Directive }
];
PoAvatarBaseComponent.propDecorators = {
    src: [{ type: Input, args: ['p-src',] }],
    loading: [{ type: Input, args: ['p-loading',] }],
    click: [{ type: Output, args: ['p-click',] }],
    size: [{ type: Input, args: ['p-size',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tYXZhdGFyLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9jb21wb25lbnRzL3BvLWF2YXRhci9wby1hdmF0YXItYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxNQUFNLGVBQWUsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN2RCxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQztBQUVwQzs7Ozs7Ozs7R0FRRztBQUVILE1BQU0sT0FBTyxxQkFBcUI7SUFEbEM7UUFRRTs7Ozs7Ozs7Ozs7O1dBWUc7UUFDaUIsWUFBTyxHQUFxQixPQUFPLENBQUM7UUFFeEQsd0RBQXdEO1FBQ3JDLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRTNDLFVBQUssR0FBVyxJQUFJLENBQUM7SUE0Qi9CLENBQUM7SUExQkM7Ozs7Ozs7Ozs7Ozs7OztPQWVHO0lBQ0gsSUFBcUIsSUFBSSxDQUFDLEtBQWE7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDO0lBQ2hGLENBQUM7SUFDRCxJQUFJLElBQUk7UUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUN2QyxDQUFDOzs7WUFyREYsU0FBUzs7O2tCQU1QLEtBQUssU0FBQyxPQUFPO3NCQWViLEtBQUssU0FBQyxXQUFXO29CQUdqQixNQUFNLFNBQUMsU0FBUzttQkFvQmhCLEtBQUssU0FBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuY29uc3QgUE9fQVZBVEFSX1NJWkVTID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCddO1xuY29uc3QgUE9fQVZBVEFSX1NJWkVfREVGQVVMVCA9ICdtZCc7XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogTyBjb21wb25lbnRlIGBwby1hdmF0YXJgIMOpIHVtIGNvbnRhaW5lciBwYXJhIGltYWdlbnMgZW0gbWluaWF0dXJhLCBwb3NzdWkgdW0gZm9ybWF0byByZWRvbmRvIGUgY2luY28gb3DDp8O1ZXMgZGVcbiAqIHRhbWFuaG8sIHBvZGUgc2VyIHV0aWxpemFkbyBwYXJhIG1vc3RyYXIgYSBmb3RvIGRvIHBlcmZpbCBkZSB1bSB1c3XDoXJpbywgZW50cmUgb3V0cmFzIHBvc3NpYmlsaWRhZGVzLlxuICpcbiAqIEFsw6ltIGRlIHBvZGVyIHNlciB1dGlsaXphZG8gc2VwYXJhZGFtZW50ZSwgw6kgcG9zc8OtdmVsIHVzYXIgbyBgcG8tYXZhdGFyYCBqdW50YW1lbnRlIGNvbSBvdXRyb3MgY29tcG9uZW50ZXMgZSBjcmlhclxuICogbGF5b3V0cyByaWNvcyBlIGJlbSBpbnRlcmVzc2FudGVzIHBhcmEgb3MgdXN1w6FyaW9zLCBjb21vIHBvciBleGVtcGxvLCB1bWEgbGlzdGEgZGUgaXRlbnMgb3UgcHJvZHV0b3MuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGNsYXNzIFBvQXZhdGFyQmFzZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBGb250ZSBkYSBpbWFnZW0gcXVlIHBvZGUgc2VyIHVtIGNhbWluaG8gbG9jYWwgKGAuL2Fzc2V0cy9pbWFnZXMvbG9nby1ibGFjay1zbWFsbC5wbmdgKVxuICAgKiBvdSB1bSBzZXJ2aWRvciBleHRlcm5vIChgaHR0cHM6Ly9wby11aS5pby9hc3NldHMvaW1hZ2VzL2xvZ28tYmxhY2stc21hbGwucG5nYCkuXG4gICAqL1xuICBASW5wdXQoJ3Atc3JjJykgc3JjOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogSW5kaWNhIGNvbW8gbyBuYXZlZ2Fkb3IgZGV2ZSBjYXJyZWdhciBhIGltYWdlbS5cbiAgICpcbiAgICogVmFsb3JlcyB2w6FsaWRvczpcbiAgICogIC0gYGVhZ2VyYCAoYSBpbWFnZW0gw6kgY2FycmVnYWRhIGltZWRpYXRhbWVudGUsIGluZGVwZW5kZW50ZSBkZSBlc3RhciB2aXPDrXZlbCBvdSBuw6NvKVxuICAgKiAgLSBgbGF6eWAgKGEgaW1hZ2VtIHPDsyDDqSBjYXJyZWdhZGEgcXVhbmRvIGVzdGl2ZXIgcHLDs3hpbWEgZGUgc2VyIHJlbmRlcml6YWRhKVxuICAgKlxuICAgKiBAZGVmYXVsdCBgZWFnZXJgXG4gICAqL1xuICBASW5wdXQoJ3AtbG9hZGluZycpIGxvYWRpbmc6ICdlYWdlcicgfCAnbGF6eScgPSAnZWFnZXInO1xuXG4gIC8qKiBFdmVudG8gZGlzcGFyYWRvIGFvIGNsaWNhciBuYSBpbWFnZW0gZG8gKmF2YXRhciouICovXG4gIEBPdXRwdXQoJ3AtY2xpY2snKSBjbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHByaXZhdGUgX3NpemU6IHN0cmluZyA9ICdtZCc7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVGFtYW5obyBkZSBleGliacOnw6NvIGRvIGNvbXBvbmVudGUuXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGB4c2AgKDI0eDI0KVxuICAgKiAgLSBgc21gICgzMngzMilcbiAgICogIC0gYG1kYCAoNjR4NjQpXG4gICAqICAtIGBsZ2AgKDk2eDk2KVxuICAgKiAgLSBgeGxgICgxNDR4MTQ0KVxuICAgKlxuICAgKiBAZGVmYXVsdCBgbWRgXG4gICAqL1xuICBASW5wdXQoJ3Atc2l6ZScpIHNldCBzaXplKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zaXplID0gUE9fQVZBVEFSX1NJWkVTLmluY2x1ZGVzKHZhbHVlKSA/IHZhbHVlIDogUE9fQVZBVEFSX1NJWkVfREVGQVVMVDtcbiAgfVxuICBnZXQgc2l6ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9zaXplO1xuICB9XG5cbiAgZ2V0IGhhc0NsaWNrRXZlbnQoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5jbGljay5vYnNlcnZlcnMubGVuZ3RoO1xuICB9XG59XG4iXX0=