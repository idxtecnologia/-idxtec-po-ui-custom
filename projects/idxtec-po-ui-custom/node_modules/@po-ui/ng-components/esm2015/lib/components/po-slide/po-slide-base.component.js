import { __decorate } from "tslib";
import { Input, Directive } from '@angular/core';
import { InputBoolean } from '../../decorators';
import { convertToInt } from './../../utils/util';
const poSlideIntervalDefault = 4000;
/**
 * @description
 *
 * Componente de slide para visualização e controle de elementos de forma cíclica. Exibe um conjunto de imagens ou dados que permitem
 * customizar sua visualização utilizando a diretiva **[p-slide-content-template](/documentation/po-slide-content-template)**.
 *
 * #### Boas práticas:
 * - Utilizar imagens no slide, mesmo quando possui conteúdo personalizado.
 * - Evitar utilizar apenas um slide isolado, utilize pelo menos dois.
 * - Evitar utilizar mais de 5 slides, pois a ideia do componente é destacar apenas informações importantes.
 */
export class PoSlideBaseComponent {
    constructor() {
        /**
         * @optional
         *
         * @description
         *
         * Define a exibição das setas de navegação.
         *
         * @default `false`
         */
        this.hideArrows = false;
        this._interval = poSlideIntervalDefault;
    }
    /**
     * @optional
     *
     * @description
     * Altura do po-slide, caso seja slide com template customizado, não assume o valor `default`.
     *
     * @default `336`
     */
    set height(value) {
        this._height = convertToInt(value);
    }
    get height() {
        return this._height;
    }
    /**
     * @optional
     *
     * @description
     *
     * Valor em milissegundos que define o tempo de troca dos slides, caso o valor seja menor que `1000` os slides não trocam automaticamente.
     *
     * @default `4000`
     */
    set interval(value) {
        this._interval = convertToInt(value, poSlideIntervalDefault);
        this._interval >= 1000 ? this.startInterval() : this.cancelInterval();
    }
    get interval() {
        return this._interval;
    }
    /**
     * @description
     *
     * Array de imagens ou dados para o slide, pode ser de três formas:
     *
     * - Array implementando objetos da interface `PoSlideItem`:
     * ```
     * [{ image: '/assets/image-1', action: 'imageClick.bind(this)'}, { image: '/assets/image-2' }]
     * ```
     * - Array de `strings` com os caminhos das imagens:
     * ```
     * ['/assets/image-1', '/assets/image-2' ]
     * ```
     * - Array com lista de itens (para utilizar template):
     * ```
     * [{ label: '1', img: '/assets/image-1' }, { label: '2', img: '/assets/image-1' }]
     * ```
     *
     * > As setas de navegação e o controle com círculos apenas serão renderizados caso possua mais de um slide.
     */
    set slides(value) {
        this._slides = value;
        this.setSlideItems(value);
        if (value && value.length) {
            this.startSlide();
        }
    }
    get slides() {
        return this._slides;
    }
}
PoSlideBaseComponent.decorators = [
    { type: Directive }
];
PoSlideBaseComponent.propDecorators = {
    hideArrows: [{ type: Input, args: ['p-hide-arrows',] }],
    height: [{ type: Input, args: ['p-height',] }],
    interval: [{ type: Input, args: ['p-interval',] }],
    slides: [{ type: Input, args: ['p-slides',] }]
};
__decorate([
    InputBoolean()
], PoSlideBaseComponent.prototype, "hideArrows", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tc2xpZGUtYmFzZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL2NvbXBvbmVudHMvcG8tc2xpZGUvcG8tc2xpZGUtYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWpELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJbEQsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUM7QUFFcEM7Ozs7Ozs7Ozs7R0FVRztBQUVILE1BQU0sT0FBZ0Isb0JBQW9CO0lBRDFDO1FBRUU7Ozs7Ozs7O1dBUUc7UUFDcUMsZUFBVSxHQUFZLEtBQUssQ0FBQztRQUU1RCxjQUFTLEdBQVcsc0JBQXNCLENBQUM7SUE2RXJELENBQUM7SUF6RUM7Ozs7Ozs7T0FPRztJQUNILElBQXVCLE1BQU0sQ0FBQyxLQUFhO1FBQ3pDLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsSUFBeUIsUUFBUSxDQUFDLEtBQWE7UUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxZQUFZLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hFLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O09BbUJHO0lBQ0gsSUFBdUIsTUFBTSxDQUFDLEtBQXdDO1FBQ3BFLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFMUIsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDbkI7SUFDSCxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7OztZQWxGRixTQUFTOzs7eUJBV1AsS0FBSyxTQUFDLGVBQWU7cUJBY3JCLEtBQUssU0FBQyxVQUFVO3VCQWlCaEIsS0FBSyxTQUFDLFlBQVk7cUJBNkJsQixLQUFLLFNBQUMsVUFBVTs7QUE1RHVCO0lBQWYsWUFBWSxFQUFFO3dEQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgSW5wdXRCb29sZWFuIH0gZnJvbSAnLi4vLi4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBjb252ZXJ0VG9JbnQgfSBmcm9tICcuLy4uLy4uL3V0aWxzL3V0aWwnO1xuXG5pbXBvcnQgeyBQb1NsaWRlSXRlbSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1zbGlkZS1pdGVtLmludGVyZmFjZSc7XG5cbmNvbnN0IHBvU2xpZGVJbnRlcnZhbERlZmF1bHQgPSA0MDAwO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbXBvbmVudGUgZGUgc2xpZGUgcGFyYSB2aXN1YWxpemHDp8OjbyBlIGNvbnRyb2xlIGRlIGVsZW1lbnRvcyBkZSBmb3JtYSBjw61jbGljYS4gRXhpYmUgdW0gY29uanVudG8gZGUgaW1hZ2VucyBvdSBkYWRvcyBxdWUgcGVybWl0ZW1cbiAqIGN1c3RvbWl6YXIgc3VhIHZpc3VhbGl6YcOnw6NvIHV0aWxpemFuZG8gYSBkaXJldGl2YSAqKltwLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGVdKC9kb2N1bWVudGF0aW9uL3BvLXNsaWRlLWNvbnRlbnQtdGVtcGxhdGUpKiouXG4gKlxuICogIyMjIyBCb2FzIHByw6F0aWNhczpcbiAqIC0gVXRpbGl6YXIgaW1hZ2VucyBubyBzbGlkZSwgbWVzbW8gcXVhbmRvIHBvc3N1aSBjb250ZcO6ZG8gcGVyc29uYWxpemFkby5cbiAqIC0gRXZpdGFyIHV0aWxpemFyIGFwZW5hcyB1bSBzbGlkZSBpc29sYWRvLCB1dGlsaXplIHBlbG8gbWVub3MgZG9pcy5cbiAqIC0gRXZpdGFyIHV0aWxpemFyIG1haXMgZGUgNSBzbGlkZXMsIHBvaXMgYSBpZGVpYSBkbyBjb21wb25lbnRlIMOpIGRlc3RhY2FyIGFwZW5hcyBpbmZvcm1hw6fDtWVzIGltcG9ydGFudGVzLlxuICovXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBQb1NsaWRlQmFzZUNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIERlZmluZSBhIGV4aWJpw6fDo28gZGFzIHNldGFzIGRlIG5hdmVnYcOnw6NvLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgZmFsc2VgXG4gICAqL1xuICBASW5wdXQoJ3AtaGlkZS1hcnJvd3MnKSBASW5wdXRCb29sZWFuKCkgaGlkZUFycm93czogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIHByaXZhdGUgX2ludGVydmFsOiBudW1iZXIgPSBwb1NsaWRlSW50ZXJ2YWxEZWZhdWx0O1xuICBwcml2YXRlIF9oZWlnaHQ/OiBudW1iZXI7XG4gIHByaXZhdGUgX3NsaWRlczogQXJyYXk8UG9TbGlkZUl0ZW0gfCBzdHJpbmcgfCBhbnk+O1xuXG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsdHVyYSBkbyBwby1zbGlkZSwgY2FzbyBzZWphIHNsaWRlIGNvbSB0ZW1wbGF0ZSBjdXN0b21pemFkbywgbsOjbyBhc3N1bWUgbyB2YWxvciBgZGVmYXVsdGAuXG4gICAqXG4gICAqIEBkZWZhdWx0IGAzMzZgXG4gICAqL1xuICBASW5wdXQoJ3AtaGVpZ2h0Jykgc2V0IGhlaWdodCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5faGVpZ2h0ID0gY29udmVydFRvSW50KHZhbHVlKTtcbiAgfVxuXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5faGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogVmFsb3IgZW0gbWlsaXNzZWd1bmRvcyBxdWUgZGVmaW5lIG8gdGVtcG8gZGUgdHJvY2EgZG9zIHNsaWRlcywgY2FzbyBvIHZhbG9yIHNlamEgbWVub3IgcXVlIGAxMDAwYCBvcyBzbGlkZXMgbsOjbyB0cm9jYW0gYXV0b21hdGljYW1lbnRlLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgNDAwMGBcbiAgICovXG4gIEBJbnB1dCgncC1pbnRlcnZhbCcpIHNldCBpbnRlcnZhbCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5faW50ZXJ2YWwgPSBjb252ZXJ0VG9JbnQodmFsdWUsIHBvU2xpZGVJbnRlcnZhbERlZmF1bHQpO1xuICAgIHRoaXMuX2ludGVydmFsID49IDEwMDAgPyB0aGlzLnN0YXJ0SW50ZXJ2YWwoKSA6IHRoaXMuY2FuY2VsSW50ZXJ2YWwoKTtcbiAgfVxuXG4gIGdldCBpbnRlcnZhbCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgZGUgaW1hZ2VucyBvdSBkYWRvcyBwYXJhIG8gc2xpZGUsIHBvZGUgc2VyIGRlIHRyw6pzIGZvcm1hczpcbiAgICpcbiAgICogLSBBcnJheSBpbXBsZW1lbnRhbmRvIG9iamV0b3MgZGEgaW50ZXJmYWNlIGBQb1NsaWRlSXRlbWA6XG4gICAqIGBgYFxuICAgKiBbeyBpbWFnZTogJy9hc3NldHMvaW1hZ2UtMScsIGFjdGlvbjogJ2ltYWdlQ2xpY2suYmluZCh0aGlzKSd9LCB7IGltYWdlOiAnL2Fzc2V0cy9pbWFnZS0yJyB9XVxuICAgKiBgYGBcbiAgICogLSBBcnJheSBkZSBgc3RyaW5nc2AgY29tIG9zIGNhbWluaG9zIGRhcyBpbWFnZW5zOlxuICAgKiBgYGBcbiAgICogWycvYXNzZXRzL2ltYWdlLTEnLCAnL2Fzc2V0cy9pbWFnZS0yJyBdXG4gICAqIGBgYFxuICAgKiAtIEFycmF5IGNvbSBsaXN0YSBkZSBpdGVucyAocGFyYSB1dGlsaXphciB0ZW1wbGF0ZSk6XG4gICAqIGBgYFxuICAgKiBbeyBsYWJlbDogJzEnLCBpbWc6ICcvYXNzZXRzL2ltYWdlLTEnIH0sIHsgbGFiZWw6ICcyJywgaW1nOiAnL2Fzc2V0cy9pbWFnZS0xJyB9XVxuICAgKiBgYGBcbiAgICpcbiAgICogPiBBcyBzZXRhcyBkZSBuYXZlZ2HDp8OjbyBlIG8gY29udHJvbGUgY29tIGPDrXJjdWxvcyBhcGVuYXMgc2Vyw6NvIHJlbmRlcml6YWRvcyBjYXNvIHBvc3N1YSBtYWlzIGRlIHVtIHNsaWRlLlxuICAgKi9cbiAgQElucHV0KCdwLXNsaWRlcycpIHNldCBzbGlkZXModmFsdWU6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55Pikge1xuICAgIHRoaXMuX3NsaWRlcyA9IHZhbHVlO1xuICAgIHRoaXMuc2V0U2xpZGVJdGVtcyh2YWx1ZSk7XG5cbiAgICBpZiAodmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICB0aGlzLnN0YXJ0U2xpZGUoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgc2xpZGVzKCk6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX3NsaWRlcztcbiAgfVxuXG4gIGFic3RyYWN0IHNldFNsaWRlSGVpZ2h0KGhlaWdodDogbnVtYmVyKTogdm9pZDtcblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgY2FuY2VsSW50ZXJ2YWwoKTogdm9pZDtcbiAgcHJvdGVjdGVkIGFic3RyYWN0IHNldFNsaWRlSXRlbXModmFsdWU6IEFycmF5PFBvU2xpZGVJdGVtIHwgc3RyaW5nIHwgYW55Pik6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdGFydFNsaWRlKCk6IHZvaWQ7XG4gIHByb3RlY3RlZCBhYnN0cmFjdCBzdGFydEludGVydmFsKCk6IHZvaWQ7XG59XG4iXX0=