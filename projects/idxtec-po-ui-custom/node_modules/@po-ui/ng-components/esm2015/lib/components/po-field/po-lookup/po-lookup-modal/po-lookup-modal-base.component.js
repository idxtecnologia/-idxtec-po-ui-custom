import { __decorate } from "tslib";
import { EventEmitter, Input, Output, ViewChild, Directive, ChangeDetectorRef } from '@angular/core';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { InputBoolean } from '../../../../decorators';
import { isTypeof } from '../../../../utils/util';
import { poLocaleDefault } from '../../../../services/po-language/po-language.constant';
import { PoModalComponent } from '../../../../components/po-modal/po-modal.component';
import { PoTableColumnSortType } from '../../../po-table';
import { poTableLiteralsDefault } from '../../../po-table/po-table-base.component';
import { PoLanguageService } from '../../../../services/po-language/po-language.service';
import { PoTableComponent } from './../../../po-table/po-table.component';
export const poLookupLiteralsDefault = {
    en: {
        modalPrimaryActionLabel: 'Select',
        modalSecondaryActionLabel: 'Cancel',
        modalPlaceholder: 'Search',
        modalTitle: 'Select a record',
        modalTableNoColumns: poTableLiteralsDefault.en.noColumns,
        modalTableNoData: poTableLiteralsDefault.en.noData,
        modalTableLoadingData: poTableLiteralsDefault.en.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.en.loadMoreData,
        modalAdvancedSearch: 'Advanced search',
        modalAdvancedSearchTitle: 'Advanced search',
        modalAdvancedSearchPrimaryActionLabel: 'Filter',
        modalAdvancedSearchSecondaryActionLabel: 'Return',
        modalDisclaimerGroupTitle: 'Presenting results filtered by:'
    },
    es: {
        modalPrimaryActionLabel: 'Seleccionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Buscar',
        modalTitle: 'Seleccione un registro',
        modalTableNoColumns: poTableLiteralsDefault.es.noColumns,
        modalTableNoData: poTableLiteralsDefault.es.noData,
        modalTableLoadingData: poTableLiteralsDefault.es.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.es.loadMoreData,
        modalAdvancedSearch: 'Búsqueda Avanzada',
        modalAdvancedSearchTitle: 'Búsqueda Avanzada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Vuelve',
        modalDisclaimerGroupTitle: 'Presentar resultados filtrados por:'
    },
    pt: {
        modalPrimaryActionLabel: 'Selecionar',
        modalSecondaryActionLabel: 'Cancelar',
        modalPlaceholder: 'Pesquisar',
        modalTitle: 'Selecione um registro',
        modalTableNoColumns: poTableLiteralsDefault.pt.noColumns,
        modalTableNoData: poTableLiteralsDefault.pt.noData,
        modalTableLoadingData: poTableLiteralsDefault.pt.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.pt.loadMoreData,
        modalAdvancedSearch: 'Busca avançada',
        modalAdvancedSearchTitle: 'Busca Avançada',
        modalAdvancedSearchPrimaryActionLabel: 'Filtrar',
        modalAdvancedSearchSecondaryActionLabel: 'Voltar',
        modalDisclaimerGroupTitle: 'Apresentando resultados filtrados por:'
    },
    ru: {
        modalPrimaryActionLabel: 'выбирать',
        modalSecondaryActionLabel: 'отменить',
        modalPlaceholder: 'поиск',
        modalTitle: 'Выберите запись',
        modalTableNoColumns: poTableLiteralsDefault.ru.noColumns,
        modalTableNoData: poTableLiteralsDefault.ru.noData,
        modalTableLoadingData: poTableLiteralsDefault.ru.loadingData,
        modalTableLoadMoreData: poTableLiteralsDefault.ru.loadMoreData,
        modalAdvancedSearch: 'Расширенный поиск',
        modalAdvancedSearchTitle: 'Расширенный поиск',
        modalAdvancedSearchPrimaryActionLabel: 'Фильтр',
        modalAdvancedSearchSecondaryActionLabel: 'Вернись',
        modalDisclaimerGroupTitle: 'Представление результатов отфильтровано по:'
    }
};
/**
 * @docsPrivate
 *
 * Classe base do componente Po Lookup Modal.
 */
export class PoLookupModalBaseComponent {
    constructor(languageService, changeDetector) {
        this.changeDetector = changeDetector;
        /** Se verdadeiro, ativa a funcionalidade de scroll infinito para a tabela exibida no retorno da consulta. */
        this.infiniteScroll = false;
        /** Se verdadeiro, ativa a funcionalidade de multipla seleção. */
        this.multiple = false;
        /** Evento utilizado ao selecionar um registro da tabela. */
        this.model = new EventEmitter();
        this.hasNext = true;
        this.isLoading = false;
        this.page = 1;
        this.pageSize = 10;
        this.searchValue = '';
        // Propriedade da modal de busca avançada:
        this.advancedFilterModalTitle = '';
        this.dynamicFormValue = {};
        this.isAdvancedFilter = false;
        this.selecteds = [];
        this.language = poLocaleDefault;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.primaryAction = {
            action: () => {
                const selectedsItems = this.selecteds;
                this.model.emit(selectedsItems);
                this.poModal.close();
            },
            label: this.literals.modalPrimaryActionLabel
        };
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.secondaryAction = {
            action: () => {
                this.model.emit(null);
                this.poModal.close();
            },
            label: this.literals.modalSecondaryActionLabel
        };
        this.language = languageService.getShortLanguage();
    }
    /** Objeto com as literais usadas no `po-lookup-modal`. */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poLookupLiteralsDefault[poLocaleDefault]), poLookupLiteralsDefault[this.language]), value);
            if (value.modalTitle) {
                this.title = this.literals.modalTitle;
            }
        }
        else {
            this._literals = poLookupLiteralsDefault[this.language];
        }
        this.primaryAction.label = this.literals.modalPrimaryActionLabel;
        this.secondaryAction.label = this.literals.modalSecondaryActionLabel;
        this.setTableLiterals();
    }
    get literals() {
        return this._literals || poLookupLiteralsDefault[this.language];
    }
    /** Título da modal. */
    set title(value) {
        this._title = isTypeof(value, 'string') ? value : this.literals.modalTitle;
    }
    get title() {
        return this._title;
    }
    ngOnDestroy() {
        if (this.filterSubscription) {
            this.filterSubscription.unsubscribe();
        }
        if (this.searchSubscription) {
            this.searchSubscription.unsubscribe();
        }
        if (this.showMoreSubscription) {
            this.showMoreSubscription.unsubscribe();
        }
    }
    ngOnInit() {
        this.setAdvancedFilterModalProperties();
        this.initializeData();
        this.setTableLiterals();
    }
    createDisclaimer() {
        this.disclaimerGroup.disclaimers = [];
        this.searchValue = '';
        for (const [key, value] of Object.entries(this.dynamicFormValue)) {
            this.addDisclaimer(value, key);
        }
        if (!Object.values(this.dynamicFormValue).some(v => v !== null && typeof v !== 'undefined')) {
            this.initializeData();
        }
    }
    addDisclaimer(value, property) {
        this.disclaimer = { property: property };
        this.disclaimer.value = value;
        this.disclaimerGroup.disclaimers = [...this.disclaimerGroup.disclaimers, this.disclaimer];
    }
    onChangeDisclaimerGroup() {
        if (!this.searchValue) {
            this.isLoading = true;
            this.searchValue = '';
            this.searchFilteredItems();
        }
    }
    search() {
        this.page = 1;
        if (this.searchValue) {
            this.isLoading = true;
            this.disclaimerGroup.disclaimers = [];
            this.searchFilteredItems();
        }
        else {
            this.initializeData();
        }
    }
    searchFilteredItems() {
        this.searchSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.setLookupResponseProperties();
            return throwError(error);
        }))
            .subscribe((data) => this.setLookupResponseProperties(data), () => { });
    }
    showMoreEvent() {
        this.page++;
        this.isLoading = true;
        this.showMoreSubscription = this.getFilteredItems(this.searchValue)
            .pipe(catchError(error => {
            this.hasNext = false;
            this.isLoading = false;
            return throwError(error);
        }))
            .subscribe((data) => {
            this.items = [...this.items, ...data.items];
            this.hasNext = data.hasNext;
            this.isLoading = false;
            this.changeDetector.detectChanges();
            this.setSelectedItems();
        }, () => { });
    }
    //Método responsável por selecionar as linhas quando abre o modal.
    setSelectedItems() {
        this.selecteds.forEach(selectedItem => this.poTable.selectRowItem(item => item[this.fieldValue] === selectedItem.value));
    }
    //Método responsável por criar os disclaimers quando abre o modal.
    setDisclaimersItems() {
        if (this.selectedItems && !Array.isArray(this.selectedItems)) {
            this.selecteds = [{ value: this.selectedItems }];
            return;
        }
        if (this.selectedItems && this.selectedItems.length) {
            this.selecteds = [...this.selectedItems];
        }
    }
    setAdvancedFilterModalProperties() {
        this.advancedFilterModalTitle = this.literals.modalAdvancedSearchTitle;
        this.disclaimerGroup = {
            title: this.literals.modalDisclaimerGroupTitle,
            disclaimers: []
        };
        this.primaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
                this.createDisclaimer();
            },
            label: this.literals.modalAdvancedSearchPrimaryActionLabel
        };
        this.secondaryActionAdvancedFilter = {
            action: () => {
                this.destroyDynamicForm();
                this.isAdvancedFilter = false;
            },
            label: this.literals.modalAdvancedSearchSecondaryActionLabel
        };
    }
    getAdvancedFilters(advancedParams) {
        if (advancedParams && advancedParams.length > 0) {
            const filters = {};
            let validatedAdvacendFilters;
            advancedParams.forEach((filter) => {
                filters[filter.property] = filter.value instanceof Array ? filter.value.join() : filter.value;
                validatedAdvacendFilters = Object.assign(Object.assign({}, validatedAdvacendFilters), filters);
            });
            return validatedAdvacendFilters;
        }
        return undefined;
    }
    getFilteredItems(filter) {
        const filteredParams = this.getFilteredParams(filter);
        return this.filterService.getFilteredItems(filteredParams);
    }
    getFilteredParams(filter) {
        const { page, pageSize, filterParams, sort } = this;
        const filteredParams = {};
        const order = this.getOrderParam(sort);
        const advancedFilters = this.getAdvancedFilters(this.disclaimerGroup.disclaimers);
        const params = { filter, page, pageSize, order, filterParams, advancedFilters };
        for (const key in params) {
            if (params.hasOwnProperty(key) && params[key] !== undefined) {
                filteredParams[key] = params[key];
            }
        }
        return filteredParams;
    }
    getOrderParam(sort = { type: undefined }) {
        const { column, type } = sort;
        if (!column) {
            return;
        }
        if (type === PoTableColumnSortType.Descending) {
            return `-${column.property}`;
        }
        return `${column.property}`;
    }
    initializeData() {
        this.isLoading = true;
        this.filterSubscription = this.getFilteredItems('').subscribe(data => {
            this.setLookupResponseProperties(data);
        });
    }
    setLookupResponseProperties(data) {
        var _a, _b;
        this.items = (_a = data === null || data === void 0 ? void 0 : data.items) !== null && _a !== void 0 ? _a : [];
        this.hasNext = (_b = data === null || data === void 0 ? void 0 : data.hasNext) !== null && _b !== void 0 ? _b : false;
        this.isLoading = false;
        this.changeDetector.detectChanges();
        this.setDisclaimersItems();
        this.setSelectedItems();
    }
    setTableLiterals() {
        this.tableLiterals = {
            'noColumns': this.literals.modalTableNoColumns,
            'noData': this.literals.modalTableNoData,
            'loadingData': this.literals.modalTableLoadingData,
            'loadMoreData': this.literals.modalTableLoadMoreData
        };
    }
}
PoLookupModalBaseComponent.decorators = [
    { type: Directive }
];
PoLookupModalBaseComponent.ctorParameters = () => [
    { type: PoLanguageService },
    { type: ChangeDetectorRef }
];
PoLookupModalBaseComponent.propDecorators = {
    poModal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }],
    poTable: [{ type: ViewChild, args: [PoTableComponent, { static: true },] }],
    advancedFilters: [{ type: Input, args: ['p-advanced-filters',] }],
    columns: [{ type: Input, args: ['p-columns',] }],
    items: [{ type: Input, args: ['p-items',] }],
    filterService: [{ type: Input, args: ['p-filter-service',] }],
    filterParams: [{ type: Input, args: ['p-filter-params',] }],
    infiniteScroll: [{ type: Input, args: ['p-infinite-scroll',] }],
    multiple: [{ type: Input, args: ['p-multiple',] }],
    model: [{ type: Output, args: ['p-change-model',] }],
    selectedItems: [{ type: Input, args: ['p-selected-items',] }],
    fieldLabel: [{ type: Input, args: ['p-field-label',] }],
    fieldValue: [{ type: Input, args: ['p-field-value',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    title: [{ type: Input, args: ['p-title',] }]
};
__decorate([
    InputBoolean()
], PoLookupModalBaseComponent.prototype, "infiniteScroll", void 0);
__decorate([
    InputBoolean()
], PoLookupModalBaseComponent.prototype, "multiple", void 0);
//# sourceMappingURL=data:application/json;base64,