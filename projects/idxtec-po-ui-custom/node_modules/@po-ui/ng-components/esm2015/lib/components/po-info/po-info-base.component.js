import { Input, Directive } from '@angular/core';
import { PoInfoOrientation } from './po-info-orietation.enum';
const poInfoOrientationDefault = PoInfoOrientation.Vertical;
export class PoInfoBaseComponent {
    constructor() {
        this.poInfoOrientation = PoInfoOrientation;
        this._orientation = poInfoOrientationDefault;
    }
    /**
     * @optional
     *
     * @description
     *
     * Quantidade de [colunas](/guides/grid-system) usadas para a exibição da `p-label` quando o componente for
     * utilizado na orientação horizontal.
     *
     * Valores válidos:
     *  - `[1 .. 11]`
     *
     * > A propriedade `p-value` recebe o número de colunas restantes, por exemplo, se definido 3 colunas a mesma assume 9 colunas.
     */
    set labelSize(value) {
        if (isNaN(parseInt(value, 10))) {
            this._labelSize = undefined;
        }
        else {
            value = parseInt(value, 10);
            this._labelSize = value < 1 || value > 11 ? undefined : value;
        }
    }
    get labelSize() {
        return this._labelSize;
    }
    /**
     * @optional
     *
     * @description
     *
     * Define o layout de exibição.
     *
     * > Quando definido na horizontal, pode-se utilizar a propriedade `p-label-size` para um maior controle das informações exibidas.
     *
     * @default `vertical`
     */
    set orientation(value) {
        this._orientation = Object.values(PoInfoOrientation).includes(value) ? value : poInfoOrientationDefault;
    }
    get orientation() {
        return this._orientation;
    }
}
PoInfoBaseComponent.decorators = [
    { type: Directive }
];
PoInfoBaseComponent.propDecorators = {
    label: [{ type: Input, args: ['p-label',] }],
    url: [{ type: Input, args: ['p-url',] }],
    value: [{ type: Input, args: ['p-value',] }],
    labelSize: [{ type: Input, args: ['p-label-size',] }],
    orientation: [{ type: Input, args: ['p-orientation',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taW5mby1iYXNlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3VpL3NyYy9saWIvY29tcG9uZW50cy9wby1pbmZvL3BvLWluZm8tYmFzZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFOUQsTUFBTSx3QkFBd0IsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7QUFHNUQsTUFBTSxPQUFPLG1CQUFtQjtJQURoQztRQWlCa0Isc0JBQWlCLEdBQUcsaUJBQWlCLENBQUM7UUFHOUMsaUJBQVksR0FBc0Isd0JBQXdCLENBQUM7SUE4Q3JFLENBQUM7SUE1Q0M7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsSUFBMkIsU0FBUyxDQUFDLEtBQWE7UUFDaEQsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFNLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFO1lBQ25DLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1NBQzdCO2FBQU07WUFDTCxLQUFLLEdBQUcsUUFBUSxDQUFNLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUVqQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssR0FBRyxDQUFDLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDL0Q7SUFDSCxDQUFDO0lBRUQsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7Ozs7Ozs7OztPQVVHO0lBQ0gsSUFBNEIsV0FBVyxDQUFDLEtBQXdCO1FBQzlELElBQUksQ0FBQyxZQUFZLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQztJQUNqSCxDQUFDO0lBQ0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7OztZQWpFRixTQUFTOzs7b0JBR1AsS0FBSyxTQUFDLFNBQVM7a0JBU2YsS0FBSyxTQUFDLE9BQU87b0JBR2IsS0FBSyxTQUFDLFNBQVM7d0JBb0JmLEtBQUssU0FBQyxjQUFjOzBCQXlCcEIsS0FBSyxTQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFBvSW5mb09yaWVudGF0aW9uIH0gZnJvbSAnLi9wby1pbmZvLW9yaWV0YXRpb24uZW51bSc7XG5cbmNvbnN0IHBvSW5mb09yaWVudGF0aW9uRGVmYXVsdCA9IFBvSW5mb09yaWVudGF0aW9uLlZlcnRpY2FsO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBjbGFzcyBQb0luZm9CYXNlQ29tcG9uZW50IHtcbiAgLyoqIFZhbG9yIGRvIHLDs3R1bG8gYSBzZXIgZXhpYmlkby4gKi9cbiAgQElucHV0KCdwLWxhYmVsJykgbGFiZWw6IHN0cmluZztcblxuICAvKipcbiAgICogQW8gaW5mb3JtYXIgdW1hIFVSTCwgbyBjb250ZcO6ZG8gc2Vyw6EgZXhpYmlkbyBuYSBmb3JtYSBkZSB1bSAqbGluayogZSBhbyBzZXIgY2xpY2FkbyBzZXLDoSByZWRpcmVjaW9uYWRvIHBhcmEgYSBVUkwgaW5mb3JtYWRhLlxuICAgKlxuICAgKiA+IENhc28gaW5mb3JtYXIgYGh0dHA6Ly9gIHNlcsOhIGFiZXJ0byB1bWEgbm92YSBhYmEuXG4gICAqIENhc28gaW5mb3JtYXIgdW0gY2FtaW5obyByZWxhdGl2bywgZXhlbXBsbzogYC9jdXN0b21lcnNgLCBzZXLDoSBhYmVydG8gbmEgYWJhIGF0dWFsLlxuICAgKlxuICAgKi9cbiAgQElucHV0KCdwLXVybCcpIHVybD86IHN0cmluZztcblxuICAvKiogVmFsb3IgZG8gY29udGXDumRvIGEgc2VyIGV4aWJpZG8uICovXG4gIEBJbnB1dCgncC12YWx1ZScpIHZhbHVlPzogc3RyaW5nO1xuXG4gIHB1YmxpYyByZWFkb25seSBwb0luZm9PcmllbnRhdGlvbiA9IFBvSW5mb09yaWVudGF0aW9uO1xuXG4gIHByaXZhdGUgX2xhYmVsU2l6ZTogbnVtYmVyO1xuICBwcml2YXRlIF9vcmllbnRhdGlvbjogUG9JbmZvT3JpZW50YXRpb24gPSBwb0luZm9PcmllbnRhdGlvbkRlZmF1bHQ7XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUXVhbnRpZGFkZSBkZSBbY29sdW5hc10oL2d1aWRlcy9ncmlkLXN5c3RlbSkgdXNhZGFzIHBhcmEgYSBleGliacOnw6NvIGRhIGBwLWxhYmVsYCBxdWFuZG8gbyBjb21wb25lbnRlIGZvclxuICAgKiB1dGlsaXphZG8gbmEgb3JpZW50YcOnw6NvIGhvcml6b250YWwuXG4gICAqXG4gICAqIFZhbG9yZXMgdsOhbGlkb3M6XG4gICAqICAtIGBbMSAuLiAxMV1gXG4gICAqXG4gICAqID4gQSBwcm9wcmllZGFkZSBgcC12YWx1ZWAgcmVjZWJlIG8gbsO6bWVybyBkZSBjb2x1bmFzIHJlc3RhbnRlcywgcG9yIGV4ZW1wbG8sIHNlIGRlZmluaWRvIDMgY29sdW5hcyBhIG1lc21hIGFzc3VtZSA5IGNvbHVuYXMuXG4gICAqL1xuICBASW5wdXQoJ3AtbGFiZWwtc2l6ZScpIHNldCBsYWJlbFNpemUodmFsdWU6IG51bWJlcikge1xuICAgIGlmIChpc05hTihwYXJzZUludCg8YW55PnZhbHVlLCAxMCkpKSB7XG4gICAgICB0aGlzLl9sYWJlbFNpemUgPSB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gcGFyc2VJbnQoPGFueT52YWx1ZSwgMTApO1xuXG4gICAgICB0aGlzLl9sYWJlbFNpemUgPSB2YWx1ZSA8IDEgfHwgdmFsdWUgPiAxMSA/IHVuZGVmaW5lZCA6IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGdldCBsYWJlbFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fbGFiZWxTaXplO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogRGVmaW5lIG8gbGF5b3V0IGRlIGV4aWJpw6fDo28uXG4gICAqXG4gICAqID4gUXVhbmRvIGRlZmluaWRvIG5hIGhvcml6b250YWwsIHBvZGUtc2UgdXRpbGl6YXIgYSBwcm9wcmllZGFkZSBgcC1sYWJlbC1zaXplYCBwYXJhIHVtIG1haW9yIGNvbnRyb2xlIGRhcyBpbmZvcm1hw6fDtWVzIGV4aWJpZGFzLlxuICAgKlxuICAgKiBAZGVmYXVsdCBgdmVydGljYWxgXG4gICAqL1xuICBASW5wdXQoJ3Atb3JpZW50YXRpb24nKSBzZXQgb3JpZW50YXRpb24odmFsdWU6IFBvSW5mb09yaWVudGF0aW9uKSB7XG4gICAgdGhpcy5fb3JpZW50YXRpb24gPSAoPGFueT5PYmplY3QpLnZhbHVlcyhQb0luZm9PcmllbnRhdGlvbikuaW5jbHVkZXModmFsdWUpID8gdmFsdWUgOiBwb0luZm9PcmllbnRhdGlvbkRlZmF1bHQ7XG4gIH1cbiAgZ2V0IG9yaWVudGF0aW9uKCk6IFBvSW5mb09yaWVudGF0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5fb3JpZW50YXRpb247XG4gIH1cbn1cbiJdfQ==