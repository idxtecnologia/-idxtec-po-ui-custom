import { Component, EventEmitter, ViewChild } from '@angular/core';
import { PoModalComponent } from '../../../components/po-modal/po-modal.component';
import { poHttpInterceptorDetailLiteralsDefault } from './po-http-interceptor-detail-literals.interface';
import { PoLanguageService } from '../../../services/po-language/po-language.service';
export const colors = { success: 'color-11', error: 'color-07', warning: 'color-08', info: '' };
/**
 * @docsPrivate
 *
 * @description
 *
 * Componente para a modal de detalhes exibida pelo interceptor
 */
export class PoHttpInterceptorDetailComponent {
    constructor(languageService) {
        this.languageService = languageService;
        this.closed = new EventEmitter();
        this.details = [];
        this.language = this.languageService.getShortLanguage();
        this.literals = poHttpInterceptorDetailLiteralsDefault[this.language];
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.primaryAction = {
            action: () => this.close(),
            label: this.literals.closeButton
        };
    }
    set detail(details) {
        if (details && details.length) {
            this.details = this.filterByValidDetails(details);
        }
        this.title = this.formatTitle(this.details);
    }
    close() {
        this.modal.close();
        this.closed.emit();
    }
    formatDetailItemTitle(detail) {
        return detail.detailTitle
            ? detail.detailTitle
            : detail.code
                ? `${detail.code} - ${detail.message}`
                : detail.message;
    }
    open() {
        this.modal.open();
    }
    typeColor(type) {
        return colors[type];
    }
    typeValue(type) {
        return poHttpInterceptorDetailLiteralsDefault[this.language][type] || type;
    }
    addValidDetail(newDetails, detail) {
        return detail.message ? newDetails.concat(this.getValidDetailProperties(detail)) : newDetails;
    }
    getValidDetailProperties({ code, message, detailedMessage, type, detailTitle }) {
        return detailTitle
            ? { code, message, detailedMessage, type, detailTitle }
            : { code, message, detailedMessage, type };
    }
    filterByValidDetails(details) {
        return details.reduce((newDetails, detail) => this.addValidDetail(newDetails, detail), []);
    }
    formatTitle(details) {
        return details.length > 1
            ? `${this.literals.details} (${details.length})`
            : details.length === 1
                ? this.formatDetailItemTitle(details[0])
                : this.literals.detail;
    }
}
PoHttpInterceptorDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-http-interceptor-detail',
                template: "<po-modal p-hide-close p-size=\"lg\" [p-primary-action]=\"primaryAction\" [p-title]=\"title\">\n  <div class=\"po-row\">\n    <po-accordion class=\"po-md-12 po-mt-1 po-mb-1\" *ngIf=\"details.length > 1; else elseBlock\">\n      <po-accordion-item *ngFor=\"let detail of details\" [p-label]=\"formatDetailItemTitle(detail)\">\n        <ng-template [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{detail}\"></ng-template>\n      </po-accordion-item>\n    </po-accordion>\n  </div>\n</po-modal>\n\n<ng-template #elseBlock>\n  <ng-container [ngTemplateOutlet]=\"body\" [ngTemplateOutletContext]=\"{ detail: details[0] || {} }\"></ng-container>\n</ng-template>\n\n<ng-template #body let-detail=\"detail\">\n  <div *ngIf=\"detail.type\" class=\"po-row po-mb-1\">\n    <po-tag [p-color]=\"typeColor(detail.type)\" [p-value]=\"typeValue(detail.type)\"></po-tag>\n  </div>\n\n  <p *ngIf=\"detail.detailTitle\">\n    <strong>{{ detail.code }}</strong>\n  </p>\n\n  <div class=\"po-row\">\n    <p>{{ detail.detailedMessage }}</p>\n  </div>\n</ng-template>\n"
            },] }
];
PoHttpInterceptorDetailComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoHttpInterceptorDetailComponent.propDecorators = {
    modal: [{ type: ViewChild, args: [PoModalComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8taHR0cC1pbnRlcmNlcHRvci1kZXRhaWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9pbnRlcmNlcHRvcnMvcG8taHR0cC1pbnRlcmNlcHRvci9wby1odHRwLWludGVyY2VwdG9yLWRldGFpbC9wby1odHRwLWludGVyY2VwdG9yLWRldGFpbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBR25GLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLGlEQUFpRCxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBRXRGLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBRyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsQ0FBQztBQUVoRzs7Ozs7O0dBTUc7QUFLSCxNQUFNLE9BQU8sZ0NBQWdDO0lBZ0IzQyxZQUFvQixlQUFrQztRQUFsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBbUI7UUFidEQsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFDakMsWUFBTyxHQUFtQyxFQUFFLENBQUM7UUFHckMsYUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUNuRCxhQUFRLEdBQUcsc0NBQXNDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXpFLDhEQUE4RDtRQUM5RCxrQkFBYSxHQUFrQjtZQUM3QixNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtB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QUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9Nb2RhbEFjdGlvbiB9IGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvcG8tbW9kYWwvcG8tbW9kYWwtYWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb01vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9wby1tb2RhbC9wby1tb2RhbC5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBQb0h0dHBJbnRlcmNlcHRvckRldGFpbCB9IGZyb20gJy4vcG8taHR0cC1pbnRlcmNlcHRvci1kZXRhaWwuaW50ZXJmYWNlJztcbmltcG9ydCB7IHBvSHR0cEludGVyY2VwdG9yRGV0YWlsTGl0ZXJhbHNEZWZhdWx0IH0gZnJvbSAnLi9wby1odHRwLWludGVyY2VwdG9yLWRldGFpbC1saXRlcmFscy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9wby1sYW5ndWFnZS9wby1sYW5ndWFnZS5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IGNvbG9ycyA9IHsgc3VjY2VzczogJ2NvbG9yLTExJywgZXJyb3I6ICdjb2xvci0wNycsIHdhcm5pbmc6ICdjb2xvci0wOCcsIGluZm86ICcnIH07XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogQ29tcG9uZW50ZSBwYXJhIGEgbW9kYWwgZGUgZGV0YWxoZXMgZXhpYmlkYSBwZWxvIGludGVyY2VwdG9yXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLWh0dHAtaW50ZXJjZXB0b3ItZGV0YWlsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLWh0dHAtaW50ZXJjZXB0b3ItZGV0YWlsLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBQb0h0dHBJbnRlcmNlcHRvckRldGFpbENvbXBvbmVudCB7XG4gIEBWaWV3Q2hpbGQoUG9Nb2RhbENvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgbW9kYWw6IFBvTW9kYWxDb21wb25lbnQ7XG5cbiAgY2xvc2VkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG4gIGRldGFpbHM6IEFycmF5PFBvSHR0cEludGVyY2VwdG9yRGV0YWlsPiA9IFtdO1xuICB0aXRsZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgbGFuZ3VhZ2UgPSB0aGlzLmxhbmd1YWdlU2VydmljZS5nZXRTaG9ydExhbmd1YWdlKCk7XG4gIHByaXZhdGUgbGl0ZXJhbHMgPSBwb0h0dHBJbnRlcmNlcHRvckRldGFpbExpdGVyYWxzRGVmYXVsdFt0aGlzLmxhbmd1YWdlXTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L21lbWJlci1vcmRlcmluZ1xuICBwcmltYXJ5QWN0aW9uOiBQb01vZGFsQWN0aW9uID0ge1xuICAgIGFjdGlvbjogKCkgPT4gdGhpcy5jbG9zZSgpLFxuICAgIGxhYmVsOiB0aGlzLmxpdGVyYWxzLmNsb3NlQnV0dG9uXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYW5ndWFnZVNlcnZpY2U6IFBvTGFuZ3VhZ2VTZXJ2aWNlKSB7fVxuXG4gIHNldCBkZXRhaWwoZGV0YWlsczogQXJyYXk8UG9IdHRwSW50ZXJjZXB0b3JEZXRhaWw+KSB7XG4gICAgaWYgKGRldGFpbHMgJiYgZGV0YWlscy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZGV0YWlscyA9IHRoaXMuZmlsdGVyQnlWYWxpZERldGFpbHMoZGV0YWlscyk7XG4gICAgfVxuXG4gICAgdGhpcy50aXRsZSA9IHRoaXMuZm9ybWF0VGl0bGUodGhpcy5kZXRhaWxzKTtcbiAgfVxuXG4gIGNsb3NlKCkge1xuICAgIHRoaXMubW9kYWwuY2xvc2UoKTtcbiAgICB0aGlzLmNsb3NlZC5lbWl0KCk7XG4gIH1cblxuICBmb3JtYXREZXRhaWxJdGVtVGl0bGUoZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kZXRhaWxUaXRsZVxuICAgICAgPyBkZXRhaWwuZGV0YWlsVGl0bGVcbiAgICAgIDogZGV0YWlsLmNvZGVcbiAgICAgID8gYCR7ZGV0YWlsLmNvZGV9IC0gJHtkZXRhaWwubWVzc2FnZX1gXG4gICAgICA6IGRldGFpbC5tZXNzYWdlO1xuICB9XG5cbiAgb3BlbigpIHtcbiAgICB0aGlzLm1vZGFsLm9wZW4oKTtcbiAgfVxuXG4gIHR5cGVDb2xvcih0eXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjb2xvcnNbdHlwZV07XG4gIH1cblxuICB0eXBlVmFsdWUodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gcG9IdHRwSW50ZXJjZXB0b3JEZXRhaWxMaXRlcmFsc0RlZmF1bHRbdGhpcy5sYW5ndWFnZV1bdHlwZV0gfHwgdHlwZTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkVmFsaWREZXRhaWwobmV3RGV0YWlsczogQXJyYXk8UG9IdHRwSW50ZXJjZXB0b3JEZXRhaWw+LCBkZXRhaWw6IFBvSHR0cEludGVyY2VwdG9yRGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5tZXNzYWdlID8gbmV3RGV0YWlscy5jb25jYXQodGhpcy5nZXRWYWxpZERldGFpbFByb3BlcnRpZXMoZGV0YWlsKSkgOiBuZXdEZXRhaWxzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRWYWxpZERldGFpbFByb3BlcnRpZXMoeyBjb2RlLCBtZXNzYWdlLCBkZXRhaWxlZE1lc3NhZ2UsIHR5cGUsIGRldGFpbFRpdGxlIH06IFBvSHR0cEludGVyY2VwdG9yRGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbFRpdGxlXG4gICAgICA/IHsgY29kZSwgbWVzc2FnZSwgZGV0YWlsZWRNZXNzYWdlLCB0eXBlLCBkZXRhaWxUaXRsZSB9XG4gICAgICA6IHsgY29kZSwgbWVzc2FnZSwgZGV0YWlsZWRNZXNzYWdlLCB0eXBlIH07XG4gIH1cblxuICBwcml2YXRlIGZpbHRlckJ5VmFsaWREZXRhaWxzKGRldGFpbHM6IEFycmF5PFBvSHR0cEludGVyY2VwdG9yRGV0YWlsPikge1xuICAgIHJldHVybiBkZXRhaWxzLnJlZHVjZSgobmV3RGV0YWlscywgZGV0YWlsKSA9PiB0aGlzLmFkZFZhbGlkRGV0YWlsKG5ld0RldGFpbHMsIGRldGFpbCksIFtdKTtcbiAgfVxuXG4gIHByaXZhdGUgZm9ybWF0VGl0bGUoZGV0YWlsczogQXJyYXk8UG9IdHRwSW50ZXJjZXB0b3JEZXRhaWw+KSB7XG4gICAgcmV0dXJuIGRldGFpbHMubGVuZ3RoID4gMVxuICAgICAgPyBgJHt0aGlzLmxpdGVyYWxzLmRldGFpbHN9ICgke2RldGFpbHMubGVuZ3RofSlgXG4gICAgICA6IGRldGFpbHMubGVuZ3RoID09PSAxXG4gICAgICA/IHRoaXMuZm9ybWF0RGV0YWlsSXRlbVRpdGxlKGRldGFpbHNbMF0pXG4gICAgICA6IHRoaXMubGl0ZXJhbHMuZGV0YWlsO1xuICB9XG59XG4iXX0=