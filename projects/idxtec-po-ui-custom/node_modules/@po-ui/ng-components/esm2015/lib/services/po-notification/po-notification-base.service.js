import { PoToasterOrientation } from './po-toaster/po-toaster-orientation.enum';
import { PoToasterType } from './po-toaster/po-toaster-type.enum';
/**
 * @description
 *
 * Serviço responsável por emitir as notificações em uma página. São disponibilizados os métodos de:
 *
 * - success,
 * - warning,
 * - error,
 * - information.
 *
 * Cada um destes métodos recebe como parâmetro o objeto `PoNotification` que contém os dados da mensagem e o
 * objeto ViewContainerRef que é a representação do container do componente onde será criada a notificação.
 *
 * Estas notificações serão exibidas durante 10 segundos por padrão, podendo ser alterada conforme necessidade.
 * Após este tempo a mesma é removida automaticamente.
 *
 * O serviço possui um limite de até 5 notificações por vez, a partir do sexto a primeira notificação será removida dando lugar a nova.
 *
 */
export class PoNotificationBaseService {
    constructor() {
        // Array responsável por guardar a instância de po-toaster's superiores.
        this.stackTop = [];
        // Array responsável por guardar a instância de po-toaster's inferiores.
        this.stackBottom = [];
        // Duração da notificação ativa.
        this.defaultDuration = 10000;
    }
    /**
     * Emite uma notificação de sucesso.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação.
     */
    success(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Success));
    }
    /**
     * Emite uma notificação de atenção.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    warning(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Warning));
    }
    /**
     * Emite uma notificação de erro.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    error(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Error));
    }
    /**
     * Emite uma notificação de informação.
     *
     * @param {PoNotification | string} notification Objeto com os dados da notificação ou somente a string com a mensagem da notificação
     */
    information(notification) {
        this.createToaster(this.buildToaster(notification, PoToasterType.Information));
    }
    /**
     * Define em milissegundos a duração padrão para as notificações.
     *
     * > Padrão 10 segundos.
     *
     * @param {number} defaultDuration Duração em milisegundos
     */
    setDefaultDuration(defaultDuration) {
        this.defaultDuration = defaultDuration;
    }
    /**
     * @docsPrivate
     *
     * Cria um objeto do tipo PoToaster de acordo o tipo.
     *
     * @param {PoNotification | string} notification Objeto PoNotification com os dados da notificação
     */
    buildToaster(notification, type) {
        let index = 0;
        let orientation;
        if (notification.orientation === undefined ||
            notification.orientation === PoToasterOrientation.Bottom) {
            index = this.stackBottom.length;
            orientation = PoToasterOrientation.Bottom;
        }
        else {
            index = this.stackTop.length;
            orientation = PoToasterOrientation.Top;
        }
        const toaster = {
            componentRef: undefined,
            message: notification.message || notification,
            type: type,
            orientation: orientation,
            action: notification.action,
            actionLabel: notification.actionLabel,
            position: index,
            duration: notification.duration || this.defaultDuration
        };
        if (notification.action) {
            toaster.action = (param) => {
                notification.action();
                this.destroyToaster(param.componentRef);
            };
        }
        return toaster;
    }
}
//# sourceMappingURL=data:application/json;base64,