import { ChangeDetectorRef, Component, ElementRef, Renderer2, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { PoLanguageService } from '../../po-language/po-language.service';
import { PoToasterBaseComponent } from './po-toaster-base.component';
import { PoToasterType } from './po-toaster-type.enum';
import { PoToasterOrientation } from './po-toaster-orientation.enum';
/**
 * @docsPrivate
 *
 * @docsExtends PoToasterBaseComponent
 */
export class PoToasterComponent extends PoToasterBaseComponent {
    constructor(languageService, changeDetector, elementeRef, renderer) {
        super();
        this.changeDetector = changeDetector;
        this.elementeRef = elementeRef;
        this.renderer = renderer;
        this.alive = true;
        /* Margem do Toaster referênte à sua orientação e posição*/
        this.margin = 20;
        /* Observable para monitorar o Close to Toaster */
        this.observableOnClose = new Subject();
        /* Posição do Toaster*/
        this.toasterPosition = 'po-toaster-bottom';
    }
    ngOnDestroy() {
        this.alive = false;
    }
    ngAfterViewInit() {
        setTimeout(() => this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-visible'));
    }
    /* Muda a posição do Toaster na tela*/
    changePosition(position) {
        this.elementeRef.nativeElement.style.display = 'table';
        this.margin = 6 + 44 * position + position * 6;
        if (this.orientation === PoToasterOrientation.Top) {
            this.toaster.nativeElement.style.top = this.margin + 'px';
        }
        else {
            this.toaster.nativeElement.style.bottom = this.margin + 'px';
        }
    }
    /* Fecha o componente Toaster */
    close() {
        this.observableOnClose.next(true);
    }
    setFadeOut() {
        this.renderer.removeClass(this.toaster.nativeElement, 'po-toaster-visible');
        this.renderer.addClass(this.toaster.nativeElement, 'po-toaster-invisible');
    }
    /* Configura o Toaster com os atributos passados para ele */
    configToaster(poToaster) {
        this.type = poToaster.type;
        this.message = poToaster.message;
        this.orientation = poToaster.orientation;
        this.position = poToaster.position;
        this.action = poToaster.action;
        this.actionLabel = poToaster.actionLabel;
        this.componentRef = poToaster.componentRef;
        /* Muda a orientação do Toaster */
        if (this.orientation === PoToasterOrientation.Top) {
            this.toasterPosition = 'po-toaster-top';
        }
        /* Muda a posição do Toaster */
        this.changePosition(this.position);
        /* Switch para o tipo de Toaster */
        switch (this.type) {
            case PoToasterType.Error: {
                this.toasterType = 'po-toaster-error';
                this.icon = 'po-icon-warning';
                break;
            }
            case PoToasterType.Information: {
                this.toasterType = 'po-toaster-info';
                this.icon = 'po-icon-info';
                break;
            }
            case PoToasterType.Success: {
                this.toasterType = 'po-toaster-success';
                this.icon = 'po-icon-ok';
                break;
            }
            case PoToasterType.Warning: {
                this.toasterType = 'po-toaster-warning';
                this.icon = 'po-icon-warning';
                break;
            }
        }
        this.changeDetector.detectChanges();
    }
    getIcon() {
        return this.icon;
    }
    getToasterPosition() {
        return this.toasterPosition;
    }
    getToasterType() {
        return this.toasterType;
    }
    onButtonClose(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.action && !this.actionLabel) {
            this.poToasterAction(event);
        }
        else {
            this.close();
        }
    }
    /* Chama a função passada pelo atributo `action` */
    poToasterAction(event) {
        event.preventDefault();
        event.stopPropagation();
        this.action(this);
    }
}
PoToasterComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-toaster',
                template: "<div #toaster class=\"po-toaster {{ getToasterType() }} {{ getToasterPosition() }} po-clickable\" (click)=\"close()\">\n  <div class=\"po-toaster-icon\">\n    <span class=\"po-icon {{ getIcon() }}\"></span>\n  </div>\n\n  <div class=\"po-toaster-message\">{{ message }}</div>\n\n  <div *ngIf=\"action && actionLabel\" (click)=\"poToasterAction($event)\" class=\"po-toaster-action\">\n    {{ actionLabel }}\n  </div>\n\n  <button class=\"po-toaster-close\" (click)=\"onButtonClose($event)\">\n    <span class=\"po-icon po-icon-close\"></span>\n  </button>\n</div>\n"
            },] }
];
PoToasterComponent.ctorParameters = () => [
    { type: PoLanguageService },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: Renderer2 }
];
PoToasterComponent.propDecorators = {
    toaster: [{ type: ViewChild, args: ['toaster',] }]
};
//# sourceMappingURL=data:application/json;base64,