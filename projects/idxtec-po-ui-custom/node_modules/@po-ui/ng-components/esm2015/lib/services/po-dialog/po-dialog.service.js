import { Injectable } from '@angular/core';
import { PoComponentInjectorService } from './../po-component-injector/po-component-injector.service';
import { PoDialogBaseService } from './po-dialog-base.service';
import { PoDialogComponent } from './po-dialog.component';
/**
 * @docsExtends PoDialogBaseService
 *
 * @example
 *
 * <example name="po-dialog-basic" title="PO Dialog Basic">
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.html"> </file>
 *  <file name="sample-po-dialog-basic/sample-po-dialog-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-labs" title="PO Dialog Labs">
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.html"> </file>
 *  <file name="sample-po-dialog-labs/sample-po-dialog-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-dialog-cancel-credit-card" title="PO Dialog - Cancel Credit Card">
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.html"> </file>
 *  <file name="sample-po-dialog-cancel-credit-card/sample-po-dialog-cancel-credit-card.component.ts"> </file>
 * </example>
 */
export class PoDialogService extends PoDialogBaseService {
    constructor(poComponentInjector) {
        super();
        this.poComponentInjector = poComponentInjector;
    }
    openDialog(dialogType, dialogOptions) {
        const componentRef = this.poComponentInjector.createComponentInApplication(PoDialogComponent);
        componentRef.changeDetectorRef.detectChanges();
        componentRef.instance.open(dialogOptions, dialogType, componentRef);
    }
}
PoDialogService.decorators = [
    { type: Injectable }
];
PoDialogService.ctorParameters = () => [
    { type: PoComponentInjectorService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy91aS9zcmMvbGliL3NlcnZpY2VzL3BvLWRpYWxvZy9wby1kaWFsb2cuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUV6RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUV0RyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUcxRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQW1CRztBQUVILE1BQU0sT0FBTyxlQUFnQixTQUFRLG1CQUFtQjtJQUN0RCxZQUFvQixtQkFBK0M7UUFDakUsS0FBSyxFQUFFLENBQUM7UUFEVSx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQTRCO0lBRW5FLENBQUM7SUFFRCxVQUFVLENBQUMsVUFBd0IsRUFBRSxhQUE0RDtRQUMvRixNQUFNLFlBQVksR0FBc0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLDRCQUE0QixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakgsWUFBWSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQy9DLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7O1lBVkYsVUFBVTs7O1lBMUJGLDBCQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIENvbXBvbmVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBQb0NvbXBvbmVudEluamVjdG9yU2VydmljZSB9IGZyb20gJy4vLi4vcG8tY29tcG9uZW50LWluamVjdG9yL3BvLWNvbXBvbmVudC1pbmplY3Rvci5zZXJ2aWNlJztcbmltcG9ydCB7IFBvRGlhbG9nQWxlcnRPcHRpb25zLCBQb0RpYWxvZ0NvbmZpcm1PcHRpb25zIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLWRpYWxvZy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9EaWFsb2dCYXNlU2VydmljZSB9IGZyb20gJy4vcG8tZGlhbG9nLWJhc2Uuc2VydmljZSc7XG5pbXBvcnQgeyBQb0RpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vcG8tZGlhbG9nLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb0RpYWxvZ1R5cGUgfSBmcm9tICcuL3BvLWRpYWxvZy5lbnVtJztcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9EaWFsb2dCYXNlU2VydmljZVxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cInBvLWRpYWxvZy1iYXNpY1wiIHRpdGxlPVwiUE8gRGlhbG9nIEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1kaWFsb2ctYmFzaWMvc2FtcGxlLXBvLWRpYWxvZy1iYXNpYy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1kaWFsb2ctYmFzaWMvc2FtcGxlLXBvLWRpYWxvZy1iYXNpYy5jb21wb25lbnQudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1kaWFsb2ctbGFic1wiIHRpdGxlPVwiUE8gRGlhbG9nIExhYnNcIj5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWRpYWxvZy1sYWJzL3NhbXBsZS1wby1kaWFsb2ctbGFicy5jb21wb25lbnQuaHRtbFwiPiA8L2ZpbGU+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1kaWFsb2ctbGFicy9zYW1wbGUtcG8tZGlhbG9nLWxhYnMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tZGlhbG9nLWNhbmNlbC1jcmVkaXQtY2FyZFwiIHRpdGxlPVwiUE8gRGlhbG9nIC0gQ2FuY2VsIENyZWRpdCBDYXJkXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1kaWFsb2ctY2FuY2VsLWNyZWRpdC1jYXJkL3NhbXBsZS1wby1kaWFsb2ctY2FuY2VsLWNyZWRpdC1jYXJkLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLWRpYWxvZy1jYW5jZWwtY3JlZGl0LWNhcmQvc2FtcGxlLXBvLWRpYWxvZy1jYW5jZWwtY3JlZGl0LWNhcmQuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFBvRGlhbG9nU2VydmljZSBleHRlbmRzIFBvRGlhbG9nQmFzZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvQ29tcG9uZW50SW5qZWN0b3I6IFBvQ29tcG9uZW50SW5qZWN0b3JTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG9wZW5EaWFsb2coZGlhbG9nVHlwZTogUG9EaWFsb2dUeXBlLCBkaWFsb2dPcHRpb25zOiBQb0RpYWxvZ0FsZXJ0T3B0aW9ucyB8IFBvRGlhbG9nQ29uZmlybU9wdGlvbnMpOiB2b2lkIHtcbiAgICBjb25zdCBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+ID0gdGhpcy5wb0NvbXBvbmVudEluamVjdG9yLmNyZWF0ZUNvbXBvbmVudEluQXBwbGljYXRpb24oUG9EaWFsb2dDb21wb25lbnQpO1xuICAgIGNvbXBvbmVudFJlZi5jaGFuZ2VEZXRlY3RvclJlZi5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgY29tcG9uZW50UmVmLmluc3RhbmNlLm9wZW4oZGlhbG9nT3B0aW9ucywgZGlhbG9nVHlwZSwgY29tcG9uZW50UmVmKTtcbiAgfVxufVxuIl19