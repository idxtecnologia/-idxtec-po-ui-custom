import { Pipe } from '@angular/core';
import { isTypeof } from '../../utils/util';
/**
 * @docsPrivate
 *
 * @description
 *
 * Pipe responsável por apresentar um horário baseado no formato de entrada definido na API do PO UI.
 */
export class PoTimePipe {
    transform(time, format) {
        const hourRegex = /^(([0-1][0-9])|(2[0-3])):[0-5][0-9]:[0-5][0-9][\.]?([0-9]{1,6})?$/g;
        if (isTypeof(time, 'string') && hourRegex.test(time)) {
            const amountOfF = format ? format.lastIndexOf('f') - format.indexOf('f') + 1 : 0;
            const miliseconds = this.addDotMiliseconds(time.substring(9, 9 + amountOfF), amountOfF);
            const formatMiliseconds = this.getFormatMiliseconds(amountOfF);
            return this.formatValue(time, format, formatMiliseconds, miliseconds);
        }
        return null;
    }
    addDotMiliseconds(miliseconds, amountOfF) {
        if (miliseconds && amountOfF) {
            miliseconds = '.' + miliseconds;
        }
        return miliseconds;
    }
    formatValue(time, format, formatMiliseconds, miliseconds) {
        if (time && format) {
            const hour = time.substring(0, 2);
            const minutes = time.substring(3, 5);
            const seconds = time.substring(6, 8);
            format = format.replace('HH', hour);
            format = format.replace('mm', minutes);
            format = format.replace('ss', seconds);
            format = format.replace(`.${formatMiliseconds}`, miliseconds);
            return format;
        }
        else {
            return time;
        }
    }
    getFormatMiliseconds(amountOfF) {
        let formatMiliseconds = '';
        for (let i = 0; i < amountOfF; i++) {
            formatMiliseconds += 'f';
        }
        return formatMiliseconds;
    }
}
PoTimePipe.decorators = [
    { type: Pipe, args: [{
                name: 'po_time'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tdGltZS5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvdWkvc3JjL2xpYi9waXBlcy9wby10aW1lL3BvLXRpbWUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFNUM7Ozs7OztHQU1HO0FBSUgsTUFBTSxPQUFPLFVBQVU7SUFDckIsU0FBUyxDQUFDLElBQVksRUFBRSxNQUFlO1FBQ3JDLE1BQU0sU0FBUyxHQUFHLG9FQUFvRSxDQUFDO1FBRXZGLElBQUksUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BELE1BQU0sU0FBUyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpGLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsU0FBUyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDeEYsTUFBTSxpQkFBaUIsR0FBVyxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLENBQUM7WUFFdkUsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxXQUFtQixFQUFFLFNBQWlCO1FBQzlELElBQUksV0FBVyxJQUFJLFNBQVMsRUFBRTtZQUM1QixXQUFXLEdBQUcsR0FBRyxHQUFHLFdBQVcsQ0FBQztTQUNqQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFTyxXQUFXLENBQUMsSUFBWSxFQUFFLE1BQWMsRUFBRSxpQkFBeUIsRUFBRSxXQUFtQjtRQUM5RixJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDbEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFckMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2QyxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxpQkFBaUIsRUFBRSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBRTlELE9BQU8sTUFBTSxDQUFDO1NBQ2Y7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBRU8sb0JBQW9CLENBQUMsU0FBaUI7UUFDNUMsSUFBSSxpQkFBaUIsR0FBVyxFQUFFLENBQUM7UUFFbkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNsQyxpQkFBaUIsSUFBSSxHQUFHLENBQUM7U0FDMUI7UUFFRCxPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7OztZQWxERixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLFNBQVM7YUFDaEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IGlzVHlwZW9mIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbCc7XG5cbi8qKlxuICogQGRvY3NQcml2YXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUGlwZSByZXNwb25zw6F2ZWwgcG9yIGFwcmVzZW50YXIgdW0gaG9yw6FyaW8gYmFzZWFkbyBubyBmb3JtYXRvIGRlIGVudHJhZGEgZGVmaW5pZG8gbmEgQVBJIGRvIFBPIFVJLlxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdwb190aW1lJ1xufSlcbmV4cG9ydCBjbGFzcyBQb1RpbWVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybSh0aW1lOiBzdHJpbmcsIGZvcm1hdD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgaG91clJlZ2V4ID0gL14oKFswLTFdWzAtOV0pfCgyWzAtM10pKTpbMC01XVswLTldOlswLTVdWzAtOV1bXFwuXT8oWzAtOV17MSw2fSk/JC9nO1xuXG4gICAgaWYgKGlzVHlwZW9mKHRpbWUsICdzdHJpbmcnKSAmJiBob3VyUmVnZXgudGVzdCh0aW1lKSkge1xuICAgICAgY29uc3QgYW1vdW50T2ZGID0gZm9ybWF0ID8gZm9ybWF0Lmxhc3RJbmRleE9mKCdmJykgLSBmb3JtYXQuaW5kZXhPZignZicpICsgMSA6IDA7XG5cbiAgICAgIGNvbnN0IG1pbGlzZWNvbmRzID0gdGhpcy5hZGREb3RNaWxpc2Vjb25kcyh0aW1lLnN1YnN0cmluZyg5LCA5ICsgYW1vdW50T2ZGKSwgYW1vdW50T2ZGKTtcbiAgICAgIGNvbnN0IGZvcm1hdE1pbGlzZWNvbmRzOiBzdHJpbmcgPSB0aGlzLmdldEZvcm1hdE1pbGlzZWNvbmRzKGFtb3VudE9mRik7XG5cbiAgICAgIHJldHVybiB0aGlzLmZvcm1hdFZhbHVlKHRpbWUsIGZvcm1hdCwgZm9ybWF0TWlsaXNlY29uZHMsIG1pbGlzZWNvbmRzKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGFkZERvdE1pbGlzZWNvbmRzKG1pbGlzZWNvbmRzOiBzdHJpbmcsIGFtb3VudE9mRjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBpZiAobWlsaXNlY29uZHMgJiYgYW1vdW50T2ZGKSB7XG4gICAgICBtaWxpc2Vjb25kcyA9ICcuJyArIG1pbGlzZWNvbmRzO1xuICAgIH1cbiAgICByZXR1cm4gbWlsaXNlY29uZHM7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdFZhbHVlKHRpbWU6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcsIGZvcm1hdE1pbGlzZWNvbmRzOiBzdHJpbmcsIG1pbGlzZWNvbmRzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0aW1lICYmIGZvcm1hdCkge1xuICAgICAgY29uc3QgaG91ciA9IHRpbWUuc3Vic3RyaW5nKDAsIDIpO1xuICAgICAgY29uc3QgbWludXRlcyA9IHRpbWUuc3Vic3RyaW5nKDMsIDUpO1xuICAgICAgY29uc3Qgc2Vjb25kcyA9IHRpbWUuc3Vic3RyaW5nKDYsIDgpO1xuXG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZSgnSEgnLCBob3VyKTtcbiAgICAgIGZvcm1hdCA9IGZvcm1hdC5yZXBsYWNlKCdtbScsIG1pbnV0ZXMpO1xuICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoJ3NzJywgc2Vjb25kcyk7XG4gICAgICBmb3JtYXQgPSBmb3JtYXQucmVwbGFjZShgLiR7Zm9ybWF0TWlsaXNlY29uZHN9YCwgbWlsaXNlY29uZHMpO1xuXG4gICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGltZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldEZvcm1hdE1pbGlzZWNvbmRzKGFtb3VudE9mRjogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBsZXQgZm9ybWF0TWlsaXNlY29uZHM6IHN0cmluZyA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnRPZkY7IGkrKykge1xuICAgICAgZm9ybWF0TWlsaXNlY29uZHMgKz0gJ2YnO1xuICAgIH1cblxuICAgIHJldHVybiBmb3JtYXRNaWxpc2Vjb25kcztcbiAgfVxufVxuIl19