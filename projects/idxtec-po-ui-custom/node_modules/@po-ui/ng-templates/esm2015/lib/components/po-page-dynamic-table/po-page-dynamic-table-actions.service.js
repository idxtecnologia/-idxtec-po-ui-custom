import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class PoPageDynamicTableActionsService {
    constructor(http) {
        this.http = http;
        this.headers = new HttpHeaders({
            'X-PO-SCREEN-LOCK': 'true'
        });
    }
    beforeDuplicate(action, id, body) {
        const resource = body !== null && body !== void 0 ? body : {};
        return this.executeAction({ action, resource, id });
    }
    beforeEdit(action, id, body) {
        const resource = body !== null && body !== void 0 ? body : {};
        return this.executeAction({ action, resource, id });
    }
    beforeNew(action) {
        return this.executeAction({ action });
    }
    beforeRemove(action, id, resource) {
        return this.executeAction({ action, id, resource });
    }
    beforeRemoveAll(action, resources) {
        return this.executeAction({ action, resource: resources });
    }
    beforeDetail(action, id, resource) {
        return this.executeAction({ action, id, resource });
    }
    customAction(action, resource = []) {
        return this.executeAction({ action, resource });
    }
    executeAction({ action, resource = {}, id }) {
        if (!action) {
            return of({});
        }
        if (typeof action === 'string') {
            const url = id ? `${action}/${id}` : action;
            return this.http.post(url, resource, { headers: this.headers });
        }
        if (id) {
            return of(action(id, resource));
        }
        return of(action(resource));
    }
}
PoPageDynamicTableActionsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function PoPageDynamicTableActionsService_Factory() { return new PoPageDynamicTableActionsService(i0.ɵɵinject(i1.HttpClient)); }, token: PoPageDynamicTableActionsService, providedIn: "root" });
PoPageDynamicTableActionsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
PoPageDynamicTableActionsService.ctorParameters = () => [
    { type: HttpClient }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLXRhYmxlLWFjdGlvbnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RlbXBsYXRlcy9zcmMvbGliL2NvbXBvbmVudHMvcG8tcGFnZS1keW5hbWljLXRhYmxlL3BvLXBhZ2UtZHluYW1pYy10YWJsZS1hY3Rpb25zLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQW9CdEMsTUFBTSxPQUFPLGdDQUFnQztJQUszQyxZQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO1FBSjNCLFlBQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUM7WUFDOUMsa0JBQWtCLEVBQUUsTUFBTTtTQUMzQixDQUFDLENBQUM7SUFFb0MsQ0FBQztJQUV4QyxlQUFlLENBQ2IsTUFBb0QsRUFDcEQsRUFBTyxFQUNQLElBQVM7UUFFVCxNQUFNLFFBQVEsR0FBRyxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxFQUFFLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxVQUFVLENBQ1IsTUFBK0MsRUFDL0MsRUFBTyxFQUNQLElBQVM7UUFFVCxNQUFNLFFBQVEsR0FBRyxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxFQUFFLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxTQUFTLENBQUMsTUFBK0M7UUFDdkQsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRUQsWUFBWSxDQUNWLE1BQWlELEVBQ2pELEVBQVUsRUFDVixRQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxlQUFlLENBQ2IsTUFBb0QsRUFDcEQsU0FBcUI7UUFFckIsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxZQUFZLENBQ1YsTUFBaUQsRUFDakQsRUFBVSxFQUNWLFFBQWE7UUFFYixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFlBQVksQ0FBQyxNQUFnRCxFQUFFLFdBQWdCLEVBQUU7UUFDL0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVPLGFBQWEsQ0FBSSxFQUFFLE1BQU0sRUFBRSxRQUFRLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBMEI7UUFDNUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sRUFBRSxDQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7WUFDOUIsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBRTVDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUksR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNwRTtRQUNELElBQUksRUFBRSxFQUFFO1lBQ04sT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7OztZQTNFRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7OztZQXRCUSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNUYWJsZUFjdGlvbnMgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1keW5hbWljLXRhYmxlLWFjdGlvbnMuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNUYWJsZUJlZm9yZUR1cGxpY2F0ZSB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtYmVmb3JlLWR1cGxpY2F0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlRWRpdCB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtYmVmb3JlLWVkaXQuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNUYWJsZUJlZm9yZU5ldyB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtYmVmb3JlLW5ldy5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgUG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlUmVtb3ZlIH0gZnJvbSAnLi9pbnRlcmZhY2VzL3BvLXBhZ2UtZHluYW1pYy10YWJsZS1iZWZvcmUtcmVtb3ZlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljVGFibGVCZWZvcmVEZXRhaWwgfSBmcm9tICcuL2ludGVyZmFjZXMvcG8tcGFnZS1keW5hbWljLXRhYmxlLWJlZm9yZS1kZXRhaWwuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNUYWJsZUJlZm9yZVJlbW92ZUFsbCB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtYmVmb3JlLXJlbW92ZS1hbGwuaW50ZXJmYWNlJztcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNUYWJsZUN1c3RvbUFjdGlvbiB9IGZyb20gJy4vaW50ZXJmYWNlcy9wby1wYWdlLWR5bmFtaWMtdGFibGUtY3VzdG9tLWFjdGlvbi5pbnRlcmZhY2UnO1xuXG5pbnRlcmZhY2UgRXhlY3V0ZUFjdGlvblBhcmFtZXRlciB7XG4gIGFjdGlvbjogc3RyaW5nIHwgRnVuY3Rpb247XG4gIHJlc291cmNlPzogYW55O1xuICBpZD86IHN0cmluZyB8IG51bWJlcjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9QYWdlRHluYW1pY1RhYmxlQWN0aW9uc1NlcnZpY2Uge1xuICByZWFkb25seSBoZWFkZXJzOiBIdHRwSGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycyh7XG4gICAgJ1gtUE8tU0NSRUVOLUxPQ0snOiAndHJ1ZSdcbiAgfSk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7fVxuXG4gIGJlZm9yZUR1cGxpY2F0ZShcbiAgICBhY3Rpb246IFBvUGFnZUR5bmFtaWNUYWJsZUFjdGlvbnNbJ2JlZm9yZUR1cGxpY2F0ZSddLFxuICAgIGlkOiBhbnksXG4gICAgYm9keTogYW55XG4gICk6IE9ic2VydmFibGU8UG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlRHVwbGljYXRlPiB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSBib2R5ID8/IHt9O1xuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUFjdGlvbih7IGFjdGlvbiwgcmVzb3VyY2UsIGlkIH0pO1xuICB9XG5cbiAgYmVmb3JlRWRpdChcbiAgICBhY3Rpb246IFBvUGFnZUR5bmFtaWNUYWJsZUFjdGlvbnNbJ2JlZm9yZUVkaXQnXSxcbiAgICBpZDogYW55LFxuICAgIGJvZHk6IGFueVxuICApOiBPYnNlcnZhYmxlPFBvUGFnZUR5bmFtaWNUYWJsZUJlZm9yZUVkaXQ+IHtcbiAgICBjb25zdCByZXNvdXJjZSA9IGJvZHkgPz8ge307XG5cbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQWN0aW9uKHsgYWN0aW9uLCByZXNvdXJjZSwgaWQgfSk7XG4gIH1cblxuICBiZWZvcmVOZXcoYWN0aW9uPzogUG9QYWdlRHluYW1pY1RhYmxlQWN0aW9uc1snYmVmb3JlTmV3J10pOiBPYnNlcnZhYmxlPFBvUGFnZUR5bmFtaWNUYWJsZUJlZm9yZU5ldz4ge1xuICAgIHJldHVybiB0aGlzLmV4ZWN1dGVBY3Rpb24oeyBhY3Rpb24gfSk7XG4gIH1cblxuICBiZWZvcmVSZW1vdmUoXG4gICAgYWN0aW9uOiBQb1BhZ2VEeW5hbWljVGFibGVBY3Rpb25zWydiZWZvcmVSZW1vdmUnXSxcbiAgICBpZDogc3RyaW5nLFxuICAgIHJlc291cmNlOiBhbnlcbiAgKTogT2JzZXJ2YWJsZTxQb1BhZ2VEeW5hbWljVGFibGVCZWZvcmVSZW1vdmU+IHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQWN0aW9uKHsgYWN0aW9uLCBpZCwgcmVzb3VyY2UgfSk7XG4gIH1cblxuICBiZWZvcmVSZW1vdmVBbGwoXG4gICAgYWN0aW9uOiBQb1BhZ2VEeW5hbWljVGFibGVBY3Rpb25zWydiZWZvcmVSZW1vdmVBbGwnXSxcbiAgICByZXNvdXJjZXM6IEFycmF5PGFueT5cbiAgKTogT2JzZXJ2YWJsZTxQb1BhZ2VEeW5hbWljVGFibGVCZWZvcmVSZW1vdmVBbGw+IHtcbiAgICByZXR1cm4gdGhpcy5leGVjdXRlQWN0aW9uKHsgYWN0aW9uLCByZXNvdXJjZTogcmVzb3VyY2VzIH0pO1xuICB9XG5cbiAgYmVmb3JlRGV0YWlsKFxuICAgIGFjdGlvbjogUG9QYWdlRHluYW1pY1RhYmxlQWN0aW9uc1snYmVmb3JlRGV0YWlsJ10sXG4gICAgaWQ6IHN0cmluZyxcbiAgICByZXNvdXJjZTogYW55XG4gICk6IE9ic2VydmFibGU8UG9QYWdlRHluYW1pY1RhYmxlQmVmb3JlRGV0YWlsPiB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUFjdGlvbih7IGFjdGlvbiwgaWQsIHJlc291cmNlIH0pO1xuICB9XG5cbiAgY3VzdG9tQWN0aW9uKGFjdGlvbjogUG9QYWdlRHluYW1pY1RhYmxlQ3VzdG9tQWN0aW9uWydhY3Rpb24nXSwgcmVzb3VyY2U6IGFueSA9IFtdKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZUFjdGlvbih7IGFjdGlvbiwgcmVzb3VyY2UgfSk7XG4gIH1cblxuICBwcml2YXRlIGV4ZWN1dGVBY3Rpb248VD4oeyBhY3Rpb24sIHJlc291cmNlID0ge30sIGlkIH06IEV4ZWN1dGVBY3Rpb25QYXJhbWV0ZXIpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICBpZiAoIWFjdGlvbikge1xuICAgICAgcmV0dXJuIG9mKDxUPnt9KTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHVybCA9IGlkID8gYCR7YWN0aW9ufS8ke2lkfWAgOiBhY3Rpb247XG5cbiAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxUPih1cmwsIHJlc291cmNlLCB7IGhlYWRlcnM6IHRoaXMuaGVhZGVycyB9KTtcbiAgICB9XG4gICAgaWYgKGlkKSB7XG4gICAgICByZXR1cm4gb2YoYWN0aW9uKGlkLCByZXNvdXJjZSkpO1xuICAgIH1cbiAgICByZXR1cm4gb2YoYWN0aW9uKHJlc291cmNlKSk7XG4gIH1cbn1cbiJdfQ==