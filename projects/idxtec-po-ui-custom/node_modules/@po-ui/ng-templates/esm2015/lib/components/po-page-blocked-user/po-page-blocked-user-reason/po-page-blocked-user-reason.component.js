import { ChangeDetectorRef, Component, Input } from '@angular/core';
import { PoLanguageService, poLocaleDefault } from '@po-ui/ng-components';
import { poPageBlockedUserLiterals } from './../literals/i18n/po-page-blocked-user-literals';
export class PoPageBlockedUserReasonComponent {
    constructor(changeDetector, languageService) {
        this.changeDetector = changeDetector;
        this.language = languageService.getShortLanguage();
    }
    ngOnChanges(changes) {
        if (changes.reason || changes.params) {
            this.getLiterals();
        }
    }
    ngOnInit() {
        this.getLiterals();
    }
    getImageByReasonType() {
        let reasonImage;
        switch (this.reason) {
            case 'none': {
                reasonImage = 'big-lock';
                break;
            }
            case 'exceededAttempts': {
                reasonImage = 'blocked-user';
                break;
            }
            case 'expiredPassword': {
                reasonImage = 'expired';
                break;
            }
        }
        return `./assets/images/${reasonImage}.svg`;
    }
    getParams() {
        this.literalParams =
            this.reason === 'expiredPassword'
                ? [this.params.days, this.params.days]
                : [this.params.attempts, this.params.hours];
    }
    getLiterals() {
        this.getParams();
        this.literals = Object.assign(Object.assign({}, poPageBlockedUserLiterals[this.reason][poLocaleDefault]), poPageBlockedUserLiterals[this.reason][this.language]);
        this.changeDetector.detectChanges();
    }
}
PoPageBlockedUserReasonComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-blocked-user-reason',
                template: "<div class=\"po-page-blocked-user-reason-content\">\n  <img class=\"po-page-blocked-user-image po-mb-3\" [src]=\"getImageByReasonType()\" />\n  <div class=\"po-page-blocked-user-header po-mb-md-3 po-row\">\n    <div class=\"po-md-12\">{{ literals?.title }}</div>\n  </div>\n  <div class=\"po-page-blocked-user-text po-font-text po-row\">\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12 po-page-blocked-user-text-bold\">\n      {{ literals?.firstPhrase | poI18n: literalParams }}\n    </div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\">{{ literals?.secondPhrase }}</div>\n    <div class=\"po-mb-sm-2 po-mb-md-3 po-md-12\" *ngIf=\"literals?.thirdPhrase\">{{ literals?.thirdPhrase }}</div>\n  </div>\n</div>\n"
            },] }
];
PoPageBlockedUserReasonComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: PoLanguageService }
];
PoPageBlockedUserReasonComponent.propDecorators = {
    params: [{ type: Input, args: ['p-params',] }],
    reason: [{ type: Input, args: ['p-reason',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3RlbXBsYXRlcy9zcmMvbGliL2NvbXBvbmVudHMvcG8tcGFnZS1ibG9ja2VkLXVzZXIvcG8tcGFnZS1ibG9ja2VkLXVzZXItcmVhc29uL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQW9DLE1BQU0sZUFBZSxDQUFDO0FBRXRHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUxRSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQVE3RixNQUFNLE9BQU8sZ0NBQWdDO0lBVTNDLFlBQW9CLGNBQWlDLEVBQUUsZUFBa0M7UUFBckUsbUJBQWMsR0FBZCxjQUFjLENBQW1CO1FBQ25ELElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDckQsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNwQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsb0JBQW9CO1FBQ2xCLElBQUksV0FBVyxDQUFDO1FBRWhCLFFBQVEsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNuQixLQUFLLE1BQU0sQ0FBQyxDQUFDO2dCQUNYLFdBQVcsR0FBRyxVQUFVLENBQUM7Z0JBQ3pCLE1BQU07YUFDUDtZQUNELEtBQUssa0JBQWtCLENBQUMsQ0FBQztnQkFDdkIsV0FBVyxHQUFHLGNBQWMsQ0FBQztnQkFDN0IsTUFBTTthQUNQO1lBQ0QsS0FBSyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUN0QixXQUFXLEdBQUcsU0FBUyxDQUFDO2dCQUN4QixNQUFNO2FBQ1A7U0FDRjtRQUNELE9BQU8sbUJBQW1CLFdBQVcsTUFBTSxDQUFDO0lBQzlDLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLGFBQWE7WUFDaEIsSUFBSSxDQUFDLE1BQU0sS0FBSyxpQkFBaUI7Z0JBQy9CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUN0QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTyxXQUFXO1FBQ2pCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsUUFBUSxtQ0FDUix5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLEdBQ3ZELHlCQUF5QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQ3pELENBQUM7UUFFRixJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7OztZQWhFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDZCQUE2QjtnQkFDdkMsc3RCQUEyRDthQUM1RDs7O1lBWFEsaUJBQWlCO1lBRWpCLGlCQUFpQjs7O3FCQVd2QixLQUFLLFNBQUMsVUFBVTtxQkFFaEIsS0FBSyxTQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgUG9MYW5ndWFnZVNlcnZpY2UsIHBvTG9jYWxlRGVmYXVsdCB9IGZyb20gJ0Bwby11aS9uZy1jb21wb25lbnRzJztcblxuaW1wb3J0IHsgcG9QYWdlQmxvY2tlZFVzZXJMaXRlcmFscyB9IGZyb20gJy4vLi4vbGl0ZXJhbHMvaTE4bi9wby1wYWdlLWJsb2NrZWQtdXNlci1saXRlcmFscyc7XG5pbXBvcnQgeyBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvbiB9IGZyb20gJy4uL2VudW1zL3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbi5lbnVtJztcbmltcG9ydCB7IFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uUGFyYW1zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24tcGFyYW1zLmludGVyZmFjZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3BvLXBhZ2UtYmxvY2tlZC11c2VyLXJlYXNvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9wby1wYWdlLWJsb2NrZWQtdXNlci1yZWFzb24uY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvUGFnZUJsb2NrZWRVc2VyUmVhc29uQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzLCBPbkluaXQge1xuICBASW5wdXQoJ3AtcGFyYW1zJykgcGFyYW1zOiBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvblBhcmFtcztcblxuICBASW5wdXQoJ3AtcmVhc29uJykgcmVhc29uOiBQb1BhZ2VCbG9ja2VkVXNlclJlYXNvbjtcblxuICBsaXRlcmFsUGFyYW1zO1xuICBsaXRlcmFsczogeyB0aXRsZTogc3RyaW5nOyBmaXJzdFBocmFzZTogc3RyaW5nOyBzZWNvbmRQaHJhc2U6IHN0cmluZzsgdGhpcmRQaHJhc2U6IHN0cmluZyB9O1xuXG4gIHByaXZhdGUgbGFuZ3VhZ2U6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZiwgbGFuZ3VhZ2VTZXJ2aWNlOiBQb0xhbmd1YWdlU2VydmljZSkge1xuICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5ndWFnZVNlcnZpY2UuZ2V0U2hvcnRMYW5ndWFnZSgpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLnJlYXNvbiB8fCBjaGFuZ2VzLnBhcmFtcykge1xuICAgICAgdGhpcy5nZXRMaXRlcmFscygpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuZ2V0TGl0ZXJhbHMoKTtcbiAgfVxuXG4gIGdldEltYWdlQnlSZWFzb25UeXBlKCkge1xuICAgIGxldCByZWFzb25JbWFnZTtcblxuICAgIHN3aXRjaCAodGhpcy5yZWFzb24pIHtcbiAgICAgIGNhc2UgJ25vbmUnOiB7XG4gICAgICAgIHJlYXNvbkltYWdlID0gJ2JpZy1sb2NrJztcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlICdleGNlZWRlZEF0dGVtcHRzJzoge1xuICAgICAgICByZWFzb25JbWFnZSA9ICdibG9ja2VkLXVzZXInO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2V4cGlyZWRQYXNzd29yZCc6IHtcbiAgICAgICAgcmVhc29uSW1hZ2UgPSAnZXhwaXJlZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYC4vYXNzZXRzL2ltYWdlcy8ke3JlYXNvbkltYWdlfS5zdmdgO1xuICB9XG5cbiAgZ2V0UGFyYW1zKCkge1xuICAgIHRoaXMubGl0ZXJhbFBhcmFtcyA9XG4gICAgICB0aGlzLnJlYXNvbiA9PT0gJ2V4cGlyZWRQYXNzd29yZCdcbiAgICAgICAgPyBbdGhpcy5wYXJhbXMuZGF5cywgdGhpcy5wYXJhbXMuZGF5c11cbiAgICAgICAgOiBbdGhpcy5wYXJhbXMuYXR0ZW1wdHMsIHRoaXMucGFyYW1zLmhvdXJzXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGl0ZXJhbHMoKSB7XG4gICAgdGhpcy5nZXRQYXJhbXMoKTtcblxuICAgIHRoaXMubGl0ZXJhbHMgPSB7XG4gICAgICAuLi5wb1BhZ2VCbG9ja2VkVXNlckxpdGVyYWxzW3RoaXMucmVhc29uXVtwb0xvY2FsZURlZmF1bHRdLFxuICAgICAgLi4ucG9QYWdlQmxvY2tlZFVzZXJMaXRlcmFsc1t0aGlzLnJlYXNvbl1bdGhpcy5sYW5ndWFnZV1cbiAgICB9O1xuXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5kZXRlY3RDaGFuZ2VzKCk7XG4gIH1cbn1cbiJdfQ==