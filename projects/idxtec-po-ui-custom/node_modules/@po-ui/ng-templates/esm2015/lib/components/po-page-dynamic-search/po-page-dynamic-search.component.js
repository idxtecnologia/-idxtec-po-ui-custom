import { Component, ViewChild, ChangeDetectorRef } from '@angular/core';
import { PoDynamicFieldType, PoLanguageService } from '@po-ui/ng-components';
import { capitalizeFirstLetter, getBrowserLanguage } from '../../utils/util';
import { PoPageCustomizationService } from '../../services/po-page-customization/po-page-customization.service';
import { PoAdvancedFilterComponent } from './po-advanced-filter/po-advanced-filter.component';
import { PoPageDynamicSearchBaseComponent } from './po-page-dynamic-search-base.component';
/**
 * @docsExtends PoPageDynamicSearchBaseComponent
 *
 * @example
 *
 * <example name="po-page-dynamic-search-basic" title="PO Page Dynamic Search Basic">
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-basic/sample-po-page-dynamic-search-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-page-dynamic-search-hiring-processes" title="PO Page Dynamic Search - Hiring processes">
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.html"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.component.ts"> </file>
 *  <file name="sample-po-page-dynamic-search-hiring-processes/sample-po-page-dynamic-search-hiring-processes.service.ts"> </file>
 * </example>
 */
export class PoPageDynamicSearchComponent extends PoPageDynamicSearchBaseComponent {
    constructor(languageService, poPageCustomizationService, changeDetector) {
        super(languageService);
        this.poPageCustomizationService = poPageCustomizationService;
        this.changeDetector = changeDetector;
        this._disclaimerGroup = {
            remove: this.onRemoveDisclaimer.bind(this),
            removeAll: this.onRemoveAllDisclaimers.bind(this),
            disclaimers: [],
            title: this.literals.disclaimerGroupTitle
        };
        this._filterSettings = {
            action: this.onAction.bind(this),
            advancedAction: this.onAdvancedAction.bind(this),
            placeholder: this.literals.searchPlaceholder,
            width: this.quickSearchWidth
        };
    }
    get disclaimerGroup() {
        return Object.assign({}, this._disclaimerGroup, { title: this.literals.disclaimerGroupTitle });
    }
    get filterSettings() {
        this._filterSettings.advancedAction = this.filters.length === 0 ? undefined : this.onAdvancedAction.bind(this);
        return Object.assign({}, this._filterSettings, {
            placeholder: this.literals.searchPlaceholder,
            width: this.quickSearchWidth
        });
    }
    ngOnInit() {
        this.setAdvancedFilterLiterals(this.literals);
        if (this.onLoad) {
            this.loadOptionsOnInitialize(this.onLoad);
        }
    }
    ngOnDestroy() {
        if (this.loadSubscription) {
            this.loadSubscription.unsubscribe();
        }
    }
    onChangeFilters(filters) {
        const filterObjectWithValue = filters
            .filter(filter => filter.initValue)
            .reduce((prev, current) => (Object.assign(Object.assign({}, prev), { [current.property]: current.initValue })), {});
        if (Object.keys(filterObjectWithValue).length) {
            this.onAdvancedSearch({ filter: filterObjectWithValue });
        }
    }
    onAction(quickFilter) {
        const disclaimerQuickSearchUpdated = {
            property: 'search',
            label: `${this.literals.quickSearchLabel} ${quickFilter}`,
            value: quickFilter
        };
        const getDisclaimersWithConcatFilters = () => [
            ...this.getDisclaimersWithoutQuickSearch(),
            disclaimerQuickSearchUpdated
        ];
        this._disclaimerGroup.disclaimers = this.concatFilters
            ? getDisclaimersWithConcatFilters()
            : [disclaimerQuickSearchUpdated];
        if (this.quickSearch.observers && this.quickSearch.observers.length > 0) {
            this.quickSearch.emit(quickFilter);
        }
        if (this.keepFilters && !this.concatFilters) {
            this.filters.forEach(element => delete element.initValue);
        }
        this.changeDetector.detectChanges();
    }
    onAdvancedAction() {
        this.poAdvancedFilter.open();
    }
    onAdvancedSearch(filteredItems) {
        const { filter, optionsService } = filteredItems;
        this._disclaimerGroup.disclaimers = this.setDisclaimers(filter, optionsService);
        this.setFilters(filter);
        this.advancedSearch.emit(filter);
    }
    getDisclaimersWithoutQuickSearch() {
        const quickSearchProperty = 'search';
        return this._disclaimerGroup.disclaimers.filter(item => item.property !== quickSearchProperty);
    }
    setFilters(filters) {
        const formattedFilters = this.convertToFilters(filters);
        this.filters.forEach(element => {
            const compatibleObject = formattedFilters.find(item => item.property === element.property);
            if (compatibleObject) {
                element.initValue = compatibleObject.value;
            }
            else {
                delete element.initValue;
            }
        });
    }
    convertToFilters(filters) {
        return Object.entries(filters).map(([property, value]) => ({ property, value }));
    }
    optionsServiceDisclaimerLabel(value, optionsServiceObjectsList) {
        const optionServiceMatch = optionsServiceObjectsList.find(option => option.value === value);
        return optionServiceMatch.label || optionServiceMatch.value;
    }
    applyDisclaimerLabelValue(field, filterValue) {
        const values = Array.isArray(filterValue) ? filterValue : [filterValue];
        const labels = values.map(value => {
            const filteredField = field.options.find(option => option.value === value || option === value);
            if (filteredField) {
                return filteredField.label || filteredField.value || filteredField;
            }
        });
        return labels.join(', ');
    }
    formatDate(date) {
        const year = parseInt(date.substr(0, 4), 10);
        const month = parseInt(date.substr(5, 2), 10);
        const day = parseInt(date.substr(8, 2), 10);
        return new Date(year, month - 1, day).toLocaleDateString(getBrowserLanguage());
    }
    formatArrayToObjectKeyValue(filters) {
        const formattedObject = filters.reduce((result, item) => Object.assign(result, { [item.property]: item.value || item.initValue }), {});
        Object.keys(formattedObject).forEach(key => {
            if (!formattedObject[key]) {
                delete formattedObject[key];
            }
        });
        return formattedObject;
    }
    getFieldByProperty(fields, fieldName) {
        return fields.find((field) => field.property === fieldName);
    }
    getFilterValueToDisclaimer(field, value, optionsServiceObjectsList) {
        if (field.optionsService && optionsServiceObjectsList) {
            return this.optionsServiceDisclaimerLabel(value, optionsServiceObjectsList);
        }
        if (field.type === PoDynamicFieldType.Date) {
            return field.range ? this.formatDate(value.start) + ' - ' + this.formatDate(value.end) : this.formatDate(value);
        }
        if (field.options && value) {
            return this.applyDisclaimerLabelValue(field, value);
        }
        return value;
    }
    onRemoveDisclaimer(removeData) {
        const { currentDisclaimers } = removeData;
        this.emitChangesDisclaimers(currentDisclaimers);
    }
    emitChangesDisclaimers(currentDisclaimers) {
        this.changeDisclaimers.emit(currentDisclaimers);
        this.setFilters(this.formatArrayToObjectKeyValue(currentDisclaimers));
    }
    onRemoveAllDisclaimers() {
        this.emitChangesDisclaimers([]);
    }
    setDisclaimers(filters, optionsServiceObjects) {
        const disclaimers = [];
        const properties = Object.keys(filters);
        properties.forEach(property => {
            const field = this.getFieldByProperty(this.filters, property);
            const label = field.label || capitalizeFirstLetter(field.property);
            const value = filters[property];
            const valueDisplayedOnTheDisclaimerLabel = this.getFilterValueToDisclaimer(field, value, optionsServiceObjects);
            if (valueDisplayedOnTheDisclaimerLabel !== '') {
                disclaimers.push({
                    label: `${label}: ${valueDisplayedOnTheDisclaimerLabel}`,
                    property,
                    value
                });
            }
        });
        return disclaimers;
    }
    loadOptionsOnInitialize(onLoad) {
        this.loadSubscription = this.getPoDynamicPageOptions(onLoad).subscribe(responsePoOption => this.poPageCustomizationService.changeOriginalOptionsToNewOptions(this, responsePoOption));
    }
    getPoDynamicPageOptions(onLoad) {
        const originalOption = {
            title: this.title,
            actions: this.actions,
            breadcrumb: this.breadcrumb,
            filters: this.filters,
            keepFilters: this.keepFilters,
            concatFilters: this.concatFilters,
            quickSearchWidth: this.quickSearchWidth
        };
        const pageOptionSchema = {
            schema: [
                {
                    nameProp: 'filters',
                    merge: true,
                    keyForMerge: 'property'
                },
                {
                    nameProp: 'actions',
                    merge: true,
                    keyForMerge: 'label'
                },
                {
                    nameProp: 'breadcrumb'
                },
                {
                    nameProp: 'title'
                },
                {
                    nameProp: 'keepFilters'
                },
                {
                    nameProp: 'concatFilters'
                },
                {
                    nameProp: 'quickSearchWidth'
                }
            ]
        };
        return this.poPageCustomizationService.getCustomOptions(onLoad, originalOption, pageOptionSchema);
    }
}
PoPageDynamicSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'po-page-dynamic-search',
                template: "<po-page-list\n  [p-actions]=\"actions\"\n  [p-breadcrumb]=\"breadcrumb\"\n  [p-disclaimer-group]=\"disclaimerGroup\"\n  [p-filter]=\"filterSettings\"\n  [p-title]=\"title\"\n>\n  <po-advanced-filter\n    [p-filters]=\"filters\"\n    [p-keep-filters]=\"keepFilters\"\n    [p-literals]=\"advancedFilterLiterals\"\n    (p-search-event)=\"onAdvancedSearch($event)\"\n  >\n  </po-advanced-filter>\n\n  <ng-content></ng-content>\n</po-page-list>\n"
            },] }
];
PoPageDynamicSearchComponent.ctorParameters = () => [
    { type: PoLanguageService },
    { type: PoPageCustomizationService },
    { type: ChangeDetectorRef }
];
PoPageDynamicSearchComponent.propDecorators = {
    poAdvancedFilter: [{ type: ViewChild, args: [PoAdvancedFilterComponent, { static: true },] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG8tcGFnZS1keW5hbWljLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy90ZW1wbGF0ZXMvc3JjL2xpYi9jb21wb25lbnRzL3BvLXBhZ2UtZHluYW1pYy1zZWFyY2gvcG8tcGFnZS1keW5hbWljLXNlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQXFCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNGLE9BQU8sRUFFTCxrQkFBa0IsRUFFbEIsaUJBQWlCLEVBSWxCLE1BQU0sc0JBQXNCLENBQUM7QUFFOUIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDN0UsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sb0VBQW9FLENBQUM7QUFFaEgsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sbURBQW1ELENBQUM7QUFDOUYsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFPM0Y7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBS0gsTUFBTSxPQUFPLDRCQUE2QixTQUFRLGdDQUFnQztJQW1CaEYsWUFDRSxlQUFrQyxFQUMxQiwwQkFBc0QsRUFDdEQsY0FBaUM7UUFFekMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBSGYsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUN0RCxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFqQjFCLHFCQUFnQixHQUFzQjtZQUNyRCxNQUFNLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDMUMsU0FBUyxFQUFFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2pELFdBQVcsRUFBRSxFQUFFO1lBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsb0JBQW9CO1NBQzFDLENBQUM7UUFFZSxvQkFBZSxHQUFpQjtZQUMvQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hDLGNBQWMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNoRCxXQUFXLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUI7WUFDNUMsS0FBSyxFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDN0IsQ0FBQztJQVFGLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDLENBQUM7SUFDakcsQ0FBQztJQUVELElBQUksY0FBYztRQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUvRyxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDN0MsV0FBVyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCO1lBQzVDLEtBQUssRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1NBQzdCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5QyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDckM7SUFDSCxDQUFDO0lBRUQsZUFBZSxDQUFDLE9BQTBDO1FBQ3hELE1BQU0scUJBQXFCLEdBQUcsT0FBTzthQUNsQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO2FBQ2xDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLGlDQUFNLElBQUksR0FBSyxFQUFFLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRTlGLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUM3QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxNQUFNLEVBQUUscUJBQXFCLEVBQUUsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQUVELFFBQVEsQ0FBQyxXQUFtQjtRQUMxQixNQUFNLDRCQUE0QixHQUFHO1lBQ25DLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLElBQUksV0FBVyxFQUFFO1lBQ3pELEtBQUssRUFBRSxXQUFXO1NBQ25CLENBQUM7UUFFRixNQUFNLCtCQUErQixHQUFHLEdBQUcsRUFBRSxDQUFDO1lBQzVDLEdBQUcsSUFBSSxDQUFDLGdDQUFnQyxFQUFFO1lBQzFDLDRCQUE0QjtTQUM3QixDQUFDO1FBRUYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYTtZQUNwRCxDQUFDLENBQUMsK0JBQStCLEVBQUU7WUFDbkMsQ0FBQyxDQUFDLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUVuQyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzNDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDM0Q7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxnQkFBZ0I7UUFDZCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDL0IsQ0FBQztJQUVELGdCQUFnQixDQUFDLGFBQWE7UUFDNUIsTUFBTSxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFFakQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztRQUVoRixJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXhCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFTyxnQ0FBZ0M7UUFDdEMsTUFBTSxtQkFBbUIsR0FBRyxRQUFRLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssbUJBQW1CLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRU8sVUFBVSxDQUFDLE9BQU87UUFDeEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDN0IsTUFBTSxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUUzRixJQUFJLGdCQUFnQixFQUFFO2dCQUNwQixPQUFPLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLEtBQUssQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxPQUFPLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxPQUFPO1FBQzlCLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVPLDZCQUE2QixDQUFDLEtBQVUsRUFBRSx5QkFBK0M7UUFDL0YsTUFBTSxrQkFBa0IsR0FBRyx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDO1FBRTVGLE9BQU8sa0JBQWtCLENBQUMsS0FBSyxJQUFJLGtCQUFrQixDQUFDLEtBQUssQ0FBQztJQUM5RCxDQUFDO0lBRU8seUJBQXlCLENBQUMsS0FBVSxFQUFFLFdBQWdCO1FBQzVELE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV4RSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sYUFBYSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksTUFBTSxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBRS9GLElBQUksYUFBYSxFQUFFO2dCQUNqQixPQUFPLGFBQWEsQ0FBQyxLQUFLLElBQUksYUFBYSxDQUFDLEtBQUssSUFBSSxhQUFhLENBQUM7YUFDcEU7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRU8sVUFBVSxDQUFDLElBQVk7UUFDN0IsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM5QyxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFNUMsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVPLDJCQUEyQixDQUNqQyxPQUFrRTtRQUVsRSxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUNwQyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsRUFDMUYsRUFBRSxDQUNILENBQUM7UUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN6QixPQUFPLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM3QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVPLGtCQUFrQixDQUFDLE1BQWlDLEVBQUUsU0FBaUI7UUFDN0UsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBeUIsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQztJQUNsRixDQUFDO0lBRU8sMEJBQTBCLENBQUMsS0FBVSxFQUFFLEtBQVUsRUFBRSx5QkFBZ0Q7UUFDekcsSUFBSSxLQUFLLENBQUMsY0FBYyxJQUFJLHlCQUF5QixFQUFFO1lBQ3JELE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLEtBQUssRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO1NBQzdFO1FBRUQsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGtCQUFrQixDQUFDLElBQUksRUFBRTtZQUMxQyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqSDtRQUVELElBQUksS0FBSyxDQUFDLE9BQU8sSUFBSSxLQUFLLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3JEO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRU8sa0JBQWtCLENBQUMsVUFBeUM7UUFDbEUsTUFBTSxFQUFFLGtCQUFrQixFQUFFLEdBQUcsVUFBVSxDQUFDO1FBRTFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFTyxzQkFBc0IsQ0FBQyxrQkFBdUI7UUFDcEQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRU8sc0JBQXNCO1FBQzVCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRU8sY0FBYyxDQUFDLE9BQU8sRUFBRSxxQkFBNEM7UUFDMUUsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM1QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM5RCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxJQUFJLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuRSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFaEMsTUFBTSxrQ0FBa0MsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBRWhILElBQUksa0NBQWtDLEtBQUssRUFBRSxFQUFFO2dCQUM3QyxXQUFXLENBQUMsSUFBSSxDQUFDO29CQUNmLEtBQUssRUFBRSxHQUFHLEtBQUssS0FBSyxrQ0FBa0MsRUFBRTtvQkFDeEQsUUFBUTtvQkFDUixLQUFLO2lCQUNOLENBQUMsQ0FBQzthQUNKO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRU8sdUJBQXVCLENBQUMsTUFBb0M7UUFDbEUsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUN4RixJQUFJLENBQUMsMEJBQTBCLENBQUMsaUNBQWlDLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQzFGLENBQUM7SUFDSixDQUFDO0lBRU8sdUJBQXVCLENBQUMsTUFBb0M7UUFDbEUsTUFBTSxjQUFjLEdBQStCO1lBQ2pELEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVc7WUFDN0IsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0I7U0FDeEMsQ0FBQztRQUVGLE1BQU0sZ0JBQWdCLEdBQTJEO1lBQy9FLE1BQU0sRUFBRTtnQkFDTjtvQkFDRSxRQUFRLEVBQUUsU0FBUztvQkFDbkIsS0FBSyxFQUFFLElBQUk7b0JBQ1gsV0FBVyxFQUFFLFVBQVU7aUJBQ3hCO2dCQUNEO29CQUNFLFFBQVEsRUFBRSxTQUFTO29CQUNuQixLQUFLLEVBQUUsSUFBSTtvQkFDWCxXQUFXLEVBQUUsT0FBTztpQkFDckI7Z0JBQ0Q7b0JBQ0UsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCO2dCQUNEO29CQUNFLFFBQVEsRUFBRSxPQUFPO2lCQUNsQjtnQkFDRDtvQkFDRSxRQUFRLEVBQUUsYUFBYTtpQkFDeEI7Z0JBQ0Q7b0JBQ0UsUUFBUSxFQUFFLGVBQWU7aUJBQzFCO2dCQUNEO29CQUNFLFFBQVEsRUFBRSxrQkFBa0I7aUJBQzdCO2FBQ0Y7U0FDRixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BHLENBQUM7OztZQTFSRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsc2NBQXNEO2FBQ3ZEOzs7WUFwQ0MsaUJBQWlCO1lBT1YsMEJBQTBCO1lBZGUsaUJBQWlCOzs7K0JBNkNoRSxTQUFTLFNBQUMseUJBQXlCLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQsIE9uSW5pdCwgT25EZXN0cm95LCBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIFBvRGlzY2xhaW1lckdyb3VwLFxuICBQb0R5bmFtaWNGaWVsZFR5cGUsXG4gIFBvRHluYW1pY0Zvcm1GaWVsZCxcbiAgUG9MYW5ndWFnZVNlcnZpY2UsXG4gIFBvUGFnZUZpbHRlcixcbiAgUG9EaXNjbGFpbWVyR3JvdXBSZW1vdmVBY3Rpb24sXG4gIFBvQ29tYm9PcHRpb25cbn0gZnJvbSAnQHBvLXVpL25nLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBjYXBpdGFsaXplRmlyc3RMZXR0ZXIsIGdldEJyb3dzZXJMYW5ndWFnZSB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwnO1xuaW1wb3J0IHsgUG9QYWdlQ3VzdG9taXphdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9wby1wYWdlLWN1c3RvbWl6YXRpb24vcG8tcGFnZS1jdXN0b21pemF0aW9uLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBQb0FkdmFuY2VkRmlsdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9wby1hZHZhbmNlZC1maWx0ZXIvcG8tYWR2YW5jZWQtZmlsdGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljU2VhcmNoQmFzZUNvbXBvbmVudCB9IGZyb20gJy4vcG8tcGFnZS1keW5hbWljLXNlYXJjaC1iYXNlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljU2VhcmNoT3B0aW9ucyB9IGZyb20gJy4vcG8tcGFnZS1keW5hbWljLXNlYXJjaC1vcHRpb25zLmludGVyZmFjZSc7XG5pbXBvcnQgeyBQb1BhZ2VEeW5hbWljT3B0aW9uc1NjaGVtYSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzJztcbmltcG9ydCB7IFBvUGFnZUR5bmFtaWNTZWFyY2hGaWx0ZXJzIH0gZnJvbSAnLi9wby1wYWdlLWR5bmFtaWMtc2VhcmNoLWZpbHRlcnMuaW50ZXJmYWNlJztcblxudHlwZSBVcmxPclBvQ3VzdG9taXphdGlvbkZ1bmN0aW9uID0gc3RyaW5nIHwgKCgpID0+IFBvUGFnZUR5bmFtaWNTZWFyY2hPcHRpb25zKTtcblxuLyoqXG4gKiBAZG9jc0V4dGVuZHMgUG9QYWdlRHluYW1pY1NlYXJjaEJhc2VDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJwby1wYWdlLWR5bmFtaWMtc2VhcmNoLWJhc2ljXCIgdGl0bGU9XCJQTyBQYWdlIER5bmFtaWMgU2VhcmNoIEJhc2ljXCI+XG4gKiAgPGZpbGUgbmFtZT1cInNhbXBsZS1wby1wYWdlLWR5bmFtaWMtc2VhcmNoLWJhc2ljL3NhbXBsZS1wby1wYWdlLWR5bmFtaWMtc2VhcmNoLWJhc2ljLmNvbXBvbmVudC5odG1sXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXBhZ2UtZHluYW1pYy1zZWFyY2gtYmFzaWMvc2FtcGxlLXBvLXBhZ2UtZHluYW1pYy1zZWFyY2gtYmFzaWMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwicG8tcGFnZS1keW5hbWljLXNlYXJjaC1oaXJpbmctcHJvY2Vzc2VzXCIgdGl0bGU9XCJQTyBQYWdlIER5bmFtaWMgU2VhcmNoIC0gSGlyaW5nIHByb2Nlc3Nlc1wiPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcGFnZS1keW5hbWljLXNlYXJjaC1oaXJpbmctcHJvY2Vzc2VzL3NhbXBsZS1wby1wYWdlLWR5bmFtaWMtc2VhcmNoLWhpcmluZy1wcm9jZXNzZXMuY29tcG9uZW50Lmh0bWxcIj4gPC9maWxlPlxuICogIDxmaWxlIG5hbWU9XCJzYW1wbGUtcG8tcGFnZS1keW5hbWljLXNlYXJjaC1oaXJpbmctcHJvY2Vzc2VzL3NhbXBsZS1wby1wYWdlLWR5bmFtaWMtc2VhcmNoLWhpcmluZy1wcm9jZXNzZXMuY29tcG9uZW50LnRzXCI+IDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwic2FtcGxlLXBvLXBhZ2UtZHluYW1pYy1zZWFyY2gtaGlyaW5nLXByb2Nlc3Nlcy9zYW1wbGUtcG8tcGFnZS1keW5hbWljLXNlYXJjaC1oaXJpbmctcHJvY2Vzc2VzLnNlcnZpY2UudHNcIj4gPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwby1wYWdlLWR5bmFtaWMtc2VhcmNoJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BvLXBhZ2UtZHluYW1pYy1zZWFyY2guY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFBvUGFnZUR5bmFtaWNTZWFyY2hDb21wb25lbnQgZXh0ZW5kcyBQb1BhZ2VEeW5hbWljU2VhcmNoQmFzZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZChQb0FkdmFuY2VkRmlsdGVyQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSBwb0FkdmFuY2VkRmlsdGVyOiBQb0FkdmFuY2VkRmlsdGVyQ29tcG9uZW50O1xuXG4gIHByaXZhdGUgbG9hZFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX2Rpc2NsYWltZXJHcm91cDogUG9EaXNjbGFpbWVyR3JvdXAgPSB7XG4gICAgcmVtb3ZlOiB0aGlzLm9uUmVtb3ZlRGlzY2xhaW1lci5iaW5kKHRoaXMpLFxuICAgIHJlbW92ZUFsbDogdGhpcy5vblJlbW92ZUFsbERpc2NsYWltZXJzLmJpbmQodGhpcyksXG4gICAgZGlzY2xhaW1lcnM6IFtdLFxuICAgIHRpdGxlOiB0aGlzLmxpdGVyYWxzLmRpc2NsYWltZXJHcm91cFRpdGxlXG4gIH07XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfZmlsdGVyU2V0dGluZ3M6IFBvUGFnZUZpbHRlciA9IHtcbiAgICBhY3Rpb246IHRoaXMub25BY3Rpb24uYmluZCh0aGlzKSxcbiAgICBhZHZhbmNlZEFjdGlvbjogdGhpcy5vbkFkdmFuY2VkQWN0aW9uLmJpbmQodGhpcyksXG4gICAgcGxhY2Vob2xkZXI6IHRoaXMubGl0ZXJhbHMuc2VhcmNoUGxhY2Vob2xkZXIsXG4gICAgd2lkdGg6IHRoaXMucXVpY2tTZWFyY2hXaWR0aFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGxhbmd1YWdlU2VydmljZTogUG9MYW5ndWFnZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBwb1BhZ2VDdXN0b21pemF0aW9uU2VydmljZTogUG9QYWdlQ3VzdG9taXphdGlvblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvcjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgc3VwZXIobGFuZ3VhZ2VTZXJ2aWNlKTtcbiAgfVxuXG4gIGdldCBkaXNjbGFpbWVyR3JvdXAoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2Rpc2NsYWltZXJHcm91cCwgeyB0aXRsZTogdGhpcy5saXRlcmFscy5kaXNjbGFpbWVyR3JvdXBUaXRsZSB9KTtcbiAgfVxuXG4gIGdldCBmaWx0ZXJTZXR0aW5ncygpIHtcbiAgICB0aGlzLl9maWx0ZXJTZXR0aW5ncy5hZHZhbmNlZEFjdGlvbiA9IHRoaXMuZmlsdGVycy5sZW5ndGggPT09IDAgPyB1bmRlZmluZWQgOiB0aGlzLm9uQWR2YW5jZWRBY3Rpb24uYmluZCh0aGlzKTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9maWx0ZXJTZXR0aW5ncywge1xuICAgICAgcGxhY2Vob2xkZXI6IHRoaXMubGl0ZXJhbHMuc2VhcmNoUGxhY2Vob2xkZXIsXG4gICAgICB3aWR0aDogdGhpcy5xdWlja1NlYXJjaFdpZHRoXG4gICAgfSk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnNldEFkdmFuY2VkRmlsdGVyTGl0ZXJhbHModGhpcy5saXRlcmFscyk7XG4gICAgaWYgKHRoaXMub25Mb2FkKSB7XG4gICAgICB0aGlzLmxvYWRPcHRpb25zT25Jbml0aWFsaXplKHRoaXMub25Mb2FkKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5sb2FkU3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmxvYWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBvbkNoYW5nZUZpbHRlcnMoZmlsdGVyczogQXJyYXk8UG9QYWdlRHluYW1pY1NlYXJjaEZpbHRlcnM+KSB7XG4gICAgY29uc3QgZmlsdGVyT2JqZWN0V2l0aFZhbHVlID0gZmlsdGVyc1xuICAgICAgLmZpbHRlcihmaWx0ZXIgPT4gZmlsdGVyLmluaXRWYWx1ZSlcbiAgICAgIC5yZWR1Y2UoKHByZXYsIGN1cnJlbnQpID0+ICh7IC4uLnByZXYsIC4uLnsgW2N1cnJlbnQucHJvcGVydHldOiBjdXJyZW50LmluaXRWYWx1ZSB9IH0pLCB7fSk7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZmlsdGVyT2JqZWN0V2l0aFZhbHVlKS5sZW5ndGgpIHtcbiAgICAgIHRoaXMub25BZHZhbmNlZFNlYXJjaCh7IGZpbHRlcjogZmlsdGVyT2JqZWN0V2l0aFZhbHVlIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uQWN0aW9uKHF1aWNrRmlsdGVyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkaXNjbGFpbWVyUXVpY2tTZWFyY2hVcGRhdGVkID0ge1xuICAgICAgcHJvcGVydHk6ICdzZWFyY2gnLFxuICAgICAgbGFiZWw6IGAke3RoaXMubGl0ZXJhbHMucXVpY2tTZWFyY2hMYWJlbH0gJHtxdWlja0ZpbHRlcn1gLFxuICAgICAgdmFsdWU6IHF1aWNrRmlsdGVyXG4gICAgfTtcblxuICAgIGNvbnN0IGdldERpc2NsYWltZXJzV2l0aENvbmNhdEZpbHRlcnMgPSAoKSA9PiBbXG4gICAgICAuLi50aGlzLmdldERpc2NsYWltZXJzV2l0aG91dFF1aWNrU2VhcmNoKCksXG4gICAgICBkaXNjbGFpbWVyUXVpY2tTZWFyY2hVcGRhdGVkXG4gICAgXTtcblxuICAgIHRoaXMuX2Rpc2NsYWltZXJHcm91cC5kaXNjbGFpbWVycyA9IHRoaXMuY29uY2F0RmlsdGVyc1xuICAgICAgPyBnZXREaXNjbGFpbWVyc1dpdGhDb25jYXRGaWx0ZXJzKClcbiAgICAgIDogW2Rpc2NsYWltZXJRdWlja1NlYXJjaFVwZGF0ZWRdO1xuXG4gICAgaWYgKHRoaXMucXVpY2tTZWFyY2gub2JzZXJ2ZXJzICYmIHRoaXMucXVpY2tTZWFyY2gub2JzZXJ2ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMucXVpY2tTZWFyY2guZW1pdChxdWlja0ZpbHRlcik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMua2VlcEZpbHRlcnMgJiYgIXRoaXMuY29uY2F0RmlsdGVycykge1xuICAgICAgdGhpcy5maWx0ZXJzLmZvckVhY2goZWxlbWVudCA9PiBkZWxldGUgZWxlbWVudC5pbml0VmFsdWUpO1xuICAgIH1cblxuICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IuZGV0ZWN0Q2hhbmdlcygpO1xuICB9XG5cbiAgb25BZHZhbmNlZEFjdGlvbigpIHtcbiAgICB0aGlzLnBvQWR2YW5jZWRGaWx0ZXIub3BlbigpO1xuICB9XG5cbiAgb25BZHZhbmNlZFNlYXJjaChmaWx0ZXJlZEl0ZW1zKSB7XG4gICAgY29uc3QgeyBmaWx0ZXIsIG9wdGlvbnNTZXJ2aWNlIH0gPSBmaWx0ZXJlZEl0ZW1zO1xuXG4gICAgdGhpcy5fZGlzY2xhaW1lckdyb3VwLmRpc2NsYWltZXJzID0gdGhpcy5zZXREaXNjbGFpbWVycyhmaWx0ZXIsIG9wdGlvbnNTZXJ2aWNlKTtcblxuICAgIHRoaXMuc2V0RmlsdGVycyhmaWx0ZXIpO1xuXG4gICAgdGhpcy5hZHZhbmNlZFNlYXJjaC5lbWl0KGZpbHRlcik7XG4gIH1cblxuICBwcml2YXRlIGdldERpc2NsYWltZXJzV2l0aG91dFF1aWNrU2VhcmNoKCkge1xuICAgIGNvbnN0IHF1aWNrU2VhcmNoUHJvcGVydHkgPSAnc2VhcmNoJztcbiAgICByZXR1cm4gdGhpcy5fZGlzY2xhaW1lckdyb3VwLmRpc2NsYWltZXJzLmZpbHRlcihpdGVtID0+IGl0ZW0ucHJvcGVydHkgIT09IHF1aWNrU2VhcmNoUHJvcGVydHkpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRGaWx0ZXJzKGZpbHRlcnMpIHtcbiAgICBjb25zdCBmb3JtYXR0ZWRGaWx0ZXJzID0gdGhpcy5jb252ZXJ0VG9GaWx0ZXJzKGZpbHRlcnMpO1xuXG4gICAgdGhpcy5maWx0ZXJzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICBjb25zdCBjb21wYXRpYmxlT2JqZWN0ID0gZm9ybWF0dGVkRmlsdGVycy5maW5kKGl0ZW0gPT4gaXRlbS5wcm9wZXJ0eSA9PT0gZWxlbWVudC5wcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChjb21wYXRpYmxlT2JqZWN0KSB7XG4gICAgICAgIGVsZW1lbnQuaW5pdFZhbHVlID0gY29tcGF0aWJsZU9iamVjdC52YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmluaXRWYWx1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY29udmVydFRvRmlsdGVycyhmaWx0ZXJzKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZpbHRlcnMpLm1hcCgoW3Byb3BlcnR5LCB2YWx1ZV0pID0+ICh7IHByb3BlcnR5LCB2YWx1ZSB9KSk7XG4gIH1cblxuICBwcml2YXRlIG9wdGlvbnNTZXJ2aWNlRGlzY2xhaW1lckxhYmVsKHZhbHVlOiBhbnksIG9wdGlvbnNTZXJ2aWNlT2JqZWN0c0xpc3Q6IEFycmF5PFBvQ29tYm9PcHRpb24+KSB7XG4gICAgY29uc3Qgb3B0aW9uU2VydmljZU1hdGNoID0gb3B0aW9uc1NlcnZpY2VPYmplY3RzTGlzdC5maW5kKG9wdGlvbiA9PiBvcHRpb24udmFsdWUgPT09IHZhbHVlKTtcblxuICAgIHJldHVybiBvcHRpb25TZXJ2aWNlTWF0Y2gubGFiZWwgfHwgb3B0aW9uU2VydmljZU1hdGNoLnZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBhcHBseURpc2NsYWltZXJMYWJlbFZhbHVlKGZpZWxkOiBhbnksIGZpbHRlclZhbHVlOiBhbnkpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KGZpbHRlclZhbHVlKSA/IGZpbHRlclZhbHVlIDogW2ZpbHRlclZhbHVlXTtcblxuICAgIGNvbnN0IGxhYmVscyA9IHZhbHVlcy5tYXAodmFsdWUgPT4ge1xuICAgICAgY29uc3QgZmlsdGVyZWRGaWVsZCA9IGZpZWxkLm9wdGlvbnMuZmluZChvcHRpb24gPT4gb3B0aW9uLnZhbHVlID09PSB2YWx1ZSB8fCBvcHRpb24gPT09IHZhbHVlKTtcblxuICAgICAgaWYgKGZpbHRlcmVkRmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkRmllbGQubGFiZWwgfHwgZmlsdGVyZWRGaWVsZC52YWx1ZSB8fCBmaWx0ZXJlZEZpZWxkO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxhYmVscy5qb2luKCcsICcpO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXREYXRlKGRhdGU6IHN0cmluZykge1xuICAgIGNvbnN0IHllYXIgPSBwYXJzZUludChkYXRlLnN1YnN0cigwLCA0KSwgMTApO1xuICAgIGNvbnN0IG1vbnRoID0gcGFyc2VJbnQoZGF0ZS5zdWJzdHIoNSwgMiksIDEwKTtcbiAgICBjb25zdCBkYXkgPSBwYXJzZUludChkYXRlLnN1YnN0cig4LCAyKSwgMTApO1xuXG4gICAgcmV0dXJuIG5ldyBEYXRlKHllYXIsIG1vbnRoIC0gMSwgZGF5KS50b0xvY2FsZURhdGVTdHJpbmcoZ2V0QnJvd3Nlckxhbmd1YWdlKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBmb3JtYXRBcnJheVRvT2JqZWN0S2V5VmFsdWUoXG4gICAgZmlsdGVyczogQXJyYXk8eyBwcm9wZXJ0eTogc3RyaW5nOyB2YWx1ZT86IGFueTsgaW5pdFZhbHVlPzogYW55IH0+XG4gICk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xuICAgIGNvbnN0IGZvcm1hdHRlZE9iamVjdCA9IGZpbHRlcnMucmVkdWNlKFxuICAgICAgKHJlc3VsdCwgaXRlbSkgPT4gT2JqZWN0LmFzc2lnbihyZXN1bHQsIHsgW2l0ZW0ucHJvcGVydHldOiBpdGVtLnZhbHVlIHx8IGl0ZW0uaW5pdFZhbHVlIH0pLFxuICAgICAge31cbiAgICApO1xuXG4gICAgT2JqZWN0LmtleXMoZm9ybWF0dGVkT2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIWZvcm1hdHRlZE9iamVjdFtrZXldKSB7XG4gICAgICAgIGRlbGV0ZSBmb3JtYXR0ZWRPYmplY3Rba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmb3JtYXR0ZWRPYmplY3Q7XG4gIH1cblxuICBwcml2YXRlIGdldEZpZWxkQnlQcm9wZXJ0eShmaWVsZHM6IEFycmF5PFBvRHluYW1pY0Zvcm1GaWVsZD4sIGZpZWxkTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGZpZWxkcy5maW5kKChmaWVsZDogUG9EeW5hbWljRm9ybUZpZWxkKSA9PiBmaWVsZC5wcm9wZXJ0eSA9PT0gZmllbGROYW1lKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RmlsdGVyVmFsdWVUb0Rpc2NsYWltZXIoZmllbGQ6IGFueSwgdmFsdWU6IGFueSwgb3B0aW9uc1NlcnZpY2VPYmplY3RzTGlzdD86IEFycmF5PFBvQ29tYm9PcHRpb24+KSB7XG4gICAgaWYgKGZpZWxkLm9wdGlvbnNTZXJ2aWNlICYmIG9wdGlvbnNTZXJ2aWNlT2JqZWN0c0xpc3QpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNTZXJ2aWNlRGlzY2xhaW1lckxhYmVsKHZhbHVlLCBvcHRpb25zU2VydmljZU9iamVjdHNMaXN0KTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudHlwZSA9PT0gUG9EeW5hbWljRmllbGRUeXBlLkRhdGUpIHtcbiAgICAgIHJldHVybiBmaWVsZC5yYW5nZSA/IHRoaXMuZm9ybWF0RGF0ZSh2YWx1ZS5zdGFydCkgKyAnIC0gJyArIHRoaXMuZm9ybWF0RGF0ZSh2YWx1ZS5lbmQpIDogdGhpcy5mb3JtYXREYXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQub3B0aW9ucyAmJiB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlEaXNjbGFpbWVyTGFiZWxWYWx1ZShmaWVsZCwgdmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgb25SZW1vdmVEaXNjbGFpbWVyKHJlbW92ZURhdGE6IFBvRGlzY2xhaW1lckdyb3VwUmVtb3ZlQWN0aW9uKSB7XG4gICAgY29uc3QgeyBjdXJyZW50RGlzY2xhaW1lcnMgfSA9IHJlbW92ZURhdGE7XG5cbiAgICB0aGlzLmVtaXRDaGFuZ2VzRGlzY2xhaW1lcnMoY3VycmVudERpc2NsYWltZXJzKTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdENoYW5nZXNEaXNjbGFpbWVycyhjdXJyZW50RGlzY2xhaW1lcnM6IGFueSkge1xuICAgIHRoaXMuY2hhbmdlRGlzY2xhaW1lcnMuZW1pdChjdXJyZW50RGlzY2xhaW1lcnMpO1xuICAgIHRoaXMuc2V0RmlsdGVycyh0aGlzLmZvcm1hdEFycmF5VG9PYmplY3RLZXlWYWx1ZShjdXJyZW50RGlzY2xhaW1lcnMpKTtcbiAgfVxuXG4gIHByaXZhdGUgb25SZW1vdmVBbGxEaXNjbGFpbWVycygpIHtcbiAgICB0aGlzLmVtaXRDaGFuZ2VzRGlzY2xhaW1lcnMoW10pO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXREaXNjbGFpbWVycyhmaWx0ZXJzLCBvcHRpb25zU2VydmljZU9iamVjdHM/OiBBcnJheTxQb0NvbWJvT3B0aW9uPikge1xuICAgIGNvbnN0IGRpc2NsYWltZXJzID0gW107XG4gICAgY29uc3QgcHJvcGVydGllcyA9IE9iamVjdC5rZXlzKGZpbHRlcnMpO1xuXG4gICAgcHJvcGVydGllcy5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIGNvbnN0IGZpZWxkID0gdGhpcy5nZXRGaWVsZEJ5UHJvcGVydHkodGhpcy5maWx0ZXJzLCBwcm9wZXJ0eSk7XG4gICAgICBjb25zdCBsYWJlbCA9IGZpZWxkLmxhYmVsIHx8IGNhcGl0YWxpemVGaXJzdExldHRlcihmaWVsZC5wcm9wZXJ0eSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGZpbHRlcnNbcHJvcGVydHldO1xuXG4gICAgICBjb25zdCB2YWx1ZURpc3BsYXllZE9uVGhlRGlzY2xhaW1lckxhYmVsID0gdGhpcy5nZXRGaWx0ZXJWYWx1ZVRvRGlzY2xhaW1lcihmaWVsZCwgdmFsdWUsIG9wdGlvbnNTZXJ2aWNlT2JqZWN0cyk7XG5cbiAgICAgIGlmICh2YWx1ZURpc3BsYXllZE9uVGhlRGlzY2xhaW1lckxhYmVsICE9PSAnJykge1xuICAgICAgICBkaXNjbGFpbWVycy5wdXNoKHtcbiAgICAgICAgICBsYWJlbDogYCR7bGFiZWx9OiAke3ZhbHVlRGlzcGxheWVkT25UaGVEaXNjbGFpbWVyTGFiZWx9YCxcbiAgICAgICAgICBwcm9wZXJ0eSxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkaXNjbGFpbWVycztcbiAgfVxuXG4gIHByaXZhdGUgbG9hZE9wdGlvbnNPbkluaXRpYWxpemUob25Mb2FkOiBVcmxPclBvQ3VzdG9taXphdGlvbkZ1bmN0aW9uKSB7XG4gICAgdGhpcy5sb2FkU3Vic2NyaXB0aW9uID0gdGhpcy5nZXRQb0R5bmFtaWNQYWdlT3B0aW9ucyhvbkxvYWQpLnN1YnNjcmliZShyZXNwb25zZVBvT3B0aW9uID0+XG4gICAgICB0aGlzLnBvUGFnZUN1c3RvbWl6YXRpb25TZXJ2aWNlLmNoYW5nZU9yaWdpbmFsT3B0aW9uc1RvTmV3T3B0aW9ucyh0aGlzLCByZXNwb25zZVBvT3B0aW9uKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldFBvRHluYW1pY1BhZ2VPcHRpb25zKG9uTG9hZDogVXJsT3JQb0N1c3RvbWl6YXRpb25GdW5jdGlvbik6IE9ic2VydmFibGU8UG9QYWdlRHluYW1pY1NlYXJjaE9wdGlvbnM+IHtcbiAgICBjb25zdCBvcmlnaW5hbE9wdGlvbjogUG9QYWdlRHluYW1pY1NlYXJjaE9wdGlvbnMgPSB7XG4gICAgICB0aXRsZTogdGhpcy50aXRsZSxcbiAgICAgIGFjdGlvbnM6IHRoaXMuYWN0aW9ucyxcbiAgICAgIGJyZWFkY3J1bWI6IHRoaXMuYnJlYWRjcnVtYixcbiAgICAgIGZpbHRlcnM6IHRoaXMuZmlsdGVycyxcbiAgICAgIGtlZXBGaWx0ZXJzOiB0aGlzLmtlZXBGaWx0ZXJzLFxuICAgICAgY29uY2F0RmlsdGVyczogdGhpcy5jb25jYXRGaWx0ZXJzLFxuICAgICAgcXVpY2tTZWFyY2hXaWR0aDogdGhpcy5xdWlja1NlYXJjaFdpZHRoXG4gICAgfTtcblxuICAgIGNvbnN0IHBhZ2VPcHRpb25TY2hlbWE6IFBvUGFnZUR5bmFtaWNPcHRpb25zU2NoZW1hPFBvUGFnZUR5bmFtaWNTZWFyY2hPcHRpb25zPiA9IHtcbiAgICAgIHNjaGVtYTogW1xuICAgICAgICB7XG4gICAgICAgICAgbmFtZVByb3A6ICdmaWx0ZXJzJyxcbiAgICAgICAgICBtZXJnZTogdHJ1ZSxcbiAgICAgICAgICBrZXlGb3JNZXJnZTogJ3Byb3BlcnR5J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZVByb3A6ICdhY3Rpb25zJyxcbiAgICAgICAgICBtZXJnZTogdHJ1ZSxcbiAgICAgICAgICBrZXlGb3JNZXJnZTogJ2xhYmVsJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZVByb3A6ICdicmVhZGNydW1iJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZVByb3A6ICd0aXRsZSdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWVQcm9wOiAna2VlcEZpbHRlcnMnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lUHJvcDogJ2NvbmNhdEZpbHRlcnMnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lUHJvcDogJ3F1aWNrU2VhcmNoV2lkdGgnXG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMucG9QYWdlQ3VzdG9taXphdGlvblNlcnZpY2UuZ2V0Q3VzdG9tT3B0aW9ucyhvbkxvYWQsIG9yaWdpbmFsT3B0aW9uLCBwYWdlT3B0aW9uU2NoZW1hKTtcbiAgfVxufVxuIl19