import { Input, Directive } from '@angular/core';
import { PoPageJobSchedulerInternal } from './po-page-job-scheduler-internal';
import { PoPageJobSchedulerService } from './po-page-job-scheduler.service';
import { Subscription } from 'rxjs';
/**
 * @description
 *
 * O `po-page-job-scheduler` é uma página para criação e atualização de agendamentos da execução de processos (Job Scheduler),
 * como por exemplo: a geração da folha de pagamento dos funcionários.
 *
 * Para utilizar esta página, basta informar o serviço (endpoint) para consumo,
 * sem a necessidade de criar componentes e tratamentos dos dados.
 *
 * Veja mais sobre os padrões utilizados nas requisições no [Guia de implementação de APIs](guides/api).
 */
export class PoPageJobSchedulerBaseComponent {
    constructor(poPageJobSchedulerService) {
        this.poPageJobSchedulerService = poPageJobSchedulerService;
        /** Objeto com as propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        /**
         * Parâmetros que serão utilizados para criação e edição dos agendamentos.
         *
         * Ao utilizar esta propriedade, o componente não buscará automaticamente os parâmetros da API e o campo para preenchimento do processo não será exibido.
         *
         */
        this.parameters = [];
        this.model = new PoPageJobSchedulerInternal();
        this._subscription = new Subscription();
    }
    set value(value) {
        this.model = this.poPageJobSchedulerService.convertToJobSchedulerInternal(value);
    }
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
    loadData(id) {
        if (!id) {
            this.model = this.model || new PoPageJobSchedulerInternal();
            return;
        }
        this._subscription.add(this.poPageJobSchedulerService.getResource(id).subscribe((response) => {
            this.model = response;
        }, () => {
            this.model = new PoPageJobSchedulerInternal();
        }));
    }
    markAsDirtyInvalidControls(controls) {
        for (const key in controls) {
            if (controls.hasOwnProperty(key)) {
                const control = controls[key];
                if (control.invalid) {
                    control.markAsDirty();
                }
            }
        }
    }
}
PoPageJobSchedulerBaseComponent.decorators = [
    { type: Directive }
];
PoPageJobSchedulerBaseComponent.ctorParameters = () => [
    { type: PoPageJobSchedulerService }
];
PoPageJobSchedulerBaseComponent.propDecorators = {
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    serviceApi: [{ type: Input, args: ['p-service-api',] }],
    title: [{ type: Input, args: ['p-title',] }],
    parameters: [{ type: Input, args: ['p-parameters',] }],
    value: [{ type: Input, args: ['p-value',] }]
};
//# sourceMappingURL=data:application/json;base64,