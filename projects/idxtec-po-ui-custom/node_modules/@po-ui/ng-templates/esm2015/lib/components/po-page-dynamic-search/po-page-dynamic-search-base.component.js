import { __decorate } from "tslib";
import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { InputBoolean, PoLanguageService, poLocaleDefault } from '@po-ui/ng-components';
import { convertToInt } from '../../utils/util';
import { poAdvancedFiltersLiteralsDefault } from './po-advanced-filter/po-advanced-filter-base.component';
export const poPageDynamicSearchLiteralsDefault = {
    en: {
        disclaimerGroupTitle: 'Displaying results filtered by:',
        filterTitle: poAdvancedFiltersLiteralsDefault.en.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.en.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.en.confirmLabel,
        quickSearchLabel: 'Quick search:',
        searchPlaceholder: 'Search'
    },
    es: {
        disclaimerGroupTitle: 'Presentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.es.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.es.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.es.confirmLabel,
        quickSearchLabel: 'Búsqueda rápida:',
        searchPlaceholder: 'Buscar'
    },
    pt: {
        disclaimerGroupTitle: 'Apresentando resultados filtrados por:',
        filterTitle: poAdvancedFiltersLiteralsDefault.pt.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.pt.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.pt.confirmLabel,
        quickSearchLabel: 'Pesquisa rápida:',
        searchPlaceholder: 'Pesquisar'
    },
    ru: {
        disclaimerGroupTitle: 'Отображение результатов, отфильтрованных по:',
        filterTitle: poAdvancedFiltersLiteralsDefault.ru.title,
        filterCancelLabel: poAdvancedFiltersLiteralsDefault.ru.cancelLabel,
        filterConfirmLabel: poAdvancedFiltersLiteralsDefault.ru.confirmLabel,
        quickSearchLabel: 'Быстрый поиск:',
        searchPlaceholder: 'исследование'
    }
};
/**
 * @description
 *
 * Componente com as ações de pesquisa já definidas, bastando que o desenvolvedor implemente apenas a chamada para as APIs
 * e exiba as informações.
 */
export class PoPageDynamicSearchBaseComponent {
    constructor(languageService) {
        /** Nesta propriedade deve ser definido um array de objetos que implementam a interface `PoPageAction`. */
        this.actions = [];
        /** Objeto com propriedades do breadcrumb. */
        this.breadcrumb = { items: [] };
        /**
         * @optional
         *
         * @description
         *
         * Mantém na busca avançada os valores preenchidos do último filtro realizado pelo usuário.
         *
         * @default `false`
         */
        this.keepFilters = false;
        /**
         * @optional
         *
         * @description
         *
         * Permite a utilização da pesquisa rápida junto com a pesquisa avançada.
         *
         * Desta forma, ao ter uma pesquisa avançada estabelecida e ser
         * preenchido a pesquisa rápida, o filtro será concatenado adicionando a pesquisa
         * rápida também na lista de `disclaimers`.
         *
         * > Os valores que são emitidos no `p-quick-search` e no `p-advanced-search`
         * permanecem separados durante a emissão dos valores alterados. A concatenação
         * é apenas nos `disclaimers`.
         *
         * @default `false`
         */
        this.concatFilters = false;
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao executar a pesquisa avançada, o mesmo irá repassar um objeto com os valores preenchidos no modal de pesquisa.
         *
         * > Campos não preenchidos não irão aparecer no objeto passado por parâmetro.
         */
        this.advancedSearch = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao remover um ou todos os disclaimers pelo usuário.
         */
        this.changeDisclaimers = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Evento disparado ao realizar uma busca pelo campo de pesquisa rápida, o mesmo será chamado repassando o valor digitado.
         */
        this.quickSearch = new EventEmitter();
        this._filters = [];
        this.language = languageService.getShortLanguage();
    }
    /**
     * @optional
     *
     * @description
     *
     * Objeto com as literais usadas no `po-page-dynamic-search`.
     *
     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    disclaimerGroupTitle: 'Filtros aplicados:',
     *    filterTitle: 'Filtro avançado',
     *    filterCancelLabel: 'Fechar',
     *    filterConfirmLabel: 'Aplicar',
     *    quickSearchLabel: 'Valor pesquisado:',
     *    searchPlaceholder: 'Pesquise aqui'
     *  };
     * ```
     *
     * Ou passando apenas as literais que deseja customizar:
     *
     * ```
     *  const customLiterals: PoPageDynamicSearchLiterals = {
     *    filterTitle: 'Filtro avançado'
     *  };
     * ```
     *
     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.
     *
     * ```
     * <po-page-dynamic-search
     *   [p-literals]="customLiterals">
     * </po-page-dynamic-search>
     * ```
     *
     * > O valor padrão será traduzido de acordo com o idioma configurado no [`PoI18nService`](/documentation/po-i18n) ou *browser*.
     */
    set literals(value) {
        if (value instanceof Object && !(value instanceof Array)) {
            this._literals = Object.assign(Object.assign(Object.assign({}, poPageDynamicSearchLiteralsDefault[poLocaleDefault]), poPageDynamicSearchLiteralsDefault[this.language]), value);
        }
        else {
            this._literals = poPageDynamicSearchLiteralsDefault[this.language];
        }
        this.setAdvancedFilterLiterals(this.literals);
    }
    get literals() {
        return this._literals || poPageDynamicSearchLiteralsDefault[this.language];
    }
    /**
     * @optional
     *
     * @description
     *
     * Lista dos campos usados na busca avançada. Caso o mesmo não seja passado a busca avançada não será exibida.
     */
    set filters(filters) {
        this._filters = Array.isArray(filters) ? [...filters] : [];
        if (JSON.stringify(this._filters) !== JSON.stringify(this.previousFilters)) {
            this.onChangeFilters(this.filters);
            this.previousFilters = [...this._filters];
        }
    }
    get filters() {
        return this._filters;
    }
    /**
     * @optional
     *
     * @description
     *
     * Largura do campo de busca, utilizando o *Grid System*,
     * e limitado ao máximo de 6 colunas. O tamanho mínimo é controlado
     * conforme resolução de tela para manter a consistência do layout.
     */
    set quickSearchWidth(value) {
        this._quickSearchWidth = convertToInt(value);
    }
    get quickSearchWidth() {
        return this._quickSearchWidth;
    }
    setAdvancedFilterLiterals(literals) {
        this.advancedFilterLiterals = {
            cancelLabel: literals.filterCancelLabel,
            confirmLabel: literals.filterConfirmLabel,
            title: literals.filterTitle
        };
    }
}
PoPageDynamicSearchBaseComponent.decorators = [
    { type: Directive }
];
PoPageDynamicSearchBaseComponent.ctorParameters = () => [
    { type: PoLanguageService }
];
PoPageDynamicSearchBaseComponent.propDecorators = {
    actions: [{ type: Input, args: ['p-actions',] }],
    breadcrumb: [{ type: Input, args: ['p-breadcrumb',] }],
    keepFilters: [{ type: Input, args: ['p-keep-filters',] }],
    concatFilters: [{ type: Input, args: ['p-concat-filters',] }],
    onLoad: [{ type: Input, args: ['p-load',] }],
    title: [{ type: Input, args: ['p-title',] }],
    advancedSearch: [{ type: Output, args: ['p-advanced-search',] }],
    changeDisclaimers: [{ type: Output, args: ['p-change-disclaimers',] }],
    quickSearch: [{ type: Output, args: ['p-quick-search',] }],
    literals: [{ type: Input, args: ['p-literals',] }],
    filters: [{ type: Input, args: ['p-filters',] }],
    quickSearchWidth: [{ type: Input, args: ['p-quick-search-width',] }]
};
__decorate([
    InputBoolean()
], PoPageDynamicSearchBaseComponent.prototype, "keepFilters", void 0);
__decorate([
    InputBoolean()
], PoPageDynamicSearchBaseComponent.prototype, "concatFilters", void 0);
//# sourceMappingURL=data:application/json;base64,