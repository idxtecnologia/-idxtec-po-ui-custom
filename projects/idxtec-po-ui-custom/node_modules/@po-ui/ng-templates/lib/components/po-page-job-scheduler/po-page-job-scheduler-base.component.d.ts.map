{"version":3,"file":"po-page-job-scheduler-base.component.d.ts","sources":["po-page-job-scheduler-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { AbstractControl } from '@angular/forms';\nimport { OnDestroy } from '@angular/core';\nimport { PoBreadcrumb, PoDynamicFormField } from '@po-ui/ng-components';\nimport { PoJobSchedulerInternal } from './interfaces/po-job-scheduler-internal.interface';\nimport { PoPageJobSchedulerService } from './po-page-job-scheduler.service';\n/**\n * @description\n *\n * O `po-page-job-scheduler` é uma página para criação e atualização de agendamentos da execução de processos (Job Scheduler),\n * como por exemplo: a geração da folha de pagamento dos funcionários.\n *\n * Para utilizar esta página, basta informar o serviço (endpoint) para consumo,\n * sem a necessidade de criar componentes e tratamentos dos dados.\n *\n * Veja mais sobre os padrões utilizados nas requisições no [Guia de implementação de APIs](guides/api).\n */\nexport declare class PoPageJobSchedulerBaseComponent implements OnDestroy {\n    protected poPageJobSchedulerService: PoPageJobSchedulerService;\n    /** Objeto com as propriedades do breadcrumb. */\n    breadcrumb?: PoBreadcrumb;\n    /**\n     * Endpoint usado pelo componente para busca dos processos e parâmetros que serão utilizados para criação e edição dos agendamentos.\n     *\n     * #### Processos\n     *\n     * Os processos são as tarefas que estarão disponíveis para o usuário poder fazer os agendamentos.\n     * Ao inicializar o componente, será feito uma requisição `GET` para o endpoint `{service-api}/processes`, para buscar\n     * essa lista de processos.\n     *\n     * Este endpoint `{service-api}/processes` deve retornar uma lista de objetos que seguem a definição de dados abaixo:\n     *\n     * ```\n     * GET {service-api}/processes\n     * ```\n     *\n     * ```\n     * {\n     *   items: [\n     *     { \"processID\": \"ac4f\", \"description\": \"Gerar folha de pagamento\" },\n     *     { \"processID\": \"df6l\", \"description\": \"Relatório de imposto a recolher\" },\n     *     { \"processID\": \"dk3p\", \"description\": \"Títulos em aberto\" },\n     *   ]\n     * }\n     * ```\n     *\n     * Desta forma será renderizado um componente para selecionar o processo e/ou filtrá-los.\n     *\n     * Para realizar o filtro de busca do processo, será feita uma requisição enviando o conteúdo digitado na busca através do\n     * parâmetro `search`. Da seguinte forma:\n     *\n     * ```\n     * GET {service-api}/processes?search=relatorio\n     * ```\n     *\n     * > Veja mais sobre paginação e filtros no [Guia de implementação de APIs](guides/api).\n     * Caso seja informada a propriedade `p-parameters` não serão realizadas as requisições de processos e nem de parametros automaticamente.\n     *\n     * Também é possível fazer um agendamento de um processo específico, sem que seja necessário um endpoint para busca desses\n     * processos. Então, caso o endpoint `{service-api}/processes` não seja válido, será apresentado um campo de entrada de\n     * texto para o usuário informar diretamente\n     * o **identificador do processo - `processID`** e ao salvar será enviado um `POST` para o endpoint difinido `serviceApi` conforme abaixo:\n     *\n     * ```\n     * POST {service-api}\n     * ```\n     *\n     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:\n     *\n     * ```\n     * {\n     *   \"daily\": { \"hour\": 10, \"minute\": 12 },\n     *   \"firstExecution\": \"2018-12-07T00:00:01-00:00\",\n     *   \"recurrent\": true,\n     *   \"processID\": \"ac0405\"\n     *   ...\n     * }\n     * ```\n     *\n     * Caso seja necessário informar parâmetros e adicionar configurações no processo selecionado, será realizado um `GET`\n     * como exemplificado abaixo. Os parâmetros devem retornar uma lista de objetos que seguem a interface\n     * [PoDynamicFormField](/documentation/po-dynamic-form). Porém, caso utilizar a propriedade `p-parameters` o componente não\n     * realizará a busca automática e o campo de processos não será exibido.\n     *\n     * ```\n     * GET {service-api}/processes/:id/parameters\n     * ...\n     * {\n     *   items: [\n     *     { \"property\": \"vencimento\", type: \"date\" },\n     *     { \"property\": \"imposto-retido\", \"label\": \"Imposto Retido\", type: \"boolean\" }\n     *   ]\n     * }\n     * ```\n     *\n     * #### Salvar e Atualizar\n     *\n     * Para salvar o agendamento, será feita uma requisição de criação, passando os valores preenchidos pelo usuário via *payload*.\n     * Abaixo uma requisição `POST` disparada, onde as propriedades do *Job Scheduler* foram preenchidas:\n     *\n     * ```\n     *  POST {service-api}\n     * ```\n     *\n     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:\n     *\n     * ```\n     * {\n     *   \"firstExecution\": \"2018-12-07T00:00:01-00:00\",\n     *   \"recurrent\": true,\n     *   \"monthly\": { \"day\": 1, \"hour\": 10, \"minute\": 0 },\n     *   \"processID\": \"ac0405\",\n     *   \"rangeExecutions: { \"frequency\": { \"type\": \"hour\", \"value\": 2 }, \"rangeLimit\": { \"hour\": 18, \"minute\": 0, \"day\": 20 } }\n     * }\n     * ```\n     *\n     * Caso queira que o componente carregue um agendamento já existente, deve ser incluído um parâmetro na rota chamado `id`.\n     *\n     * Exemplo de configuração de rota:\n     *\n     * ```\n     *  RouterModule.forRoot([\n     *    ...\n     *    { path: 'edit/:id', component: ExampleJobSchedulerComponent },\n     *    ...\n     *  ],\n     * ```\n     *\n     * Baseado nisso, na inicialização do template será disparado uma requisição para buscar o recurso que será editado.\n     *\n     * ```\n     * GET {service-api}/{id}\n     * ```\n     *\n     * Ao atualizar o agendamento, será disparado um `PUT` com os dados preenchidos.\n     * Veja abaixo uma requisição `PUT` disparada, onde a propriedade *recurrent* e *daily* foram atualizadas:\n     *\n     * ```\n     *  PUT {service-api}/{id}\n     * ```\n     *\n     * *Request payload* - estrutura de dados enviada no corpo da requisição conforme interface `PoJobScheduler`:\n     *\n     * ```\n     * {\n     *   \"firstExecution\": \"2018-12-07T00:00:01-00:00\",\n     *   \"recurrent\": true,\n     *   \"processID\": \"ac0405\",\n     *   \"monthly\": { \"day\": 1, \"hour\": 10, \"minute\": 0 },\n     *   \"processID\": \"ac0405\",\n     *   \"rangeExecutions: { \"frequency\": { \"type\": \"hour\", \"value\": 2 }, \"rangeLimit\": { \"hour\": 18, \"minute\": 0, \"day\": 20 } }\n     * }\n     * ```\n     */\n    serviceApi: string;\n    /** Título da página. */\n    title: string;\n    /**\n     * Parâmetros que serão utilizados para criação e edição dos agendamentos.\n     *\n     * Ao utilizar esta propriedade, o componente não buscará automaticamente os parâmetros da API e o campo para preenchimento do processo não será exibido.\n     *\n     */\n    parameters: Array<PoDynamicFormField>;\n    set value(value: any);\n    model: PoJobSchedulerInternal;\n    private _subscription;\n    constructor(poPageJobSchedulerService: PoPageJobSchedulerService);\n    ngOnDestroy(): void;\n    protected loadData(id: string | number): void;\n    protected markAsDirtyInvalidControls(controls: {\n        [key: string]: AbstractControl;\n    }): void;\n}\n"]}