{"version":3,"file":"po-page-login-base.component.d.ts","sources":["po-page-login-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { Subscription } from 'rxjs';\nimport { EventEmitter, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { PoLanguageService, PoLanguage } from '@po-ui/ng-components';\nimport { PoPageLogin } from './interfaces/po-page-login.interface';\nimport { PoPageLoginAuthenticationType } from './enums/po-page-login-authentication-type.enum';\nimport { PoPageLoginCustomField } from './interfaces/po-page-login-custom-field.interface';\nimport { PoPageLoginLiterals } from './interfaces/po-page-login-literals.interface';\nimport { PoPageLoginRecovery } from './interfaces/po-page-login-recovery.interface';\nimport { PoPageLoginService } from './po-page-login.service';\nexport declare const poPageLoginLiteralsDefault: {\n    en: PoPageLoginLiterals;\n    es: PoPageLoginLiterals;\n    pt: PoPageLoginLiterals;\n    ru: PoPageLoginLiterals;\n};\nexport declare const poPageLoginLiteralIn: {\n    en: string;\n    es: string;\n    pt: string;\n    ru: string;\n};\n/**\n * @description\n *\n * O componente `po-page-login` é utilizado como template para tela de login.\n * Com ele é possível definirmos valores para usuário, senha e definir ações para recuperação de senha e gravação de dados do usuário.\n * Também é possível inserir uma imagem em conjunto com um texto de destaque.\n *\n *\n * A propriedade `p-authentication-url` automatiza a rotina do componente e simplifica o processo para autenticação do usuário, bastando\n * definir uma url para requisição da autenticação. A flexibilidade e praticidade podem chegar a um nível em que o desenvolvimento\n * da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de login de usuário.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.\n *\n *\n * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@po-ui/style/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport declare abstract class PoPageLoginBaseComponent implements OnDestroy {\n    private loginService;\n    router: Router;\n    poLanguageService: PoLanguageService;\n    /**\n     * O `p-background` permite inserir uma imagem de destaque ao lado direito do formulário de login, caso a propriedade\n     * não seja preenchida o formulário será centralizado no espaço disponível.\n     *\n     * A fonte da imagem pode ser de um caminho local ou uma url de um servidor externo.\n     *\n     * Além da imagem, é possível adicionar um texto informativo por cima da imagem da imagem de destaque, para isso informe\n     * um valor para a literal `highlightInfo`.\n     *\n     * > Veja mais sobre as literais na propriedade `p-literals`.\n     *\n     * Exemplos de valores válidos:\n     * - **local**: `./assets/images/login-background.png`\n     * - **url externa**: `https://po-ui.io/assets/images/login-background.png`\n     *\n     * > Essa propriedade é ignorada para aplicações mobile.\n     */\n    background?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caminho para a logomarca localizada na parte superior.\n     *\n     * > Caso seja indefinida o espaço se mantém preservado porém vazio.\n     */\n    logo?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Expressão regular para validar o campo de login, caso a expressão não seja atentida, a literal `loginErrorPattern`\n     * será exibida.\n     *\n     * Exemplos de valores válidos:\n     * - email: `[expressao-regular-email]`\n     * - cpf: `[expressao-regular-cpf]`\n     *\n     * > Veja a propriedade `p-literals` para customizar a literal `loginErrorPattern`.\n     */\n    loginPattern?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Expressão regular para validar o campo de password, caso a expressão não seja atentida, a literal `passwordErrorPattern`\n     * será exibida.\n     *\n     * Exemplos de valores válidos:\n     * - Apenas números: `\\d?`\n     * - Letras mínusculas: `\\z?`\n     *\n     * > Veja a propriedade `p-literals` para customizar a literal `passwordErrorPattern`.\n     */\n    passwordPattern?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caminho para a logomarca localizada no rodapé.\n     */\n    secondaryLogo?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado quando o usuário alterar o input do campo login.\n     *\n     * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.\n     *\n     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-authentication-url`.\n     */\n    loginChange: EventEmitter<string>;\n    /**\n     * Evento disparado ao submeter o formulário de login (apertando `Enter` dentro dos campos ou pressionando o botão de confirmação).\n     *\n     * Esse evento receberá como parâmetro um objeto do tipo `PoPageLogin` com os dados informados no formulário.\n     *\n     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-recovery`.\n     *\n     * > Para mais detalhes consulte a documentação sobre a interface `PoPageLogin` mais abaixo.\n     */\n    loginSubmit: EventEmitter<PoPageLogin>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado quando o usuário alterar o input do campo password.\n     *\n     * Esse evento receberá como parâmetro uma variável do tipo `string` com o texto informado no campo.\n     *\n     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-authentication-url`.\n     */\n    passwordChange: EventEmitter<string>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Evento disparado quando o usuário alterar o idioma da página.\n     *\n     * Esse evento receberá como parâmetro um objeto do tipo `PoLanguage` com a linguagem selecionada.\n     *\n     */\n    languageChange: EventEmitter<PoLanguage>;\n    allLoginErrors: Array<string>;\n    allPasswordErrors: Array<string>;\n    customFieldObject: PoPageLoginCustomField;\n    customFieldType: string;\n    loginSubscription: Subscription;\n    password: string;\n    rememberUser: boolean;\n    selectedLanguage: string;\n    showExceededAttemptsWarning: boolean;\n    private _authenticationType;\n    private _authenticationUrl;\n    private _blockedUrl;\n    private _contactEmail;\n    private _customField;\n    private _environment?;\n    private _exceededAttemptsWarning?;\n    private _hideRememberUser;\n    private _literals;\n    private _loading?;\n    private _login;\n    private _loginErrors;\n    private _passwordErrors;\n    private _productName;\n    private _recovery;\n    private _registerUrl;\n    private _support;\n    private _languagesList;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Ao informar um valor do tipo `string`, o mesmo será aplicado como a chave do campo customizado e utilizará\n     * os valores padrões contidos na propriedade `literals` como `customFieldErrorPattern` e `customFieldPlaceholder`.\n     *\n     * Existe a possibilidade de informar um objeto que segue a definição da interface `PoPageLoginCustomField`, onde\n     * através dos parâmetros enviados pode gerar um `po-input`, `po-combo` especificamente para serviços\n     * ou `po-select` para valores fixos.\n     *\n     * Abaixo seguem os exemplos de cada tipo de campo.\n     *\n     * `po-input`:\n     *\n     * ```\n     * {\n     *   property: 'domain',\n     *   value: 'jv01',\n     *   placeholder: 'Enter your domain',\n     *   pattern: '[a-z]',\n     *   errorPattern: 'Invalid value'\n     * }\n     * ```\n     *\n     * `po-combo`:\n     *\n     * ```\n     * {\n     *   property: 'domain',\n     *   value: 'jv01',\n     *   placeholder: 'Enter your domain',\n     *   url: 'https://po-ui.io/sample/api/comboOption/domains',\n     *   fieldValue: 'nickname'\n     * }\n     * ```\n     *\n     * `po-select`:\n     *\n     * ```\n     * {\n     *   property: 'domain',\n     *   value: 'jv01',\n     *   placeholder: 'Enter your domain',\n     *   options: [{label: 'Domain 1', value: '1'}, {label: 'Domain 2', value: '2'}]\n     * }\n     * ```\n     *\n     * Caso o customField possua options, url e fieldValue preenchidos, será priorizado o po-select\n     * utilizando o options.\n     *\n     */\n    set customField(value: string | PoPageLoginCustomField);\n    get customField(): string | PoPageLoginCustomField;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Personaliza o e-mail que é exibido na mensagem de dica de login padrão para contato de suporte.\n     */\n    set contactEmail(value: string);\n    get contactEmail(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Texto customizado que fica entre a logo e a mensagem de boas-vindas.\n     */\n    set productName(value: string);\n    get productName(): string;\n    /**\n     * @optional\n     *\n     * @description\n     * Adiciona uma `tag` abaixo do título que especifica o ambiente que o usuário está fazendo o login.\n     *\n     * > Essa propriedade limita o texto em 40 caracteres.\n     */\n    set environment(environment: string);\n    get environment(): string;\n    /**\n     * @optional\n     *\n     * @description\n     * Exibe um aviso de bloqueio de acordo com a quantidade restante de tentativas.\n     * O aviso será exibido somente se a quantidade for maior que zero.\n     *\n     * > Caso tenha algum valor atribuído para o atributo `p-authentication-url` e o retorno da requisição estiver atribuindo valor\n     * para o `p-exceeded-attempts-warning`, o valor considerado será o do retorno da requisição.\n     *\n     * @default `0`\n     */\n    set exceededAttemptsWarning(value: number);\n    get exceededAttemptsWarning(): number;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Esconde a função \"Lembrar usuário\" do formulário de login.\n     *\n     * Quando essa propriedade é setada com `true` a propriedade `rememberUser` enviada no evento `p-login-submit` será sempre\n     * `false`.\n     *\n     * > Veja a propriedade `p-literals` para customizar a literal `rememberUser`.\n     *\n     * @default `false`\n     */\n    set hideRememberUser(value: boolean);\n    get hideRememberUser(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Objeto com as literais usadas no `po-page-login`.\n     *\n     * Existem duas maneiras de customizar o componente, passando um objeto com todas as literais disponíveis:\n     *\n     * ```\n     *  const customLiterals: PoPageLoginLiterals = {\n     *    attempts: '{0} vez(es) ',\n     *    createANewPasswordNow: 'Melhor criar uma senha nova agora! Você vai poder entrar no sistema logo em seguida.',\n     *    forgotPassword: 'Esqueceu sua senha?',\n     *    forgotYourPassword: 'Esqueceu sua senha?',\n     *    highlightInfo: '',\n     *    iForgotMyPassword: 'Esqueci minha senha',\n     *    ifYouTryHarder: 'Se tentar mais ',\n     *    welcome: 'Boas-vindas',\n     *    loginErrorPattern: 'Login obrigatório',\n     *    loginHint: 'Caso não possua usuário entre em contato com o suporte',\n     *    loginLabel: 'Insira seu usuário',\n     *    loginPlaceholder: 'Insira seu usuário de acesso',\n     *    passwordErrorPattern: 'Senha obrigatória',\n     *    passwordLabel: 'Insira sua senha',\n     *    passwordPlaceholder: 'Insira sua senha de acesso',\n     *    customFieldErrorPattern: 'Campo customizado inválido',\n     *    customFieldPlaceholder: 'Por favor insira um valor',\n     *    registerUrl: 'Novo registro',\n     *    rememberUser: 'Lembrar usuário',\n     *    rememberUserHint: 'Esta opção pode ser desabilitada nas configurações do sistema',\n     *    submitLabel: 'Acessar sistema',\n     *    submittedLabel: 'Carregando...',\n     *    titlePopover: 'Opa!',\n     *    yourUserWillBeBlocked: 'sem sucesso seu usuário será bloqueado e você fica 24 horas sem poder acessar :('\n     *  };\n     * ```\n     *\n     * Ou passando apenas as literais que deseja customizar:\n     *\n     * ```\n     *  const customLiterals: PoPageLoginLiterals = {\n     *    loginPlaceholder: 'Insira seu usuário de acesso',\n     *    passwordPlaceholder: 'Insira sua senha de acesso',\n     *    submitLabel: 'Acessar sistema'\n     *  };\n     * ```\n     *\n     * E para carregar as literais customizadas, basta apenas passar o objeto para o componente.\n     *\n     * ```\n     * <po-page-login\n     *   [p-literals]=\"customLiterals\">\n     * </po-page-login>\n     * ```\n     *\n     *  > O objeto padrão de literais será traduzido de acordo com o idioma do browser (pt, en, es).\n     *  > É também possível alternar o objeto padrão de literais através do seletor de idiomas localizado na parte inferior do template,\n     * nesse caso, há também a opção do idioma russo.\n     */\n    set literals(value: PoPageLoginLiterals);\n    get literals(): PoPageLoginLiterals;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Habilita um estado de carregamento ao botão de *login*.\n     *\n     * > É necessário atribuir `true` à esta propriedade na função definida em `p-login-submit`.\n     *\n     * @default `false`\n     */\n    set loading(value: boolean);\n    get loading(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Valor do modelo do campo de login.\n     */\n    set login(value: string);\n    get login(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Atributo que recebe uma lista de erros e exibe abaixo do campo de login.\n     */\n    set loginErrors(value: Array<string>);\n    get loginErrors(): Array<string>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Atributo que recebe uma lista de erros e exibe abaixo do campo de password.\n     */\n    set passwordErrors(value: Array<string>);\n    get passwordErrors(): Array<string>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Exibe um link abaixo do formulário de login para que os usuários da aplicação façam a recuperação dos dados de autenticação.\n     *\n     * A propriedade aceita os seguintes tipos:\n     *\n     * - **String**: informe uma url externa ou uma rota válida;\n     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:\n     * ```\n     * <po-page-login>\n     *   [recovery]=\"this.myRecovery.bind(this)\">\n     * </po-page-login>\n     * ```\n     *\n     * - **PoPageLoginRecovery**: cria-se vínculo automático com o template **po-modal-password-recovery**.\n     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,\n     *   **email** para contato e **máscara** do campo de telefone.\n     */\n    set recovery(value: string | Function | PoPageLoginRecovery);\n    get recovery(): string | Function | PoPageLoginRecovery;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caso a aplicação tenha um link para novos cadastros, informe uma url externa ou uma rota válida, dessa\n     * forma será exibido um link abaixo do formulário de login para os usuários da aplicação.\n     *\n     * Exemplos de valores válidos:\n     * - **local**: `/home`\n     * - **url externa**: `https://po-ui.io`\n     *\n     * > Veja a propriedade `p-literals` para customizar a literal `registerUrl`.\n     */\n    set registerUrl(value: string);\n    get registerUrl(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Atributo que recebe o tipo de esquema da autenticação, sendo suportados apenas os valores `Basic` e `Bearer`.\n     *\n     * > Caso o tipo definido seja `Basic`, o componente fará uma requisição `POST` contendo:\n     *\n     * ```\n     * headers {\n     *  Authorization: Basic base64(login:password)\n     * }\n     *\n     * body {\n     *  rememberUser: rememberUser\n     * }\n     * ```\n     *\n     * > Caso o tipo definido seja `Bearer`, o componente fará uma requisição `POST` contendo:\n     *\n     * ```\n     * body {\n     *  login: login,\n     *  password: base64(password),\n     *  rememberUser: rememberUser\n     * }\n     * ```\n     *\n     * @default `PoPageLoginAuthenticationType.Basic`\n     */\n    set authenticationType(value: PoPageLoginAuthenticationType);\n    get authenticationType(): PoPageLoginAuthenticationType;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Endpoint usado pelo template para requisição do recurso. Quando preenchido, o método `p-login-submit` será ignorado e o\n     * componente adquirirá automatização para o processo de autenticação.\n     *\n     * ### Processos\n     * Ao digitar um valor válido no campo de login/password e pressionar **Enter**, o componente fará uma requisição `POST`\n     * na url especificada nesta propriedade passando o objeto contendo o valor definido pelo usuário:\n     *\n     * ```\n     * headers {\n     *  Authorization: Basic base64(login:password)\n     * }\n     *\n     * body {\n     *  rememberUser: rememberUser\n     * }\n     * ```\n     *\n     * Em caso de **sucesso**, o objeto de retorno é armazenado no `sessionStorage` e o usuário é redirecionado para a página inicial da\n     * aplicação `/`.\n     *\n     * ```\n     * 200:\n     *  {\n     *    user: user\n     *  }\n     * ```\n     *\n     * Em caso de **erro** na autenticação, espera-se o seguinte retorno:\n     *\n     * ```\n     * 400/401\n     *  {\n     *    code: 400/401,\n     *    message: message,\n     *    detailedMessage: detailedMessage,\n     *    helpUrl?: helpUrl\n     *  }\n     * ```\n     *\n     * > Pode-se atribuir uma quantidade máxima de tentativas restantes (maxAttemptsRemaining) para o atributo `p-exceeded-attempts-warning`,\n     * assim como os avisos relacionados aos campos login e password (loginWarnings, passwordWarnings) para os atributos `p-login-errors` e\n     * `p-password-errors` conforme retorno abaixo:\n     *\n     * ```\n     * 400\n     *  {\n     *    code: 400/401,\n     *    message: message,\n     *    detailedMessage: detailedMessage,\n     *    helpUrl?: helpUrl,\n     *    maxAttemptsRemaining?: maxAttemptsRemaining,\n     *    loginWarnings?: [loginWarnings],\n     *    passwordWarnings?: [passwordWarnings]\n     *  }\n     * ```\n     *\n     * > Caso o valor atribuído para `p-exceeded-attempts-warning` seja igual a 0(zero), poderá ser passado um valor para o\n     * atributo `p-blocked-url` e o usuário será redirecionado para uma tela de bloqueio.\n     *\n     * *Processo finalizado.*\n     *\n     * _______________\n     *\n     * #### Praticidade\n     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,\n     * dispensa-se qualquer menção e/ou importação do componente `po-page-login` no restante da aplicação. O exemplo abaixo exemplifica\n     * a forma dinâmica com a qual o template de tela de login pode ser gerado ao navegar para rota `/login`, e também como ele se comunica\n     * com o serviço para efetuação do processo de autenticação do usuário e solicitação de nova senha.\n     * Basta definir nas configurações de rota:\n     *\n     *\n     * ```\n     *   import { PoPageLoginComponent, PoPageLoginAthenticationType } from '@po-ui/ng-templates';\n     *\n     *   ...\n     *   const routes: Routes = [\n     *     {\n     *       path: 'login', component: PoPageLoginComponent, data: {\n     *         serviceApi: 'https://po-ui.io/sample/api/users/authentication',\n     *         environment: 'development',\n     *         recovery: {\n     *           url: 'https://po-ui.io/sample/api/users',\n     *           type: PoModalPasswordRecoveryType.All,\n     *           contactMail: 'dev.po@po-ui.com',\n     *           phoneMask: '9-999-999-9999'\n     *         },\n     *         registerUrl: '/new-password',\n     *         authenticationType: PoPageLoginAthenticationType.Basic\n     *       }\n     *     }\n     *     ...\n     *   ];\n     *\n     *   @NgModule({\n     *     imports: [RouterModule.forRoot(routes)],\n     *     exports: [RouterModule]\n     *   })\n     *   export class AppRoutingModule { }\n     * ```\n     *\n     *\n     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de autenticação, o `environment` alimenta a propriedade\n     * `p-environment`, `recovery` é a interface `PoPageLoginRecovery` responsável pelas especificações contidas na modal de recuperação de\n     * senha, `registerUrl` alimenta a propriedade `p-register-url` e `authenticationType` que define a propriedade `p-authentication-type`.\n     *\n     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n     *\n     */\n    set authenticationUrl(value: string);\n    get authenticationUrl(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caso o valor atribuído para `p-exceeded-attempts-warning` seja igual a 0(zero) e a aplicação tenha um link de bloqueio de usuário,\n     * informe uma url externa ou uma rota válida, dessa forma em caso de bloqueio o usuário será redirecionado.\n     */\n    set blockedUrl(value: string);\n    get blockedUrl(): string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Exibe um botão para suporte.\n     *\n     * A propriedade aceita os seguintes tipos:\n     *\n     * - **String**: URL externa ou uma rota válida;\n     * - **Function**: Função a ser disparada ao clicar no botão de suporte;\n     * ```\n     * <po-page-login>\n     *   [p-support]=\"this.mySupport.bind(this)\">\n     * </po-page-login>\n     * ```\n     *\n     */\n    set support(value: string | Function);\n    get support(): string | Function;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Coleção de idiomas que o componente irá tratar e disponibilizará para o usuário escolher.\n     *\n     * Caso essa propriedade não seja utilizada o componente mostrará no combo os idiomas que ele suporta por padrão.\n     *\n     * Caso a coleção tenha um idioma, a página estará nesse idioma e não mostrará o combo.\n     *\n     * Caso seja passado um array vazio, a página terá o idioma configurado no `i18n` e não mostrará o combo de seleção.\n     *\n     * > Se for passado um idioma não suportado, será preciso passar as literais pela propriedade `p-literals`.\n     *\n     *\n     */\n    set languagesList(languagesList: Array<PoLanguage>);\n    get languagesList(): Array<PoLanguage>;\n    get showLanguage(): boolean;\n    get language(): string;\n    get pageLoginLiterals(): PoPageLoginLiterals;\n    constructor(loginService: PoPageLoginService, router: Router, poLanguageService: PoLanguageService);\n    ngOnDestroy(): void;\n    closePopover(): void;\n    onLoginSubmit(): void;\n    private getDefaultCustomFieldObject;\n    private openExternalLink;\n    private openInternalLink;\n    private redirectBlockedUrl;\n    private setValuesToProperties;\n    protected abstract concatenateLoginHintWithContactEmail(contactEmail: string): any;\n    protected abstract setLoginErrors(value: Array<string>): void;\n    protected abstract setPasswordErrors(value: Array<string>): void;\n}\n"]}