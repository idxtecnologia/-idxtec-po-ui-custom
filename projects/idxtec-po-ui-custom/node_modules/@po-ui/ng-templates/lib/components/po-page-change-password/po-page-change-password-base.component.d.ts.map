{"version":3,"file":"po-page-change-password-base.component.d.ts","sources":["po-page-change-password-base.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter } from '@angular/core';\nimport { PoModalAction } from '@po-ui/ng-components';\nimport { PoPageChangePasswordRecovery } from './interfaces/po-page-change-password-recovery.interface';\nimport { PoPageChangePasswordRequirement } from './interfaces/po-page-change-password-requirement.interface';\n/**\n * @description\n *\n * O componente `po-page-change-password` é utilizado como template para tela de cadastro ou alteração de senha.\n *\n * Apresenta dicas e regras para senhas mais seguras e também possibilidade de personalizar o redirecionamento para as telas\n * 'esqueceu a senha', 'voltar' e 'entrar no sistema'. Os textos das telas são pré-definidos e imutáveis.\n *\n * A propriedade `p-url-new-password` automatiza a rotina do template e simplifica o processo de cadastro/alteração de senha, bastando\n * definir uma url para POST das informações digitadas pelo usuário.  A flexibilidade e praticidade podem chegar a um nível em que o\n * desenvolvimento da aplicação no *client side* é desprovida de qualquer código-fonte relacionado à rotina de cadastro/alteração de senha.\n * Seu detalhamento para uso pode ser visto logo abaixo em *propriedades*.\n * Caso julgue necessário, pode-se também definir manualmente a rotina do componente.\n *\n * Para que as imagens sejam exibidas corretamente, é necessário incluir o caminho delas ao projeto. Para isso, edite\n * o *assets* no arquivo **angular.json** da aplicação na seguinte ordem:\n * ```\n *   \"assets\": [\n *     \"src/assets\",\n *     \"src/favicon.ico\",\n *     {\n *       \"glob\": \"**\\/*\",\n *       \"input\": \"node_modules/@po-ui/style/images\",\n *       \"output\": \"assets/images\"\n *     }\n *   ]\n * ```\n */\nexport declare abstract class PoPageChangePasswordBaseComponent {\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caminho para a logomarca localizada na parte superior.\n     *\n     * > Caso seja indefinida o espaço se mantém preservado porém vazio.\n     */\n    logo?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Caminho para a logomarca localizada no rodapé.\n     */\n    secondaryLogo?: string;\n    /**\n     * Token para solicitação de troca/recuperação de senha.\n     *\n     * > Esta propriedade será ignorada caso exista um token como parâmetro na URL inicial do template.\n     */\n    token?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * URL para a ação de retorno da página.\n     *\n     * > O botão `Voltar` aparece apenas para telas de alteração de senha, ou seja, só aparece se a propriedade `p-hide-current-password` for\n     * falsa.\n     *\n     * @default `/`\n     */\n    urlBack: string;\n    /**\n     * Endpoint usado pelo template para realizar um POST. Quando preenchido, o método `p-submit` será ignorado e o componente adquirirá\n     * automatização para o processo de cadastro/troca de senha.\n     *\n     * ### Processo\n     * Ao digitar um valor válido nos campos de senha e pressionar **salvar**,\n     * o componente fará uma requisição `POST` na url especificada nesta propriedade passando o objeto contendo os valores definidos pelo\n     * usuário.\n     *\n     * ```\n     * body {\n     *  token?: token,\n     *  oldPassword?: oldPassword,\n     *  newPassword: newPassword\n     * }\n     * ```\n     *\n     * O código de resposta HTTP de status esperado é `204`.\n     *\n     * Em caso de **sucesso**, será exibida a modal de confirmação de senha alterada.\n     *\n     * > O token será informado pela propriedade `p-token`do componente ou por um *query parameter* na URL do template.\n     *\n     * *Processo finalizado.*\n     *\n     * _______________\n     *\n     * #### Praticidade\n     * As informações do serviço de autenticação também podem ser transmitidas diretamente pelas configuraçãos de rota e, desta maneira,\n     * dispensa-se qualquer menção e/ou importação do componente `po-page-change-password` no restante da aplicação. O exemplo abaixo\n     * exemplifica a forma dinâmica com a qual o template de tela de troca de senha pode ser gerado ao navegar para rota `/change-password`, e\n     * também como ele se comunica com o serviço para efetuação do processo de troca de senha do usuário e solicitação de nova senha.\n     * Basta definir nas configurações de rota:\n     *\n     *\n     * ```\n     *   import { PoModalPasswordRecoveryType, PoPageChangePasswordComponent } from '@po-ui/ng-templates';\n     *\n     *   ...\n     *   const routes: Routes = [\n     *     {\n     *       path: 'change-password', component: PoPageChangePasswordComponent, data: {\n     *         serviceApi: 'https://po-ui.io/sample/api/new-password',\n     *         recovery: {\n     *           url: 'https://po-ui.io/sample/api/users',\n     *           type: PoModalPasswordRecoveryType.All,\n     *           contactMail: 'dev.po@po-ui.com',\n     *           phoneMask: '9-999-999-9999'\n     *         }\n     *       }\n     *     }\n     *     ...\n     *   ];\n     *\n     *   @NgModule({\n     *     imports: [RouterModule.forRoot(routes)],\n     *     exports: [RouterModule]\n     *   })\n     *   export class AppRoutingModule { }\n     * ```\n     *\n     *\n     * O metadado `serviceApi` deve ser a **url** para requisição dos recursos de troca de senha. E `recovery` é a interface\n     * `PoPageChangePasswordRecovery` responsável pelas especificações contidas na modal de recuperação de senha.\n     *\n     * > É essencial que siga a nomenclatura dos atributos exemplificados acima para sua efetiva funcionalidade.\n     *\n     */\n    urlNewPassword?: string;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Função executada ao submeter o form pelo botão salvar.\n     *\n     * Caso definida essa função, a modal de confirmação não aparece, mas pode ser chamada pelo\n     * método `openConfirmation`. Exemplo:\n     *\n     * ```\n     * @ViewChild(PoPageChangePasswordComponent) changePassword: PoPageChangePasswordComponent;\n     *\n     * onSubmit() {\n     *  this.changePassword.openConfirmation();\n     * }\n     *\n     * ```\n     * > Esta propriedade será ignorada se for definido valor para a propriedade `p-url-new-password`.\n     */\n    submit: EventEmitter<any>;\n    confirmPassword: string;\n    currentPassword: string;\n    modalAction: PoModalAction;\n    newPassword: string;\n    recoveryUrlType: string;\n    showRequirements: boolean;\n    protected validatorChange: any;\n    private _hideCurrentPassword;\n    private _recovery;\n    private _requirements;\n    private _urlHome;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Esconde o campo `Senha atual` para que o template seja para criação de senha.\n     *\n     * @default `false`\n     */\n    set hideCurrentPassword(value: boolean);\n    get hideCurrentPassword(): boolean;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * URL para a ação do link `Esqueceu a senha`.\n     *\n     * A propriedade aceita os seguintes tipos:\n     *\n     * - **String**: informe uma url externa ou uma rota válida;\n     * - **Function**: pode-se customizar a ação. Para esta possilidade basta atribuir:\n     * ```\n     * <po-page-change-password>\n     *      [recovery]=\"this.myFunc.bind(this)\";\n     * </po-page-change-password>\n     * ```\n     *\n     * - **PoPageChangePasswordRecovery**: cria-se vínculo automático com o template **po-modal-password-recovery**.\n     *   O objeto deve conter a **url** para requisição dos recursos e pode-se definir o **tipo** de modal para recuperação de senha,\n     *   **email** para contato e **máscara** do campo de telefone.\n     *\n     * > Caso não tenha valor o link `Esqueceu a senha` desaparece.\n     */\n    set recovery(value: string | Function | PoPageChangePasswordRecovery);\n    get recovery(): string | Function | PoPageChangePasswordRecovery;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * Lista de regras para criação e alteração de senha.\n     */\n    set requirements(value: Array<PoPageChangePasswordRequirement>);\n    get requirements(): Array<PoPageChangePasswordRequirement>;\n    /**\n     * @optional\n     *\n     * @description\n     *\n     * URL para a ação do botão `Entrar no sistema` da modal de confirmação que aparece após salvar a senha ou se chamada pelo método\n     * `openConfirmation`.\n     *\n     * @default `/`\n     */\n    set urlHome(value: string);\n    get urlHome(): string;\n    abstract navigateTo(url: string): void;\n}\n"]}